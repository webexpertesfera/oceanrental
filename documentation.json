{
    "pipes": [],
    "interfaces": [
        {
            "name": "Breadcrumb",
            "id": "interface-Breadcrumb-2760f571849cd28cd866f833002ec48d",
            "file": "src/app/core/models/breadcrumb.model.ts",
            "type": "interface",
            "sourceCode": "export interface Breadcrumb {\r\n  path?: string;\r\n  absolutePath?: string;\r\n  label: string;\r\n  active: boolean;\r\n  disabled: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "absolutePath",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PageMetadata",
            "id": "interface-PageMetadata-d048eb21094e8822728e0a1ceb55f4c2",
            "file": "src/app/core/services/metadata.service.ts",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface PageMetadata {\r\n  title: string;\r\n  // image will be added later\r\n  description: string;\r\n  author: string;\r\n  keywords: string[];\r\n  type: string;\r\n}\r\n\r\nconst defaultMetadata: PageMetadata = {\r\n  title: 'Ocean Premium',\r\n  description: 'Ocean Premium',\r\n  author: 'Ocean Premium',\r\n  keywords: ['Water Toys'],\r\n  type: 'website',\r\n};\r\n\r\n@Injectable()\r\nexport class MetadataService {\r\n  constructor(\r\n    private metaTagService: Meta,\r\n    private titleService: Title,\r\n    private router: Router\r\n  ) {}\r\n\r\n  public updateMetadata(\r\n    metadata: Partial<PageMetadata>,\r\n    index: boolean = true\r\n  ): void {\r\n    const pageMetadata: PageMetadata = { ...defaultMetadata, ...metadata };\r\n    const metatags: MetaDefinition[] = this.generateMetaDefinitions(\r\n      pageMetadata\r\n    );\r\n\r\n    this.metaTagService.addTags([\r\n      ...metatags,\r\n      { property: 'og:url', content: `https://oceanpremium.com${this.router.url}` },\r\n      { name: 'robots', content: index ? 'index, follow' : 'noindex' },\r\n      { name: 'viewport', content: 'width=device-width, initial-scale=1' },\r\n      { 'http-equiv': 'Content-Type', content: 'text/html; charset=utf-8' },\r\n    ]);\r\n\r\n    this.titleService.setTitle(pageMetadata.title);\r\n  }\r\n\r\n  private generateMetaDefinitions(metadata: PageMetadata): MetaDefinition[] {\r\n    return [\r\n      { name: 'title', content: metadata.title },\r\n      { property: 'og:title', content: metadata.title },\r\n\r\n      { name: 'description', content: metadata.description },\r\n      { property: 'og:description', content: metadata.description },\r\n\r\n      { name: 'author', content: metadata.author },\r\n      { property: 'og:author', content: metadata.author },\r\n\r\n      { name: 'keywords', content: metadata.keywords.join(', ') },\r\n\r\n      { property: 'og:type', content: metadata.type },\r\n    ];\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "keywords",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Timezone",
            "id": "interface-Timezone-12637c25ca9319bb5c85cb251ea65a98",
            "file": "src/app/booking/models/countries.model.ts",
            "type": "interface",
            "sourceCode": "export class City {\r\n    name: string = \"\";\r\n    countryCode: string = \"\";\r\n    stateCode: string = \"\";\r\n    latitude?: string = \"\";\r\n    longitude?: string = \"\";\r\n}\r\n\r\ninterface Timezone {\r\n    zoneName: string;\r\n    gmtOffset: string;\r\n    gmtOffsetName: string;\r\n    abbreviation: string;\r\n    tzName: string;\r\n}\r\n\r\nexport class Country {\r\n    isoCode: string = \"\";\r\n    name: string = \"\";\r\n    phonecode: number = 0;\r\n    flag: string = \"\";\r\n    currency: string = \"\";\r\n    latitude: number = 0;\r\n    longitude: number = 0;\r\n    timezones?: Timezone[] = [];\r\n}\r\n",
            "properties": [
                {
                    "name": "abbreviation",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "gmtOffset",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "gmtOffsetName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "tzName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "zoneName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-a3ee1c1a1f78e479753007bead34b4d5",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "ngUser",
                    "type": "NgUser",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "description": "",
            "sourceCode": "import { isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { NgAuthService, NgUser } from '@appstrax/ng-auth';\r\nimport { User } from '../booking/models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private user!: User;\r\n  private ngUser!: NgUser;\r\n\r\n  constructor(\r\n    private ngAuth: NgAuthService,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    if (isPlatformBrowser(this.platformId) && this.isAuthenticated()) {\r\n      this.ngUser = this.ngAuth.getAuthenticatedUser();\r\n      this.user = User.fromNgUser(this.ngUser);\r\n    }\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    if (isPlatformServer(this.platformId)) return true;\r\n    return this.ngAuth.isAuthenticated();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "platformId",
                        "type": "Object"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BookingService",
            "id": "injectable-BookingService-5b7e4966d3dc00d87723e1eaa9c23a72",
            "file": "src/app/booking/services/bookings.service.ts",
            "properties": [
                {
                    "name": "apiBaseUrl",
                    "defaultValue": "'https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "availabilityCheck",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "bookings",
                    "defaultValue": "[]",
                    "type": "Array<Booking>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "bookingsChanged",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currentBooking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "addAccessories",
                    "args": [
                        {
                            "name": "pBooking",
                            "type": "Booking"
                        },
                        {
                            "name": "pProduct",
                            "type": "Product"
                        },
                        {
                            "name": "accessories",
                            "type": "Array<Product>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Booking>",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "pBooking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pProduct",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accessories",
                            "type": "Array<Product>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        },
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Booking>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "availabilityGraph",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        },
                        {
                            "name": "period",
                            "type": "BookingPeriod"
                        },
                        {
                            "name": "location",
                            "type": "BookingLocation"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<AvailabilityGraph>",
                    "typeParameters": [],
                    "line": 225,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "period",
                            "type": "BookingPeriod",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "BookingLocation",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeAccessoryQuantity",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        },
                        {
                            "name": "accessory",
                            "type": "Product"
                        },
                        {
                            "name": "quantity",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Booking>",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accessory",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeProductQuantity",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        },
                        {
                            "name": "product",
                            "type": "Product"
                        },
                        {
                            "name": "quantity",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Booking | undefined>",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "Booking",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<Booking>",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forceAvailabilityCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287
                },
                {
                    "name": "getBookingById",
                    "args": [
                        {
                            "name": "bookingId",
                            "type": "string | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "bookingId",
                            "type": "string | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBookings",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 156
                },
                {
                    "name": "getCurrentBooking",
                    "args": [],
                    "optional": false,
                    "returnType": "Booking | undefined",
                    "typeParameters": [],
                    "line": 172
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "productsAvailability",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Availability>",
                    "typeParameters": [],
                    "line": 181,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAccessory",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        },
                        {
                            "name": "accessory",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Booking>",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accessory",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeProduct",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        },
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Booking | undefined>",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266
                },
                {
                    "name": "setCurrentBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uniqueId",
                    "args": [
                        {
                            "name": "parts",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 254,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "parts",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { AvailabilityGraph } from '../models/availability-graph.model';\r\nimport { Availability } from '../models/availability.model';\r\nimport { BookingLocation } from '../models/booking-location.model';\r\nimport { BookingPeriod } from '../models/booking-period.model';\r\nimport { Booking } from '../models/booking.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BookingService {\r\n  bookings: Array<Booking> = [];\r\n  bookingsChanged = new Subject();\r\n  currentBooking: Booking | undefined;\r\n\r\n  availabilityCheck = new Subject();\r\n\r\n  apiBaseUrl: string =\r\n    'https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products';\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.load();\r\n    }\r\n  }\r\n\r\n  async addToBooking(booking: Booking, product: Product): Promise<Booking> {\r\n    if (booking.id) {\r\n      const bookingExists = this.bookings.find((b) => b.id === booking.id);\r\n      if (!bookingExists) {\r\n        this.createBooking(booking);\r\n      }\r\n\r\n      const exists = booking.products.find((p) => p.id === product.id);\r\n      if (exists) {\r\n        exists.quantity = exists.quantity + product.quantity;\r\n      } else {\r\n        booking.products.push(product);\r\n      }\r\n\r\n      this.bookingsChanged.next();\r\n    } else {\r\n      booking.id = this.uniqueId(2);\r\n      booking.products.push(product);\r\n      this.bookings.push(booking);\r\n      this.bookingsChanged.next();\r\n    }\r\n\r\n    this.save();\r\n\r\n    return booking;\r\n  }\r\n\r\n  createBooking(booking: Booking): Booking {\r\n    this.bookings.push(booking);\r\n    this.save();\r\n    return booking;\r\n  }\r\n\r\n  async removeProduct(\r\n    booking: Booking,\r\n    product: Product\r\n  ): Promise<Booking | undefined> {\r\n    if (!booking) throw new Error('Booking required.');\r\n\r\n    booking.products = booking.products.filter((p) => p.id !== product.id);\r\n    if (booking.products.length === 0) {\r\n      this.deleteBooking(booking);\r\n      return undefined;\r\n    }\r\n\r\n    this.save();\r\n    return booking;\r\n  }\r\n\r\n  async removeAccessory(\r\n    booking: Booking,\r\n    accessory: Product\r\n  ): Promise<Booking> {\r\n    if (!booking) throw new Error('Booking required.');\r\n    booking.products.forEach((p) => {\r\n      p.accessories = p.accessories.filter((a) => a.id !== accessory.id);\r\n    });\r\n    this.save();\r\n    return booking;\r\n  }\r\n\r\n  async addAccessories(\r\n    pBooking: Booking,\r\n    pProduct: Product,\r\n    accessories: Array<Product>\r\n  ): Promise<Booking> {\r\n    const booking = this.bookings.find((b) => b.id === pBooking.id);\r\n    if (!booking) throw new Error('Booking not found');\r\n\r\n    const product = booking.products.find((p) => p.id === pProduct.id);\r\n    if (!product) throw new Error('Product not found');\r\n\r\n    product.accessories = accessories;\r\n    this.bookingsChanged.next();\r\n\r\n    this.save();\r\n\r\n    return booking;\r\n  }\r\n\r\n  async changeProductQuantity(\r\n    booking: Booking,\r\n    product: Product,\r\n    quantity: number\r\n  ): Promise<Booking | undefined> {\r\n    if (quantity === 0) {\r\n      return this.removeProduct(booking, product);\r\n    }\r\n\r\n    const prod = booking.products.find((p) => p.id === product.id);\r\n    if (!prod) throw new Error('Product not found');\r\n\r\n    prod.quantity = quantity;\r\n\r\n    this.save();\r\n\r\n    return booking;\r\n  }\r\n\r\n  async changeAccessoryQuantity(\r\n    booking: Booking,\r\n    accessory: Product,\r\n    quantity: number\r\n  ): Promise<Booking> {\r\n    if (quantity === 0) {\r\n      return this.removeAccessory(booking, accessory);\r\n    }\r\n\r\n    booking.products.forEach((p) => {\r\n      const acc = p.accessories.find((a) => a.id === accessory.id);\r\n      if (!acc) throw new Error('Accessory not found');\r\n\r\n      acc.quantity = quantity;\r\n    });\r\n\r\n    this.save();\r\n\r\n    return booking;\r\n  }\r\n\r\n  getBookings() {\r\n    return [...this.bookings.filter((b) => !b.paid)];\r\n  }\r\n\r\n  getBookingById(bookingId: string | null) {\r\n    return this.bookings.find((b) => b.id == bookingId);\r\n  }\r\n\r\n  deleteBooking(booking: Booking): Array<Booking> {\r\n    this.bookings = this.bookings.filter((b) => b.id !== booking.id);\r\n    this.save();\r\n    this.bookings = this.bookings.filter((b) => b.paid === false);\r\n    this.bookingsChanged.next();\r\n    return this.bookings;\r\n  }\r\n\r\n  getCurrentBooking(): Booking | undefined {\r\n    return this.currentBooking;\r\n  }\r\n\r\n  setCurrentBooking(booking: Booking) {\r\n    this.currentBooking = booking;\r\n    this.bookingsChanged.next();\r\n  }\r\n\r\n  async productsAvailability(booking: Booking): Promise<Availability> {\r\n    const request: Array<any> = [];\r\n    if (!booking) {\r\n      return new Availability();\r\n    }\r\n\r\n    booking.products.map((product) => {\r\n      request.push({\r\n        id: product.id,\r\n        quantity: product.quantity,\r\n        location: booking.location,\r\n        period: {\r\n          start: booking.period.start,\r\n\r\n          /*moment(booking.period.fromDate)\r\n            .utc()\r\n            .endOf('day')\r\n            .format('YYYY-MM-DDTHH:mm:ss.000Z')*/ end:\r\n            booking.period.end,\r\n          /*moment(booking.period.toDate)\r\n            .utc()\r\n            .endOf('day')\r\n            .format('YYYY-MM-DDTHH:mm:ss.000Z')*/\r\n        },\r\n        accessories: product.accessories,\r\n      });\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient\r\n        .post<any>(`${this.apiBaseUrl}/availability`, request)\r\n        .subscribe(\r\n          (res) => {\r\n            // TODO: pick up availability state\r\n            booking.availability = res.data as Availability;\r\n            booking.checkedAvailabilityOn = new Date();\r\n            this.save();\r\n            resolve(res.data as Availability);\r\n          },\r\n          (err) => reject(err)\r\n        );\r\n    });\r\n  }\r\n\r\n  async availabilityGraph(\r\n    product: Product,\r\n    period: BookingPeriod,\r\n    location: BookingLocation\r\n  ): Promise<AvailabilityGraph> {\r\n    if (!product) throw new Error('Product required');\r\n    if (!period) throw new Error('Period required');\r\n    if (!location) throw new Error('Location required');\r\n\r\n    const request = {\r\n      id: product.id,\r\n      quantity: product.quantity,\r\n      location,\r\n      period,\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient\r\n        .post<any>(`${this.apiBaseUrl}/availability-graph`, request)\r\n        .subscribe(\r\n          (res) => {\r\n            resolve(res.data as AvailabilityGraph);\r\n          },\r\n          (err) => reject(err)\r\n        );\r\n    });\r\n  }\r\n\r\n  // https://stackoverflow.com/questions/52836247/how-to-generate-uuid-in-angular\r\n  private uniqueId(parts: number): string {\r\n    const stringArr = [];\r\n    for (let i = 0; i < parts; i++) {\r\n      // tslint:disable-next-line:no-bitwise\r\n      const S4 = (((1 + Math.random()) * 0x10000) | 0)\r\n        .toString(16)\r\n        .substring(1);\r\n      stringArr.push(S4);\r\n    }\r\n    return stringArr.join('-');\r\n  }\r\n\r\n  save() {\r\n    localStorage.setItem('BOOKINGS', JSON.stringify(this.bookings));\r\n  }\r\n\r\n  private load() {\r\n    this.bookings = [];\r\n\r\n    try {\r\n      const jsonBookings = JSON.parse(\r\n        localStorage.getItem('BOOKINGS') || '[]'\r\n      ) as Array<any>;\r\n\r\n      jsonBookings.forEach((jsonBooking) => {\r\n        const booking = Booking.fromJson(jsonBooking);\r\n        this.bookings.push(booking);\r\n      });\r\n    } catch (err) {\r\n      console.log('Failed to parse Bookings from Local Storage', err);\r\n    }\r\n  }\r\n\r\n  forceAvailabilityCheck() {\r\n    this.availabilityCheck.next(true);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "platformId",
                        "type": "Object"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CountryService",
            "id": "injectable-CountryService-a4c64e511f02a80a2303884b5246fdad",
            "file": "src/app/booking/services/countries.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllCountries",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Array<Country>>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getCitiesOfCountry",
                    "args": [
                        {
                            "name": "countryCode",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<City>>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "countryCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { City, Country } from '../models/countries.model';\r\nimport { HttpService } from '../../core/services/http.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CountryService {\r\n\r\n    constructor(private httpService: HttpService) { }\r\n\r\n    async getAllCountries(): Promise<Array<Country>> {\r\n        const response = await this.httpService.get(`${environment.apiBaseUrl}/country-state-city`);\r\n        if (!response.data) {\r\n            throw new Error('Countries not found');\r\n        }\r\n        return response.data.map((d: any) => {\r\n            const country = new Country();\r\n\r\n            country.isoCode = d.isoCode;\r\n            country.name = d.name;\r\n            country.phonecode = d.phonecode;\r\n            country.flag = d.flag;\r\n            country.currency = d.currency;\r\n            country.latitude = d.latitude;\r\n            country.longitude = d.longitude;\r\n            country.timezones = d.timezones;\r\n\r\n            return country;\r\n        });\r\n    }\r\n\r\n    async getCitiesOfCountry(countryCode: string): Promise<Array<City>> {\r\n        const response = await this.httpService.get(`${environment.apiBaseUrl}/country-state-city/${countryCode}/City`);\r\n        if (!response.data) {\r\n            throw new Error('Countries not found');\r\n        }\r\n        return response.data.map((d: any) => {\r\n            const city = new City();\r\n\r\n            city.name = d.name;\r\n            city.countryCode = d.countryCode;\r\n            city.stateCode = d.stateCode;\r\n            city.latitude = d.latitude;\r\n            city.longitude = d.longitude;\r\n\r\n            return city;\r\n        });\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-05244585370b8ce0fad85c50144e13ff",
            "file": "src/app/core/services/http.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeaders",
                    "args": [
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getText",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any"
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any"
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any"
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\n\r\n@Injectable()\r\nexport class HttpService {\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private ngAuth: NgAuthService,\r\n    // @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n\r\n  }\r\n\r\n  public post(url: string, body: any, apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.post(url, body, this.getHeaders(apiKey)).subscribe(\r\n        (response) => resolve(response),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  public put(url: string, body: any, apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.put(url, body, this.getHeaders(apiKey)).subscribe(\r\n        (response) => resolve(response),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  public patch(url: string, body: any, apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.patch(url, body, this.getHeaders(apiKey)).subscribe(\r\n        (response) => resolve(response),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  public get(url: string, apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.get(url, this.getHeaders(apiKey)).subscribe(\r\n        (response) => resolve(response),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  public delete(url: string, apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.delete(url, this.getHeaders(apiKey)).subscribe(\r\n        (response) => resolve(response),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  public getText(url: string, apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      const headers: any = this.getHeaders(apiKey);\r\n      headers.responseType = 'text';\r\n\r\n      this.httpClient.get(url, headers).subscribe(\r\n        (response) => resolve(response),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  public getHeaders(apiKey?: string): { headers: any } {\r\n    let headers = new HttpHeaders();\r\n\r\n    // headers = headers.append('X-Api-Key', apiKey || environment.apiKey);\r\n    // headers = headers.append('X-Api-User-Id', apiKey || environment.apiKey);\r\n    // if (isPlatformServer(this.platformId)) {\r\n    //   return { headers }\r\n    // } else {\r\n    if (this.ngAuth.getAuthToken()) {\r\n      //   headers = headers.append('X-User-Auth-Token', this.ngAuth.getAuthToken());\r\n      headers = headers.append('Authorization', 'Bearer ' + this.ngAuth.getAuthToken());\r\n    }\r\n    // }\r\n    return { headers };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocationService",
            "id": "injectable-LocationService-95ea3b8bc436fde419c536841814d31e",
            "file": "src/app/core/services/location.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Array<Location>>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getPopularCaribbeanPorts",
                    "args": [
                        {
                            "name": "locations",
                            "type": "Array<Location>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<Location>>",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "locations",
                            "type": "Array<Location>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPopularMediterraneanPorts",
                    "args": [
                        {
                            "name": "locations",
                            "type": "Array<Location>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<Location>>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "locations",
                            "type": "Array<Location>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Location } from '../models/location.model';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LocationService {\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  async getLocations(): Promise<Array<Location>> {\r\n    const response = await this.httpService.get(`${environment.apiBaseUrl}/locations`);\r\n    if (!response.data) {\r\n      throw new Error('Locations not found');\r\n    }\r\n    return response.data.map((d: any) => {\r\n      const location = new Location();\r\n      location.id = d.id;\r\n      location.cityArea = d.cityArea;\r\n      location.cruisingArea = d.cruisingArea;\r\n      location.name = d.name;\r\n      location.timezone = d.timezone;\r\n      return location;\r\n    });\r\n  }\r\n\r\n  async getPopularMediterraneanPorts(\r\n    locations: Array<Location>\r\n  ): Promise<Array<Location>> {\r\n    const popularLocationNames = [\r\n      'Cannes',\r\n      'Monaco',\r\n      'Naples',\r\n      'Porto Cervo',\r\n      'Athens',\r\n      'Split',\r\n    ];\r\n\r\n    return popularLocationNames.map((popularName: string, index: number) => {\r\n      const exists = locations.find(\r\n        (location: Location) => location.name === popularName\r\n      );\r\n\r\n      // Temp: return random location, should always be more than the 6 popular ones\r\n      if (!exists) {\r\n        return locations[index];\r\n      }\r\n\r\n      return exists;\r\n    });\r\n  }\r\n\r\n  async getPopularCaribbeanPorts(\r\n    locations: Array<Location>\r\n  ): Promise<Array<Location>> {\r\n    const popularLocationNames = [\r\n      'Saint Maarten',\r\n      'Antigua',\r\n      'BVI',\r\n      'USVI',\r\n      'Nassau',\r\n      'Fort Lauderdale',\r\n    ];\r\n\r\n    return popularLocationNames.map((popularName: string, index: number) => {\r\n      const exists = locations.find(\r\n        (location: Location) => location.name === popularName\r\n      );\r\n\r\n      // Temp: return random location, should always be more than the 6 popular ones\r\n      if (!exists) {\r\n        return locations[index];\r\n      }\r\n\r\n      return exists;\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetadataService",
            "id": "injectable-MetadataService-d048eb21094e8822728e0a1ceb55f4c2",
            "file": "src/app/core/services/metadata.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generateMetaDefinitions",
                    "args": [
                        {
                            "name": "metadata",
                            "type": "PageMetadata"
                        }
                    ],
                    "optional": false,
                    "returnType": "MetaDefinition[]",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "metadata",
                            "type": "PageMetadata",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMetadata",
                    "args": [
                        {
                            "name": "metadata",
                            "type": "Partial<PageMetadata>"
                        },
                        {
                            "name": "index",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "metadata",
                            "type": "Partial<PageMetadata>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface PageMetadata {\r\n  title: string;\r\n  // image will be added later\r\n  description: string;\r\n  author: string;\r\n  keywords: string[];\r\n  type: string;\r\n}\r\n\r\nconst defaultMetadata: PageMetadata = {\r\n  title: 'Ocean Premium',\r\n  description: 'Ocean Premium',\r\n  author: 'Ocean Premium',\r\n  keywords: ['Water Toys'],\r\n  type: 'website',\r\n};\r\n\r\n@Injectable()\r\nexport class MetadataService {\r\n  constructor(\r\n    private metaTagService: Meta,\r\n    private titleService: Title,\r\n    private router: Router\r\n  ) {}\r\n\r\n  public updateMetadata(\r\n    metadata: Partial<PageMetadata>,\r\n    index: boolean = true\r\n  ): void {\r\n    const pageMetadata: PageMetadata = { ...defaultMetadata, ...metadata };\r\n    const metatags: MetaDefinition[] = this.generateMetaDefinitions(\r\n      pageMetadata\r\n    );\r\n\r\n    this.metaTagService.addTags([\r\n      ...metatags,\r\n      { property: 'og:url', content: `https://oceanpremium.com${this.router.url}` },\r\n      { name: 'robots', content: index ? 'index, follow' : 'noindex' },\r\n      { name: 'viewport', content: 'width=device-width, initial-scale=1' },\r\n      { 'http-equiv': 'Content-Type', content: 'text/html; charset=utf-8' },\r\n    ]);\r\n\r\n    this.titleService.setTitle(pageMetadata.title);\r\n  }\r\n\r\n  private generateMetaDefinitions(metadata: PageMetadata): MetaDefinition[] {\r\n    return [\r\n      { name: 'title', content: metadata.title },\r\n      { property: 'og:title', content: metadata.title },\r\n\r\n      { name: 'description', content: metadata.description },\r\n      { property: 'og:description', content: metadata.description },\r\n\r\n      { name: 'author', content: metadata.author },\r\n      { property: 'og:author', content: metadata.author },\r\n\r\n      { name: 'keywords', content: metadata.keywords.join(', ') },\r\n\r\n      { property: 'og:type', content: metadata.type },\r\n    ];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "metaTagService",
                        "type": "Meta"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "metaTagService",
                        "type": "Meta",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PaymentService",
            "id": "injectable-PaymentService-924ca588a43ac58e0960e6afd951ef44",
            "file": "src/app/payment/services/payment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createOrder",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPaymentIntent",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { HttpService } from 'src/app/core/services/http.service';\r\nimport OrderRequest from '../models/order-request';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PaymentService {\r\n  constructor(private httpService: HttpService) { }\r\n\r\n  createPaymentIntent(booking: Booking) {\r\n    const order = new OrderRequest(booking);\r\n\r\n    return this.httpService.post(\r\n      `https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products/orders/create-payment-intent`,\r\n      order.toRequest()\r\n    );\r\n  }\r\n\r\n  createOrder(booking: Booking) {\r\n    const order = new OrderRequest(booking, \"BANK_TRANSFER\");\r\n\r\n    return this.httpService.post(\r\n      `https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products/orders`,\r\n      order.toRequest()\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-ef012d2fc0ba73957a34f2bd0a65ecb3",
            "file": "src/app/product/services/product.service.ts",
            "properties": [
                {
                    "name": "baseHref",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "APP_BASE_HREF"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductBySlug",
                    "args": [
                        {
                            "name": "productGroupSlug",
                            "type": "string"
                        },
                        {
                            "name": "productSlug",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "productGroupSlug",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productSlug",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecommendedProducts",
                    "args": [
                        {
                            "name": "productGroupIds",
                            "type": "Array<number>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<Product>>",
                    "typeParameters": [],
                    "line": 166,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "productGroupIds",
                            "type": "Array<number>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecommendedWaterToys",
                    "args": [
                        {
                            "name": "productGroupIds",
                            "type": "Array<number>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<Product>>",
                    "typeParameters": [],
                    "line": 278,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "productGroupIds",
                            "type": "Array<number>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecommendedWaterToysToRent",
                    "args": [
                        {
                            "name": "productGroupIds",
                            "type": "Array<number>"
                        },
                        {
                            "name": "search",
                            "type": "any",
                            "optional": true
                        },
                        {
                            "name": "deliveryLocationId",
                            "type": "any",
                            "optional": true
                        },
                        {
                            "name": "collectionLocationId",
                            "type": "any",
                            "optional": true
                        },
                        {
                            "name": "startsAt",
                            "type": "any",
                            "optional": true
                        },
                        {
                            "name": "endsAt",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<Product>>",
                    "typeParameters": [],
                    "line": 203,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "productGroupIds",
                            "type": "Array<number>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deliveryLocationId",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionLocationId",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startsAt",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endsAt",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { APP_BASE_HREF } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { FAQ } from 'src/app/core/models/faqs.model';\r\nimport { HttpService } from 'src/app/core/services/http.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Product } from '../models/product.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductService {\r\n  private baseUrl =\r\n    'https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products';\r\n\r\n  constructor(\r\n    @Inject(APP_BASE_HREF) public baseHref: string,\r\n    private httpService: HttpService\r\n  ) { }\r\n\r\n  async getProductById(\r\n    id: number | string\r\n  ): Promise<{ product: Product; accessories: Array<Product> }> {\r\n    try {\r\n      const response = await this.httpService.get(\r\n        `${this.baseUrl}/${id}`\r\n      );\r\n      const data = response.data;\r\n\r\n      const product = new Product();\r\n      product.id = data.id;\r\n      product.slug = data.seoFriendlyName || data.slug || data.name;\r\n      product.name = data.name;\r\n      product.tagline = data.tagline;\r\n      product.description = data.description;\r\n      product.imageThumbnail = data.imageThumbnail;\r\n      product.images = data.images;\r\n      product.attachments = data.attachments;\r\n      product.productGroup = data.productGroup;\r\n      product.isAvailable = true;\r\n      product.rates = data.rates;\r\n      product.type = data.type;\r\n      product.features = data.features;\r\n      product.seoFriendlyName = data.seoFriendlyName;\r\n      product.seoMetaDescription = data.seoMetaDescription;\r\n      product.productGroupSlug = data.productGroupSlug;\r\n      product.productSlug = data.productSlug;\r\n\r\n      product.faqs = [];\r\n      if (data.faqs) {\r\n        const paragraphs = 11;\r\n        for (let k = 1; k < paragraphs; k++) {\r\n          if (data.faqs[`paragraph${k}`]) {\r\n            product.faqs.push({\r\n              id: k + '',\r\n              question: data.faqs[`paragraph${k}`].head,\r\n              content: data.faqs[`paragraph${k}`].paragraph,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      const rate = data.rates.find((r: any) => r.chargePeriod === 'Daily');\r\n      if (!rate) {\r\n        product.price = 0;\r\n      } else {\r\n        product.price = Number(rate.price);\r\n      }\r\n\r\n      const accessories = data.accessories.map((a: any) => {\r\n        const rate = a.rates.find((r: any) => r.chargePeriod === 'Daily');\r\n        let price = 0;\r\n        if (rate) {\r\n          price = Number(rate.price);\r\n        }\r\n\r\n        if (a.images && a.images.length > 0) {\r\n          a.imageThumbnail = a.images[0];\r\n        }\r\n\r\n        return {\r\n          ...a,\r\n          price,\r\n        } as Product;\r\n      });\r\n\r\n      return { product, accessories };\r\n    } catch (err) {\r\n      console.log(err);\r\n      throw new Error('Failed to get product');\r\n    }\r\n  }\r\n\r\n  async getProductBySlug(\r\n    productGroupSlug: string,\r\n    productSlug: string\r\n  ): Promise<{ product: Product; accessories: Array<Product> }> {\r\n    try {\r\n      const data = await this.httpService.get(\r\n        `${environment.apiBaseUrl}/products/${productGroupSlug}/${productSlug}`\r\n      );\r\n\r\n      const product = new Product();\r\n      product.id = data.id;\r\n      product.slug = data.seoFriendlyName || data.slug || data.name;\r\n      product.name = data.name;\r\n      product.tagline = data.tagline;\r\n      product.description = data.description;\r\n      product.imageThumbnail = data.imageThumbnail;\r\n      product.images = data.images;\r\n      product.attachments = data.attachments;\r\n      product.productGroup = data.productGroup;\r\n      product.isAvailable = true;\r\n      product.rates = data.rates;\r\n      product.type = data.type;\r\n      product.features = data.features;\r\n      product.seoFriendlyName = data.seoFriendlyName;\r\n      product.seoMetaDescription = data.seoMetaDescription;\r\n      product.productGroupSlug = data.productGroupSlug;\r\n      product.productSlug = data.productSlug;\r\n\r\n      product.faqs = [];\r\n      if (data.faqs) {\r\n        const paragraphs = 11;\r\n        for (let k = 1; k < paragraphs; k++) {\r\n          if (data.faqs[`paragraph${k}`]) {\r\n            product.faqs.push({\r\n              id: k + '',\r\n              question: data.faqs[`paragraph${k}`].head,\r\n              content: data.faqs[`paragraph${k}`].paragraph,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      const rate = data.rates.find((r: any) => r.chargePeriod === 'Daily');\r\n      if (!rate) {\r\n        product.price = 0;\r\n      } else {\r\n        product.price = Number(rate.price);\r\n      }\r\n\r\n      const accessories = data.accessories.map((a: any) => {\r\n        const rate = a.rates.find((r: any) => r.chargePeriod === 'Daily');\r\n        let price = 0;\r\n        if (rate) {\r\n          price = Number(rate.price);\r\n        }\r\n\r\n        if (a.images && a.images.length > 0) {\r\n          a.imageThumbnail = a.images[0];\r\n        }\r\n\r\n        return {\r\n          ...a,\r\n          price,\r\n        } as Product;\r\n      });\r\n\r\n      return { product, accessories };\r\n    } catch (err) {\r\n      console.log(err);\r\n      throw new Error('Failed to get product');\r\n    }\r\n  }\r\n\r\n  async getRecommendedProducts(\r\n    productGroupIds: Array<number>\r\n  ): Promise<Array<Product>> {\r\n    if (productGroupIds.length === 0)\r\n      throw new Error('Product group IDs required');\r\n\r\n    const response = await this.httpService.get(\r\n      `${this.baseUrl\r\n      }/groups?q[recommended_by_product_group_ids_in]=${productGroupIds.join(\r\n        ','\r\n      )}`\r\n    );\r\n    if (!response.data) {\r\n      throw new Error('No recommended products');\r\n    }\r\n\r\n    return response.data.map((p: any) => {\r\n      const product = new Product();\r\n      product.id = p.id;\r\n      product.slug = p.slug;\r\n      product.name = p.name;\r\n      product.summary =\r\n        'The most fun you can have on the Water! \\nUp to 65 km/h of thrilling wave hopping!';\r\n      product.overview =\r\n        'This watercraft is one of the easiest ways to get into the musclecraft scene. It comes with a powerful supercharged 230-hp Rotax engine and it is now equipped with the exclusive LinQ Quick-Attach System for cargo and the Bluetooth Audio System.';\r\n      product.description = p.description;\r\n      product.tagline = p.tagline;\r\n      product.imageThumbnail = p.imageThumbnail;\r\n      product.images = p.images;\r\n      product.attachments = p.attachments;\r\n      product.productGroup = p.productGroup;\r\n      product.price = 400;\r\n      product.isAvailable = true;\r\n      return product;\r\n    });\r\n  }\r\n\r\n  async getRecommendedWaterToysToRent(\r\n    productGroupIds: Array<number>,\r\n    search?: any,\r\n    deliveryLocationId?: any,\r\n    collectionLocationId?: any,\r\n    startsAt?: any,\r\n    endsAt?: any,\r\n  ): Promise<Array<Product>> {\r\n\r\n    let queryParams = '';\r\n\r\n    if (search) {\r\n      queryParams = `${queryParams}search=${search}`;\r\n    }\r\n\r\n    if (deliveryLocationId) {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&delivery_location_id=${deliveryLocationId}`;\r\n      } else {\r\n        queryParams = `${queryParams}delivery_location_id=${deliveryLocationId}`;\r\n      }\r\n    }\r\n\r\n    if (collectionLocationId) {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&collection_location_id=${collectionLocationId}`;\r\n      } else {\r\n        queryParams = `${queryParams}collection_location_id=${collectionLocationId}`;\r\n      }\r\n    }\r\n\r\n    if (startsAt) {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&starts_at=${startsAt}`;\r\n      } else {\r\n        queryParams = `${queryParams}starts_at=${startsAt}`;\r\n      }\r\n    }\r\n\r\n    if (endsAt) {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&ends_at=${endsAt}`;\r\n      } else {\r\n        queryParams = `${queryParams}ends_at=${endsAt}`;\r\n      }\r\n    }\r\n\r\n    if (productGroupIds.length === 0) {\r\n      throw new Error('Product group IDs required');\r\n    } else {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&product_group_ids=${productGroupIds}`;\r\n      } else {\r\n        queryParams = `${queryParams}product_group_ids=${productGroupIds}`;\r\n      }\r\n    }\r\n\r\n    const response = await this.httpService.get(\r\n      `${environment.apiBaseUrl}/products?${queryParams}`\r\n    );\r\n\r\n    if (!response.data) {\r\n      throw new Error('Water Toys not found');\r\n    } else {\r\n      response.data.forEach((product: any) => {\r\n        const rate = product.rates.find((r: any) => r.storeId === 1);\r\n        if (rate) {\r\n          product.price = Number(rate.price);\r\n        }\r\n      });\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async getRecommendedWaterToys(\r\n    productGroupIds: Array<number>,\r\n  ): Promise<Array<Product>> {\r\n\r\n    let queryParams = '';\r\n\r\n    if (productGroupIds.length === 0) {\r\n      throw new Error('Product group IDs required');\r\n    } else {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&product_group_ids=${productGroupIds}`;\r\n      } else {\r\n        queryParams = `${queryParams}product_group_ids=${productGroupIds}`;\r\n      }\r\n    }\r\n\r\n    const response = await this.httpService.get(\r\n      `${environment.apiBaseUrl}/products/recommended?${queryParams}`\r\n    );\r\n\r\n    if (!response.data) {\r\n      throw new Error('Water Toys not found');\r\n    } else {\r\n      response.data.forEach((product: any) => {\r\n        const rate = product.rental_rate;\r\n        if (rate) {\r\n          product.price = Number(rate.price);\r\n        }\r\n      });\r\n    }\r\n    return response.data;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "baseHref",
                        "type": "string"
                    },
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "baseHref",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TransportCostService",
            "id": "injectable-TransportCostService-a0777fff03bcddb80bf78667727de16f",
            "file": "src/app/core/services/transport-cost.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTransportCosts",
                    "args": [
                        {
                            "name": "warehouseTypeId",
                            "type": "any",
                            "optional": true
                        },
                        {
                            "name": "warehouseId",
                            "type": "any",
                            "optional": true
                        },
                        {
                            "name": "locationId",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<any>>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "warehouseTypeId",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "warehouseId",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locationId",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "putTransportCosts",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<any>>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Location } from '../models/location.model';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TransportCostService {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  async getTransportCosts(\r\n    warehouseTypeId?: any,\r\n    warehouseId?: any,\r\n    locationId?: any\r\n  ): Promise<Array<any>> {\r\n    let queryParams = '';\r\n\r\n    if (warehouseTypeId) {\r\n      queryParams = `${queryParams}warehouse_type_id=${warehouseTypeId}`;\r\n    }\r\n\r\n    if (warehouseId) {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&warehouse_id=${warehouseId}`;\r\n      } else {\r\n        queryParams = `${queryParams}warehouse_id=${warehouseId}`;\r\n      }\r\n    }\r\n\r\n    if (locationId) {\r\n      if (queryParams) {\r\n        queryParams = `${queryParams}&location_id=${locationId}`;\r\n      } else {\r\n        queryParams = `${queryParams}location_id=${locationId}`;\r\n      }\r\n    }\r\n\r\n    const response = await this.httpService.get(\r\n      `${environment.apiBaseUrl}/transport-costs?${queryParams}`\r\n    );\r\n    if (!response.data) {\r\n      throw new Error('Warehouses not found');\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n  async putTransportCosts(row?: any): Promise<Array<any>> {\r\n    const response = await this.httpService.put(\r\n      `${environment.apiBaseUrl}/transport-costs`,\r\n      row\r\n    );\r\n    if (!response.data) {\r\n      throw new Error('Warehouses not found');\r\n    }\r\n    return response.data;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-26543eb50672682e35d0574dbb189483",
            "file": "src/app/core/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Array<User>>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "putUsers",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<any>>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { User } from 'src/app/booking/models/user';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class UserService {\r\n    constructor(private httpService: HttpService) { }\r\n\r\n    async getUsers(): Promise<Array<User>> {\r\n        const response = await this.httpService.get(`${environment.apiBaseUrl}/users`);\r\n        if (!response.data) {\r\n            throw new Error('Users not found');\r\n        }\r\n        return response.data.map((d: any) => {\r\n            const user = new User();\r\n            user.id = d.id;\r\n            user.email = d.email;\r\n            user.firstName = d.firstName;\r\n            user.lastName = d.lastName;\r\n            user.role = d.role;\r\n            return user;\r\n        });\r\n    }\r\n\r\n    async putUsers(row?: any): Promise<Array<any>> {\r\n        const response = await this.httpService.put(\r\n            `${environment.apiBaseUrl}/users/me`,\r\n            row\r\n        );\r\n        if (!response.data) {\r\n            throw new Error('User not found');\r\n        }\r\n        return response.data;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WarehouseService",
            "id": "injectable-WarehouseService-34dbeed21eb9ff8a68376c982cea9bb2",
            "file": "src/app/core/services/warehouse.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getWarehouses",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Array<any>>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getWarehouseTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Array<any>>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Location } from '../models/location.model';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WarehouseService {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  async getWarehouses(): Promise<Array<any>> {\r\n    const response = await this.httpService.get(\r\n      `${environment.apiBaseUrl}/warehouses`\r\n    );\r\n    if (!response.data) {\r\n      throw new Error('Warehouses not found');\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n  async getWarehouseTypes(): Promise<Array<any>> {\r\n    const response = await this.httpService.get(\r\n      `${environment.apiBaseUrl}/warehouse-types`\r\n    );\r\n    if (!response.data) {\r\n      throw new Error('Warehouse Types not found');\r\n    }\r\n    return response.data;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-e3ea1f4631d62652a5623d3ab757b2fc",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  async navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl);\r\n  }\r\n\r\n  async getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Attachment",
            "id": "class-Attachment-86322052cb92261ab01ef1cdf0291f1c",
            "file": "src/app/core/models/attachment.model.ts",
            "type": "class",
            "sourceCode": "export class Attachment {\r\n  fileSize?: string;\r\n  fileUrl?: string;\r\n  mimeType?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "fileSize",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "fileUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "mimeType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Availability",
            "id": "class-Availability-3b5e87cb82db3bd8dc671f5d290bd821",
            "file": "src/app/booking/models/availability.model.ts",
            "type": "class",
            "sourceCode": "import { Product } from 'src/app/product/models/product.model';\r\n\r\nexport class Availability {\r\n  totalPrice: string = '0.00';\r\n  totalShippingCosts: string = '0.00';\r\n  totalRelocationFees: string = '0.00';\r\n  totalHandlingCosts: string = '0.00';\r\n  totalDeliveryOnBoard: string = '0.00';\r\n  totalTransportCosts: string = '0.00';\r\n  grandTotalPrice: string = '0.00';\r\n  vat: string = '0.00';\r\n  grandTotalPriceWithVat: string = '0.00';\r\n  products: Array<Product> = [];\r\n}\r\n",
            "properties": [
                {
                    "name": "grandTotalPrice",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "grandTotalPriceWithVat",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalDeliveryOnBoard",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "totalHandlingCosts",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalPrice",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalRelocationFees",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "totalShippingCosts",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalTransportCosts",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "vat",
                    "defaultValue": "'0.00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AvailabilityGraph",
            "id": "class-AvailabilityGraph-57f3fe3c304b786dc2e071dceefbb0ba",
            "file": "src/app/booking/models/availability-graph.model.ts",
            "type": "class",
            "sourceCode": "export class AvailabilityGraph {\r\n  id?: number;\r\n  name?: string;\r\n  availabilityGraph: Array<DateAvailable> = [];\r\n}\r\n\r\nexport class DateAvailable {\r\n  date?: string;\r\n  available?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "availabilityGraph",
                    "defaultValue": "[]",
                    "type": "Array<DateAvailable>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AvailabilityState",
            "id": "class-AvailabilityState-7543dedefc0630cbcf213a22a8c44963",
            "file": "src/app/core/models/availability-state.ts",
            "type": "class",
            "sourceCode": "export class AvailabilityState {\r\n  state:\r\n    | 'AVAILABLE'\r\n    | 'AVAILABLE_BUT_DELAYED'\r\n    | 'NOT_AVAILABLE'\r\n    | 'COULD_NOT_DETERMINE' = 'COULD_NOT_DETERMINE';\r\n  notes: string = '';\r\n}\r\n",
            "properties": [
                {
                    "name": "notes",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "state",
                    "defaultValue": "'COULD_NOT_DETERMINE'",
                    "type": "\"AVAILABLE\" | \"AVAILABLE_BUT_DELAYED\" | \"NOT_AVAILABLE\" | \"COULD_NOT_DETERMINE\"",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Booking",
            "id": "class-Booking-7a2d260a3fdf99bc6963a3754b700bf7",
            "file": "src/app/booking/models/booking.model.ts",
            "type": "class",
            "sourceCode": "import { NgbDate } from '@ng-bootstrap/ng-bootstrap';\r\nimport * as moment from 'moment';\r\nimport { Location } from 'src/app/core/models/location.model';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { Availability } from './availability.model';\r\nimport { BookingLocation } from './booking-location.model';\r\nimport { BookingPeriod } from './booking-period.model';\r\nimport { City, Country } from './countries.model';\r\n\r\nexport class Booking {\r\n  id?: string;\r\n  period: BookingPeriod = new BookingPeriod();\r\n  location: BookingLocation = new BookingLocation();\r\n  products: Array<Product> = [];\r\n  availability: Availability = new Availability();\r\n  checkingAvailability: boolean = false;\r\n  checkedAvailabilityOn: Date | undefined;\r\n\r\n  // Contact information\r\n  name?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  role?: string;\r\n\r\n  // Yacht Information\r\n  yachtName?: string;\r\n  yachtContactName?: string;\r\n  yachtRole?: string;\r\n  yachtEmail?: string;\r\n  yachtPhone?: string;\r\n\r\n  // Pick-Up Details\r\n  pickUpCountry?: Country;\r\n  // pickUpCity?: City;\r\n  pickUpCity?: string;\r\n  pickUpZipCode?: string;\r\n  pickUpAddress?: string;\r\n\r\n  // Drop-Off Details\r\n  dropOffCountry?: Country;\r\n  // dropOffCity?: City;\r\n  dropOffCity?: string;\r\n  dropOffZipCode?: string;\r\n  dropOffAddress?: string;\r\n\r\n  // Billing Details\r\n  isCompany: boolean = false;\r\n  companyName?: string;\r\n  vatNumber?: string;\r\n  billingName?: string;\r\n  billingCountry?: Country;\r\n  // billingCity?: City;\r\n  billingCity?: string;\r\n  billingZipCode?: string;\r\n  billingAddress?: string;\r\n  billingType?: BillingType;\r\n\r\n  orderId?: string;\r\n  paid: boolean = false;\r\n\r\n  securityDepositConsent: boolean = false;\r\n  termsAndConditionsConsent: boolean = false;\r\n\r\n  isActive: boolean = false;\r\n\r\n  static fromJson(jsonBooking: any): Booking {\r\n    let booking = new Booking();\r\n\r\n    booking = { ...jsonBooking };\r\n\r\n    booking.id = jsonBooking.id;\r\n\r\n    booking.period = new BookingPeriod();\r\n    // booking.period.end = jsonBooking.period.end;\r\n    // booking.period.start = jsonBooking.period.start;\r\n\r\n    // booking.period.start = moment(jsonBooking.period.start)\r\n    //   .endOf('day')\r\n    //   .utc()\r\n    //   .format('YYYY-MM-DDTHH:mm:ss.000Z');\r\n    // booking.period.end = moment(jsonBooking.period.end)\r\n    //   .endOf('day')\r\n    //   .utc()\r\n    //   .format('YYYY-MM-DDTHH:mm:ss.000Z');\r\n\r\n    if (!jsonBooking.period._fromDate) {\r\n      const parts = (jsonBooking.period.start as string).split('-');\r\n      const year = Number(parts[0]); //moment(jsonBooking.period.start, 'YYYY-MM-DDTHH:mm:ss.000Z').year();\r\n      const month = Number(parts[1]); //moment(jsonBooking.period.start, 'YYYY-MM-DDTHH:mm:ss.000Z').month();\r\n      const day = Number(parts[2].split(\"T\")[0]); // moment(jsonBooking.period.start, 'YYYY-MM-DDTHH:mm:ss.000Z').day();\r\n      booking.period.fromDate = new NgbDate(year, month, day);\r\n    } else {\r\n      // We store the NgbDate as a private variable on _fromDate and _toDate\r\n      // so that the api can use the formatted fromDate and toDate\r\n      booking.period.fromDate = jsonBooking.period._fromDate;\r\n    }\r\n\r\n    if (!jsonBooking.period._toDate) {\r\n      const parts = (jsonBooking.period.end as string).split('-');\r\n      const year = Number(parts[0]); // moment(jsonBooking.period.end, 'YYYY-MM-DDTHH:mm:ss.000Z').year();\r\n      const month = Number(parts[1]); // moment(jsonBooking.period.end, 'YYYY-MM-DDTHH:mm:ss.000Z').month();\r\n      const day = Number(parts[2].split(\"T\")[0]); // moment(jsonBooking.period.end, 'YYYY-MM-DDTHH:mm:ss.000Z').day();\r\n      booking.period.toDate = new NgbDate(year, month, day);\r\n    } else {\r\n      // We store the NgbDate as a private variable on _fromDate and _toDate\r\n      // so that the api can use the formatted fromDate and toDate\r\n      booking.period.toDate = jsonBooking.period._toDate;\r\n    }\r\n\r\n    booking.location = new BookingLocation();\r\n    booking.location.collection = new Location();\r\n    booking.location.collection = jsonBooking.location.collection;\r\n\r\n    booking.location.delivery = new Location();\r\n    booking.location.delivery = jsonBooking.location.delivery;\r\n\r\n    booking.products = jsonBooking.products as Array<Product>;\r\n    booking.yachtName = jsonBooking.yachtName;\r\n\r\n    return booking;\r\n  }\r\n}\r\n\r\nexport enum BillingType {\r\n  creditCard = 'credit-card',\r\n  wireTransfer = 'wire-transfer',\r\n}\r\n",
            "properties": [
                {
                    "name": "availability",
                    "defaultValue": "new Availability()",
                    "type": "Availability",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "billingAddress",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "billingCity",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "billingCountry",
                    "type": "Country",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "billingName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "billingType",
                    "type": "BillingType",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "billingZipCode",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "checkedAvailabilityOn",
                    "type": "Date | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "checkingAvailability",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "companyName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "dropOffAddress",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "dropOffCity",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "dropOffCountry",
                    "type": "Country",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dropOffZipCode",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "isCompany",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "location",
                    "defaultValue": "new BookingLocation()",
                    "type": "BookingLocation",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "orderId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "paid",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "period",
                    "defaultValue": "new BookingPeriod()",
                    "type": "BookingPeriod",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pickUpAddress",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "pickUpCity",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "pickUpCountry",
                    "type": "Country",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "pickUpZipCode",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "securityDepositConsent",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "termsAndConditionsConsent",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "vatNumber",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "yachtContactName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "yachtEmail",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "yachtName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "yachtPhone",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "yachtRole",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "jsonBooking",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Booking",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonBooking",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BookingLocation",
            "id": "class-BookingLocation-7ae4d25c313c76501b894bcfdc5b2963",
            "file": "src/app/booking/models/booking-location.model.ts",
            "type": "class",
            "sourceCode": "import { Location } from 'src/app/core/models/location.model';\r\n\r\nexport class BookingLocation {\r\n  collection?: Location;\r\n  delivery?: Location;\r\n}\r\n",
            "properties": [
                {
                    "name": "collection",
                    "type": "Location",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "delivery",
                    "type": "Location",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BookingPeriod",
            "id": "class-BookingPeriod-e9b7fc35512576a0f97c44b5974f934f",
            "file": "src/app/booking/models/booking-period.model.ts",
            "type": "class",
            "sourceCode": "import { NgbDate } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nexport class BookingPeriod {\r\n  start?: string;\r\n  end?: string;\r\n\r\n  private _fromDate?: NgbDate;\r\n  private _toDate?: NgbDate;\r\n\r\n  set fromDate(fromDate: NgbDate) {\r\n    this._fromDate = fromDate;\r\n\r\n    let month = `${this._fromDate.month}`;\r\n    if (this._fromDate.month < 10) {\r\n      month = `0${month}`;\r\n    }\r\n\r\n    let day = `${this._fromDate!.day}`;\r\n    if (this._fromDate!.day < 10) {\r\n      day = `0${day}`;\r\n    }\r\n\r\n    this.start = `${this._fromDate!.year}-${month}-${day}T12:00:00.000Z`;\r\n  }\r\n\r\n  get fromDate(): NgbDate {\r\n    return this._fromDate!;\r\n  }\r\n\r\n  set toDate(toDate: NgbDate) {\r\n    this._toDate = toDate;\r\n\r\n    let month = `${this._toDate.month}`;\r\n    if (this._toDate.month < 10) {\r\n      month = `0${month}`;\r\n    }\r\n\r\n    let day = `${this._toDate!.day}`;\r\n    if (this._toDate!.day < 10) {\r\n      day = `0${day}`;\r\n    }\r\n\r\n    this.end = `${this._toDate!.year}-${month}-${day}T12:00:00.000Z`;\r\n  }\r\n\r\n  get toDate(): NgbDate {\r\n    return this._toDate!;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "_fromDate",
                    "type": "NgbDate",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_toDate",
                    "type": "NgbDate",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "end",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "start",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "fromDate": {
                    "name": "fromDate",
                    "setSignature": {
                        "name": "fromDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "fromDate",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 10,
                        "jsdoctags": [
                            {
                                "name": "fromDate",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fromDate",
                        "type": "",
                        "returnType": "NgbDate",
                        "line": 26
                    }
                },
                "toDate": {
                    "name": "toDate",
                    "setSignature": {
                        "name": "toDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "toDate",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "toDate",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "toDate",
                        "type": "",
                        "returnType": "NgbDate",
                        "line": 46
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "City",
            "id": "class-City-12637c25ca9319bb5c85cb251ea65a98",
            "file": "src/app/booking/models/countries.model.ts",
            "type": "class",
            "sourceCode": "export class City {\r\n    name: string = \"\";\r\n    countryCode: string = \"\";\r\n    stateCode: string = \"\";\r\n    latitude?: string = \"\";\r\n    longitude?: string = \"\";\r\n}\r\n\r\ninterface Timezone {\r\n    zoneName: string;\r\n    gmtOffset: string;\r\n    gmtOffsetName: string;\r\n    abbreviation: string;\r\n    tzName: string;\r\n}\r\n\r\nexport class Country {\r\n    isoCode: string = \"\";\r\n    name: string = \"\";\r\n    phonecode: number = 0;\r\n    flag: string = \"\";\r\n    currency: string = \"\";\r\n    latitude: number = 0;\r\n    longitude: number = 0;\r\n    timezones?: Timezone[] = [];\r\n}\r\n",
            "properties": [
                {
                    "name": "countryCode",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "latitude",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "longitude",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "stateCode",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Country",
            "id": "class-Country-12637c25ca9319bb5c85cb251ea65a98",
            "file": "src/app/booking/models/countries.model.ts",
            "type": "class",
            "sourceCode": "export class City {\r\n    name: string = \"\";\r\n    countryCode: string = \"\";\r\n    stateCode: string = \"\";\r\n    latitude?: string = \"\";\r\n    longitude?: string = \"\";\r\n}\r\n\r\ninterface Timezone {\r\n    zoneName: string;\r\n    gmtOffset: string;\r\n    gmtOffsetName: string;\r\n    abbreviation: string;\r\n    tzName: string;\r\n}\r\n\r\nexport class Country {\r\n    isoCode: string = \"\";\r\n    name: string = \"\";\r\n    phonecode: number = 0;\r\n    flag: string = \"\";\r\n    currency: string = \"\";\r\n    latitude: number = 0;\r\n    longitude: number = 0;\r\n    timezones?: Timezone[] = [];\r\n}\r\n",
            "properties": [
                {
                    "name": "currency",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "flag",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isoCode",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "latitude",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "longitude",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "phonecode",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "timezones",
                    "defaultValue": "[]",
                    "type": "Timezone[]",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Database",
            "id": "class-Database-7198660f5a31e26d37cb1725ca53610a",
            "file": "api/database/index.ts",
            "type": "class",
            "sourceCode": "import config from 'api/config';\r\nimport { Sequelize } from 'sequelize';\r\nimport * as mysql2 from 'mysql2';\r\nimport { Location } from './location';\r\nimport { LocationWarehouse } from './location-warehouse';\r\nimport { WarehouseType } from './warehouse-type';\r\nimport { Warehouse } from './warehouse';\r\nimport { User } from './user';\r\n\r\nexport class Database {\r\n  public static initialize() {\r\n    this._instance = new this();\r\n  }\r\n  public static instance(): Database {\r\n    if (!this._instance) {\r\n      throw new Error('Please initialize the Database class first');\r\n    }\r\n    return this._instance;\r\n  }\r\n  private static _instance: Database;\r\n\r\n  private sequelize?: Sequelize;\r\n\r\n  private constructor() {\r\n    this.connect();\r\n\r\n    Location.initialize(this.sequelize!);\r\n    LocationWarehouse.initialize(this.sequelize!);\r\n    WarehouseType.initialize(this.sequelize!);\r\n    Warehouse.initialize(this.sequelize!);\r\n    User.initialize(this.sequelize!);\r\n  }\r\n\r\n  private connect() {\r\n    this.sequelize = new Sequelize(config.databaseUrl, {\r\n      logging: false,\r\n      dialect: 'mysql',\r\n      dialectModule: mysql2,\r\n    });\r\n\r\n    this.sequelize\r\n      .authenticate()\r\n      .then(() => {\r\n        console.log('Connected to ' + config.databaseUrl);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        console.log('Failed to connect to ' + config.databaseUrl);\r\n        process.exit(1);\r\n      });\r\n  }\r\n}\r\n\r\nexport * from './location';\r\nexport * from './location-warehouse';\r\nexport * from './warehouse-type';\r\nexport * from './warehouse';\r\nexport * from './user';\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22,
                "modifierKind": [
                    112
                ]
            },
            "properties": [
                {
                    "name": "_instance",
                    "type": "Database",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112,
                        115
                    ]
                },
                {
                    "name": "sequelize",
                    "type": "Sequelize",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "instance",
                    "args": [],
                    "optional": false,
                    "returnType": "Database",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateAvailable",
            "id": "class-DateAvailable-57f3fe3c304b786dc2e071dceefbb0ba",
            "file": "src/app/booking/models/availability-graph.model.ts",
            "type": "class",
            "sourceCode": "export class AvailabilityGraph {\r\n  id?: number;\r\n  name?: string;\r\n  availabilityGraph: Array<DateAvailable> = [];\r\n}\r\n\r\nexport class DateAvailable {\r\n  date?: string;\r\n  available?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "available",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FAQ",
            "id": "class-FAQ-812593481e0be779c81c504fab2fc47d",
            "file": "src/app/core/models/faqs.model.ts",
            "type": "class",
            "sourceCode": "export class FAQ{\r\n    id?: string;\r\n    question?: string;\r\n    content?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "question",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Highlight",
            "id": "class-Highlight-eadea8f839370bbfcdf82f4dc4da63cc",
            "file": "src/app/product/models/highlight.model.ts",
            "type": "class",
            "sourceCode": "export class Highlight {\r\n    \r\n}",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Image",
            "id": "class-Image-17251f8f99617debec8989b6ae253879",
            "file": "src/app/core/models/image.model.ts",
            "type": "class",
            "sourceCode": "export class Image {\r\n  url?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Location",
            "id": "class-Location-3e3dfd22dded7d132ce311eb9d895d0a",
            "file": "api/database/location.ts",
            "type": "class",
            "sourceCode": "import { Sequelize, Model, DataTypes } from 'sequelize';\r\n\r\nexport class Location extends Model {\r\n  public id?: number;\r\n  public cityArea?: string;\r\n  public cruisingArea?: string;\r\n  public name?: string;\r\n  public timezone?: string;\r\n  public timezoneString?: string;\r\n\r\n  public static initialize(sequelize: Sequelize) {\r\n    Location.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.INTEGER,\r\n          primaryKey: true,\r\n          allowNull: false,\r\n          autoIncrement: true,\r\n        },\r\n        cityArea: { type: DataTypes.STRING, field: 'city_area' },\r\n        cruisingArea: { type: DataTypes.STRING, field: 'cruising_area' },\r\n        name: { type: DataTypes.STRING },\r\n        timezone: { type: DataTypes.STRING },\r\n        timezoneString: { type: DataTypes.STRING, field: 'timezone_string' },\r\n      },\r\n      {\r\n        sequelize,\r\n        tableName: 'location',\r\n        timestamps: false,\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cityArea",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cruisingArea",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timezone",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timezoneString",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Location",
            "id": "class-Location-be23fa38ac209e6df29ea6dfedcf5ee0-1",
            "file": "src/app/core/models/location.model.ts",
            "type": "class",
            "sourceCode": "export class Location {\r\n  id?: number;\r\n  cityArea?: string;\r\n  cruisingArea?: string;\r\n  name!: string;\r\n  timezone?: string;\r\n}",
            "properties": [
                {
                    "name": "cityArea",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "cruisingArea",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "timezone",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Location-1"
        },
        {
            "name": "LocationWarehouse",
            "id": "class-LocationWarehouse-177652371fd8a7abe19e3d66acb6fa96",
            "file": "api/database/location-warehouse.ts",
            "type": "class",
            "sourceCode": "import { Sequelize, Model, DataTypes } from 'sequelize';\r\n\r\nexport class LocationWarehouse extends Model {\r\n  public delayInHours?: number;\r\n  public deliveryOnBoard?: number;\r\n  public handlingCosts?: number;\r\n  public relocationFees?: number;\r\n  public shippingCosts?: number;\r\n  public warehouseId?: number;\r\n  public locationId?: number;\r\n  public warehouseTypeId?: number;\r\n\r\n  public static initialize(sequelize: Sequelize) {\r\n    LocationWarehouse.init(\r\n      {\r\n        delayInHours: { type: DataTypes.DECIMAL, field: 'delay_in_hours' },\r\n        deliveryOnBoard: {\r\n          type: DataTypes.DECIMAL,\r\n          field: 'delivery_on_board',\r\n        },\r\n        handlingCosts: { type: DataTypes.DECIMAL, field: 'handling_costs' },\r\n        relocationFees: { type: DataTypes.DECIMAL, field: 'relocation_fees' },\r\n        shippingCosts: { type: DataTypes.DECIMAL, field: 'shipping_costs' },\r\n        warehouseId: {\r\n          type: DataTypes.INTEGER,\r\n          field: 'warehouse_id',\r\n          primaryKey: true,\r\n        },\r\n        locationId: {\r\n          type: DataTypes.INTEGER,\r\n          field: 'location_id',\r\n          primaryKey: true,\r\n        },\r\n        warehouseTypeId: {\r\n          type: DataTypes.INTEGER,\r\n          field: 'warehouse_type_id',\r\n          primaryKey: true,\r\n        },\r\n      },\r\n      {\r\n        sequelize,\r\n        tableName: 'location_warehouse',\r\n        timestamps: false,\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "delayInHours",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deliveryOnBoard",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handlingCosts",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "locationId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "relocationFees",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "shippingCosts",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "warehouseId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "warehouseTypeId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "OrderRequest",
            "id": "class-OrderRequest-0c5ea01296232dd4ef0e902c3cd8c77f",
            "file": "src/app/payment/models/order-request.ts",
            "type": "class",
            "sourceCode": "import { Booking } from 'src/app/booking/models/booking.model';\r\n\r\nexport default class OrderRequest {\r\n  booking: Booking;\r\n  paymentMethod: string = 'CARD';\r\n\r\n  constructor(booking: Booking, paymentMethod: any = 'CARD') {\r\n    this.booking = booking;\r\n    this.paymentMethod = paymentMethod;\r\n  }\r\n\r\n  toRequest() {\r\n    const products = this.booking.products.map((product) => {\r\n      return {\r\n        id: product.id,\r\n        accessories: product.accessories,\r\n        quantity: product.quantity,\r\n        location: this.booking.location,\r\n        period: this.booking.period,\r\n      };\r\n    });\r\n\r\n    const nameParts = this.booking.name!.split(' ');\r\n\r\n    const obj = {\r\n      paymentMethod: this.paymentMethod,\r\n      products: products,\r\n      yachtName: this.booking.yachtName,\r\n      securityDepositConsent: this.booking.securityDepositConsent,\r\n      termsAndConditionsConsent: this.booking.termsAndConditionsConsent,\r\n      excludeVat: true,\r\n      contactDetails: {\r\n        firstName: nameParts[0],\r\n        surName: nameParts[1] || '',\r\n        emailAddress: this.booking.email,\r\n        phoneNumber: `${this.booking.phone}`,\r\n        type: this.booking.role,\r\n        pickupAddress: {\r\n          streetName: this.booking.pickUpAddress,\r\n          streetNumber: '',\r\n          postalCode: this.booking.pickUpZipCode,\r\n          countryDto: {\r\n            name: this.booking.pickUpCountry?.name,\r\n            alpha2Code: this.booking.pickUpCountry?.isoCode,\r\n            callingCode: this.booking.pickUpCountry?.phonecode,\r\n          },\r\n          city: this.booking.pickUpCity,\r\n        },\r\n        dropoffAddress: {\r\n          streetName: this.booking.dropOffAddress,\r\n          streetNumber: '',\r\n          postalCode: this.booking.dropOffZipCode,\r\n          countryDto: {\r\n            name: this.booking.dropOffCountry?.name,\r\n            alpha2Code: this.booking.dropOffCountry?.isoCode,\r\n            callingCode: this.booking.dropOffCountry?.phonecode,\r\n          },\r\n          city: this.booking.dropOffCity,\r\n        },\r\n      },\r\n      contractorDetails: {\r\n        firstName: this.booking.yachtContactName,\r\n        surName: this.booking.yachtName,\r\n        emailAddress: this.booking.yachtEmail,\r\n        billing: {\r\n          companyName: this.booking.companyName || '',\r\n          vatNumber: this.booking.vatNumber || '',\r\n          address: {\r\n            streetName: this.booking.billingAddress,\r\n            streetNumber: '',\r\n            postalCode: this.booking.billingZipCode,\r\n            countryDto: {\r\n              name: this.booking.billingCountry?.name,\r\n              alpha2Code: this.booking.billingCountry?.isoCode,\r\n              callingCode: this.booking.billingCountry?.phonecode,\r\n            },\r\n            city: this.booking.billingCity,\r\n          },\r\n        },\r\n      },\r\n      message: 'N/A',\r\n    };\r\n\r\n    return obj;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "booking",
                        "type": "Booking"
                    },
                    {
                        "name": "paymentMethod",
                        "type": "any",
                        "defaultValue": "'CARD'"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "booking",
                        "type": "Booking",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paymentMethod",
                        "type": "any",
                        "defaultValue": "'CARD'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "booking",
                    "type": "Booking",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "paymentMethod",
                    "defaultValue": "'CARD'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "toRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "{ paymentMethod: string; products: any; yachtName: any; securityDepositConsent: any; termsAndCond...",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Product",
            "id": "class-Product-5863d369093b0f6600de599e519ab011",
            "file": "src/app/product/models/product.model.ts",
            "type": "class",
            "sourceCode": "import { Attachment } from 'src/app/core/models/attachment.model';\r\nimport { FAQ } from 'src/app/core/models/faqs.model';\r\nimport { Image } from 'src/app/core/models/image.model';\r\nimport { ProductDescription } from './product-description.model';\r\nimport { ProductGroup } from './product-group.model';\r\n\r\nexport class Product {\r\n  id?: number;\r\n  slug?: string;\r\n  name?: string;\r\n  summary?: string;\r\n  overview?: string;\r\n  tagline?: string;\r\n  description?: ProductDescription;\r\n  price?: number;\r\n  totalPrice?: number;\r\n  imageThumbnail?: Image;\r\n  icon?: Image;\r\n  productGroup?: ProductGroup;\r\n  seoFriendlyName?: string;\r\n  seoMetaDescription?: string;\r\n  productGroupSlug?: string;\r\n  productSlug?: string;\r\n\r\n  accessories: Array<Product> = [];\r\n  images?: Array<Image> = [];\r\n  attachments?: Array<Attachment> = [];\r\n  rates?: Array<any> = [];\r\n  note?: string;\r\n\r\n  availabilityState: string = '';\r\n  features: string = '';\r\n  faqs: Array<FAQ> = [];\r\n\r\n  isAvailable?: boolean = false;\r\n  addedToBooking?: boolean = false;\r\n  quantity: number = 1;\r\n  type: string = 'Product';\r\n}\r\n",
            "properties": [
                {
                    "name": "accessories",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "addedToBooking",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "attachments",
                    "defaultValue": "[]",
                    "type": "Array<Attachment>",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "availabilityState",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "description",
                    "type": "ProductDescription",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "faqs",
                    "defaultValue": "[]",
                    "type": "Array<FAQ>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "features",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "icon",
                    "type": "Image",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "type": "Array<Image>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "imageThumbnail",
                    "type": "Image",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "note",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "overview",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "productGroup",
                    "type": "ProductGroup",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "productGroupSlug",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "productSlug",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "quantity",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "rates",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "seoFriendlyName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "seoMetaDescription",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "summary",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "tagline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalPrice",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "defaultValue": "'Product'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProductDescription",
            "id": "class-ProductDescription-46529801dfefba25ba6f194badabcc3c",
            "file": "src/app/product/models/product-description.model.ts",
            "type": "class",
            "sourceCode": "import { ProductSection } from './product-section.model';\r\n\r\nexport class ProductDescription {\r\n  dimensions?: string;\r\n  tagline?: string;\r\n  summary?: string;\r\n  section1?: ProductSection;\r\n  section2?: ProductSection;\r\n  section3?: ProductSection;\r\n  section4?: ProductSection;\r\n  section5?: ProductSection;\r\n  section6?: ProductSection;\r\n  section7?: ProductSection;\r\n}\r\n",
            "properties": [
                {
                    "name": "dimensions",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "section1",
                    "type": "ProductSection",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "section2",
                    "type": "ProductSection",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "section3",
                    "type": "ProductSection",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "section4",
                    "type": "ProductSection",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "section5",
                    "type": "ProductSection",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "section6",
                    "type": "ProductSection",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "section7",
                    "type": "ProductSection",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "summary",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tagline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProductGroup",
            "id": "class-ProductGroup-45ae5735d64aa8b63df625bb722906b1",
            "file": "src/app/product/models/product-group.model.ts",
            "type": "class",
            "sourceCode": "export class ProductGroup {\r\n  id?: number;\r\n  name?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProductSection",
            "id": "class-ProductSection-e11a289c3e0384ceb09dac9520929db0",
            "file": "src/app/product/models/product-section.model.ts",
            "type": "class",
            "sourceCode": "export class ProductSection {\r\n  head?: string;\r\n  paragraph?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "head",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "paragraph",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Toy",
            "id": "class-Toy-04ff7c3b1380f0783a77b00a7d3f1a31",
            "file": "src/app/core/models/toy.model.ts",
            "type": "class",
            "sourceCode": "import { Image } from 'src/app/core/models/image.model';\r\nimport { ProductDescription } from 'src/app/product/models/product-description.model';\r\n\r\nexport class Toy {\r\n    id?: number;\r\n    slug?: string;\r\n    name?: string;\r\n    summary?: string;\r\n    description?: ProductDescription;\r\n    price?: number;\r\n    imageThumbnail?: Image;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "ProductDescription",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "imageThumbnail",
                    "type": "Image",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "summary",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-04aa85351ad2a79f601babfb30b7af57",
            "file": "api/database/user.ts",
            "type": "class",
            "sourceCode": "import { Sequelize, Model, DataTypes } from 'sequelize';\r\n\r\nexport class User extends Model {\r\n  public id!: string;\r\n  public firstName?: string;\r\n  public lastName?: string;\r\n  public email?: string;\r\n  public role?: string;\r\n\r\n  public static initialize(sequelize: Sequelize) {\r\n    User.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.STRING,\r\n          primaryKey: true,\r\n          allowNull: false,\r\n        },\r\n        firstName: {\r\n          type: DataTypes.STRING,\r\n          field: 'first_name',\r\n        },\r\n        lastName: {\r\n          type: DataTypes.STRING,\r\n          field: 'last_name',\r\n        },\r\n        email: {\r\n          type: DataTypes.STRING,\r\n          field: 'email',\r\n        },\r\n        role: {\r\n          type: DataTypes.STRING,\r\n          field: 'role',\r\n        },\r\n      },\r\n      {\r\n        sequelize,\r\n        tableName: 'user',\r\n        timestamps: false,\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-5e8affc5b654ece920ea951a55a506f6-1",
            "file": "src/app/booking/models/user.ts",
            "type": "class",
            "sourceCode": "import { NgUser } from '@appstrax/ng-auth';\r\n\r\nexport class User {\r\n    id!: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    email?: string;\r\n    role?: string;\r\n\r\n    static fromNgUser(ngUser: NgUser): User {\r\n        const user = new User();\r\n        user.id = ngUser.id;\r\n        user.firstName = ngUser.firstName;\r\n        user.lastName = ngUser.lastName;\r\n        user.email = ngUser.email;\r\n\r\n        return user;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "fromNgUser",
                    "args": [
                        {
                            "name": "ngUser",
                            "type": "NgUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "User",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "ngUser",
                            "type": "NgUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "Warehouse",
            "id": "class-Warehouse-2ccfc63b374897b5c3fd60e374914e71",
            "file": "api/database/warehouse.ts",
            "type": "class",
            "sourceCode": "import { Sequelize, Model, DataTypes } from 'sequelize';\r\n\r\nexport class Warehouse extends Model {\r\n  public id?: number;\r\n  public activationTimeFrom?: string;\r\n  public activationTimeTo?: string;\r\n  public closingHour?: string;\r\n  public openingHour?: string;\r\n  public currentRmsStoreId?: number;\r\n  public name?: string;\r\n  public timezone?: string;\r\n  public timezoneString?: string;\r\n\r\n  public static initialize(sequelize: Sequelize) {\r\n    Warehouse.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.INTEGER,\r\n          primaryKey: true,\r\n          allowNull: false,\r\n          autoIncrement: true,\r\n        },\r\n        activationTimeFrom: {\r\n          type: DataTypes.STRING,\r\n          field: 'activation_time_from',\r\n        },\r\n        activationTimeTo: {\r\n          type: DataTypes.STRING,\r\n          field: 'activation_time_to',\r\n        },\r\n        closingHour: { type: DataTypes.STRING, field: 'closing_hour' },\r\n        currentRmsStoreId: {\r\n          type: DataTypes.INTEGER,\r\n          field: 'current_rms_store_id',\r\n        },\r\n        name: { type: DataTypes.STRING },\r\n        openingHour: { type: DataTypes.STRING, field: 'opening_hour' },\r\n        timezone: { type: DataTypes.STRING },\r\n        timezone_string: { type: DataTypes.STRING, field: 'timezone_string' },\r\n      },\r\n      {\r\n        sequelize,\r\n        tableName: 'warehouse',\r\n        timestamps: false,\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activationTimeFrom",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "activationTimeTo",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "closingHour",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "currentRmsStoreId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openingHour",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timezone",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timezoneString",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WarehouseType",
            "id": "class-WarehouseType-7e372e0b1cd1b3f4335b8bd8bb1c7dd8",
            "file": "api/database/warehouse-type.ts",
            "type": "class",
            "sourceCode": "import { Sequelize, Model, DataTypes } from 'sequelize';\r\n\r\nexport class WarehouseType extends Model {\r\n  public id?: number;\r\n  public abbreviation?: string;\r\n  public name?: string;\r\n\r\n  public static initialize(sequelize: Sequelize) {\r\n    WarehouseType.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.INTEGER,\r\n          primaryKey: true,\r\n          allowNull: false,\r\n          autoIncrement: true,\r\n        },\r\n        abbreviation: {\r\n          type: DataTypes.STRING,\r\n        },\r\n        name: {\r\n          type: DataTypes.STRING,\r\n        },\r\n      },\r\n      {\r\n        sequelize,\r\n        tableName: 'warehouse_type',\r\n        timestamps: false,\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "abbreviation",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sequelize",
                            "type": "Sequelize",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddBookingComponent",
            "id": "component-AddBookingComponent-9c94f638971591edec8c84aad8a53cf1",
            "file": "src/app/booking/modals/add-booking/add-booking.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-booking",
            "styleUrls": [
                "./add-booking.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-booking.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "line": 13,
                    "type": "Array<Location>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "booking",
                    "defaultValue": "new Booking()",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addToBooking",
                    "args": [
                        {
                            "name": "bookingAndProduct",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookingAndProduct",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Location } from 'src/app/core/models/location.model';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { Booking } from '../../models/booking.model';\r\n\r\n@Component({\r\n  selector: 'app-add-booking',\r\n  templateUrl: './add-booking.component.html',\r\n  styleUrls: ['./add-booking.component.scss'],\r\n})\r\nexport class AddBookingComponent implements OnInit {\r\n  @Input() locations: Array<Location> = [];\r\n\r\n  booking: Booking | undefined = new Booking();\r\n\r\n  constructor(public modal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  async addToBooking(bookingAndProduct: {\r\n    booking: Booking;\r\n    product: Product | undefined;\r\n  }) {\r\n    this.modal.close(bookingAndProduct);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: #19303b;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}\r\n",
                    "styleUrl": "./add-booking.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-2 border-bottom-0\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body m-5\">\r\n  <h4 class=\"text-center mb-2\">Create a New Booking</h4>\r\n\r\n  <app-booking-form\r\n    [(booking)]=\"booking\"\r\n    [locations]=\"locations\"\r\n    (addToBooking)=\"addToBooking($event)\"\r\n    [showTitle]=\"false\"\r\n    [showYachtName]=\"true\"\r\n    [showBookingSelect]=\"false\"\r\n  ></app-booking-form>\r\n</div>\r\n"
        },
        {
            "name": "AddComponent",
            "id": "component-AddComponent-7d5c04802d064317646b47713714db7b",
            "file": "src/app/product/pages/add/add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add",
            "styleUrls": [
                "./add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accessories",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "product",
                    "type": "Product | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "redirectUrl",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "openRecommendedAccessories",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\nimport { LocationService } from 'src/app/core/services/location.service';\r\nimport { RecommendedAccessoriesComponent } from '../../modals/recommended-accessories/recommended-accessories.component';\r\nimport { Product } from '../../models/product.model';\r\nimport { ProductService } from '../../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-add',\r\n  templateUrl: './add.component.html',\r\n  styleUrls: ['./add.component.scss'],\r\n})\r\nexport class AddComponent implements OnInit {\r\n  booking: Booking | undefined;\r\n  product: Product | undefined;\r\n  accessories: Array<Product> = [];\r\n  redirectUrl: string | undefined;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private bookingService: BookingService,\r\n    private modalService: NgbModal,\r\n    private productService: ProductService,\r\n    private locationService: LocationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe(async (params) => {\r\n      const bookingId = params.booking_id;\r\n      const productId = params.product_id;\r\n      this.redirectUrl = params.redirect_url;\r\n\r\n      this.booking = this.bookingService.getBookingById(bookingId);\r\n      if (!this.booking) {\r\n        alert(`Booking not found by ID: ${bookingId}`);\r\n        return;\r\n      }\r\n\r\n      let p = this.booking.products.find((p) => p.id == productId);\r\n      if (!p) {\r\n        alert(`Product not found by ID: ${productId}`);\r\n        return;\r\n      }\r\n\r\n      const response = await this.productService.getProductById(p.id!);\r\n      this.product = response.product;\r\n      this.product.quantity = p.quantity || 1;\r\n      this.accessories = response.accessories;\r\n\r\n      // Format the WP booking if needed\r\n      if (Object.keys(p).length !== Object.keys(this.product).length) {\r\n        const locations = await this.locationService.getLocations();\r\n        this.booking.location.collection = locations.find(\r\n          (l) => l.name === this.booking?.location.collection?.name\r\n        );\r\n        this.booking.location.delivery = locations.find(\r\n          (l) => l.name === this.booking?.location.delivery?.name\r\n        );\r\n\r\n        const accessories = p.accessories || []\r\n        this.bookingService.removeProduct(this.booking, p);\r\n        this.bookingService.save();\r\n\r\n        this.product.accessories = accessories;\r\n        this.bookingService.addToBooking(this.booking, this.product);\r\n        this.bookingService.save();\r\n      }\r\n\r\n      this.openRecommendedAccessories();\r\n    });\r\n  }\r\n\r\n  async openRecommendedAccessories() {\r\n    const modal = this.modalService.open(RecommendedAccessoriesComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n    modal.componentInstance.accessories = this.accessories;\r\n\r\n    try {\r\n      const accessoriesToAdd = await modal.result;\r\n      await this.bookingService.addAccessories(\r\n        this.booking!,\r\n        this.product!,\r\n        accessoriesToAdd\r\n      );\r\n      this.router.navigate(['bookings', 'recently-added']);\r\n    } catch (err) {\r\n      this.router.navigate(['bookings', 'recently-added']);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col\">\r\n      <p class=\"text-center\">Loading...</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AddedToBookingsComponent",
            "id": "component-AddedToBookingsComponent-0af7217afaa88075796525679ca481de",
            "file": "src/app/booking/pages/added-to-bookings/added-to-bookings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-added-to-bookings",
            "styleUrls": [
                "./added-to-bookings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./added-to-bookings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentBooking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "recommendedProducts",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "redirectUrl",
                    "defaultValue": "environment.home",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "homepage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "viewCurrentBookingsButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Booking } from '../../models/booking.model';\r\n\r\nimport { BookingService } from '../../services/bookings.service';\r\n\r\n@Component({\r\n  selector: 'app-added-to-bookings',\r\n  templateUrl: './added-to-bookings.component.html',\r\n  styleUrls: ['./added-to-bookings.component.scss'],\r\n})\r\nexport class AddedToBookingsComponent implements OnInit {\r\n  currentBooking: Booking | undefined;\r\n  products: Array<Product> = [];\r\n  recommendedProducts: Array<Product> = [];\r\n\r\n  redirectUrl: string = environment.home;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private bookingService: BookingService\r\n  ) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.activatedRoute.queryParamMap.subscribe((queryParams) => {\r\n      if (queryParams.has('redirect_url')) {\r\n        this.redirectUrl = queryParams.get('redirect_url') || environment.home;\r\n      }\r\n    });\r\n    \r\n    try {\r\n      this.currentBooking = this.bookingService.getCurrentBooking();\r\n      if (!this.currentBooking) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n\r\n      this.currentBooking.products.forEach((p) => {\r\n        const accessories = p.accessories;\r\n\r\n        this.products.push(p);\r\n        this.products.push(...accessories);\r\n      });\r\n      this.recommendedProducts = []; // TODO: Fetch!\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  homepage() {\r\n    location.href = this.redirectUrl;\r\n  }\r\n\r\n  viewCurrentBookingsButtonClicked() {\r\n    if (!this.currentBooking) {\r\n      this.router.navigate(['bookings']);\r\n      return;\r\n    }\r\n\r\n    this.router.navigate(['bookings', this.currentBooking!.id]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".primary {\r\n  color: #fab900 !important;\r\n}\r\n\r\nhr {\r\n  margin: 5rem  0 5rem 0;\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .container {\r\n    text-align: center;\r\n  }\r\n}",
                    "styleUrl": "./added-to-bookings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <app-product-preview-images [products]=\"products\"></app-product-preview-images>\r\n\r\n  <section class=\"text-center\">\r\n    <div class=\"tyros-reg fs-36\">Added to your Booking</div>\r\n    <div class=\"fs-24 tyros-reg mt-2\">\r\n      {{ currentBooking?.yachtName || \"Booking\" }} |\r\n      {{ currentBooking?.location?.delivery?.name }} -\r\n      {{ currentBooking?.location?.collection?.name }}\r\n    </div>\r\n    <div class=\"fs-24 avenir-light\">\r\n      {{ currentBooking?.period?.fromDate?.day }}.{{\r\n      currentBooking?.period?.fromDate?.month\r\n      }}.{{ currentBooking?.period?.fromDate?.year }} -\r\n      {{ currentBooking?.period?.toDate?.day }}.{{\r\n      currentBooking?.period?.toDate?.month\r\n      }}.{{ currentBooking?.period?.toDate?.year }}\r\n    </div>\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"pr-1\">\r\n        <button class=\"btn btn-secondary px-5 py-2 mt-3\" (click)=\"homepage()\">\r\n          CONTINUE SHOPPING\r\n        </button>\r\n      </div>\r\n      <div class=\"pl-1\">\r\n        <button class=\"btn btn-primary px-5 py-2 mt-3\" (click)=\"viewCurrentBookingsButtonClicked()\">\r\n          CHECKOUT\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </section>\r\n  <hr />\r\n  <!-- <div class=\"fs-24 tyros-reg primary\">Recommended</div>\r\n  <div class=\"tyros-reg fs-36\">Water Toys to Rent</div>\r\n  <app-card-grid></app-card-grid>\r\n  <app-new-question></app-new-question> -->\r\n  <div class=\"pb-4\">\r\n    <app-we-specialize></app-we-specialize>\r\n  </div>\r\n</div>"
        },
        {
            "name": "AddToBookingComponent",
            "id": "component-AddToBookingComponent-64c52700554e46bafb7289b84b2cd543",
            "file": "src/app/product/modals/add-to-booking/add-to-booking.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-to-booking",
            "styleUrls": [
                "./add-to-booking.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-to-booking.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookings",
                    "defaultValue": "[]",
                    "type": "Array<Booking>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "bookingClick",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\n\r\n@Component({\r\n  selector: 'app-add-to-booking',\r\n  templateUrl: './add-to-booking.component.html',\r\n  styleUrls: ['./add-to-booking.component.scss'],\r\n})\r\nexport class AddToBookingComponent implements OnInit {\r\n  bookings: Array<Booking> = [];\r\n\r\n  constructor(public modal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  bookingClick(booking: Booking) {\r\n    this.modal.close(booking);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  text-align: center;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: #19303b;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}\r\n\r\n.btn.btn-shadow {\r\n  background: #ffffff;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.15);\r\n  border-radius: 3px;\r\n}\r\n",
                    "styleUrl": "./add-to-booking.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-4 border-bottom-0\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <h4 class=\"text-center\">Add to a Booking</h4>\r\n\r\n  <button\r\n    class=\"btn btn-shadow btn-transparent btn-lg btn-block py-3 my-3\"\r\n    (click)=\"modal.dismiss('create-booking')\"\r\n  >\r\n    Create a New Booking\r\n  </button>\r\n\r\n  <h4 *ngIf=\"bookings.length > 0\" class=\"text-center mt-3\">Add to existing Booking</h4>\r\n\r\n  <hr *ngIf=\"bookings.length > 0\" />\r\n\r\n  <div\r\n    *ngFor=\"let b of bookings; index as i\"\r\n    (click)=\"bookingClick(b)\"\r\n    class=\"pointer px-0\"\r\n  >\r\n    <div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-2 align-self-center pr-0\">\r\n          <img class=\"pl-2\" src=\"assets/images/fish-orange.svg\" />\r\n        </div>\r\n        <div class=\"col-10 pl-0\">\r\n          <p *ngIf=\"b.yachtName\" class=\"p-style-4 pb-0 mb-0\">\r\n            {{ b.yachtName }}\r\n          </p>\r\n          <p *ngIf=\"!b.yachtName\" class=\"p-style-4 pb-0 mb-0\">\r\n            Booking # {{ i + 1 }}\r\n          </p>\r\n          <p class=\"p-style-2 pb-0 mb-0\">\r\n            {{ b.location?.collection?.name }} -\r\n            {{ b.location?.delivery?.name }}\r\n          </p>\r\n          <p class=\"p-style-2 pb-0 mb-0\">\r\n            {{ b.period?.fromDate?.day }}.{{ b.period?.fromDate?.month }}.{{\r\n              b.period?.fromDate?.year\r\n            }}\r\n            - {{ b.period?.toDate?.day }}.{{ b.period?.toDate?.month }}.{{\r\n              b.period?.toDate?.year\r\n            }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"i + 1 !== bookings.length\" class=\"dropdown-divider\"></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AdminHeaderComponent",
            "id": "component-AdminHeaderComponent-25e64b6ab9aaf053503b891a8680e320",
            "file": "src/app/admin/components/header/admin-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-header",
            "styleUrls": [
                "./admin-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { isPlatformServer } from '@angular/common';\r\nimport { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\n\r\n@Component({\r\n  selector: 'app-admin-header',\r\n  templateUrl: './admin-header.component.html',\r\n  styleUrls: ['./admin-header.component.scss'],\r\n})\r\nexport class AdminHeaderComponent implements OnInit {\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private ngAuth: NgAuthService,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformServer(this.platformId)) return;\r\n    this.user = this.ngAuth.getAuthenticatedUser();\r\n  }\r\n\r\n  logout() {\r\n    this.ngAuth.logout();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar {\r\n  height: 100px;\r\n  box-shadow: 0px 0px 20px rgba(214, 214, 214, 0.5);\r\n}\r\n\r\n.nav-item {\r\n  color: #19303b;\r\n}\r\n\r\n.nav-item.active {\r\n  color: #fab900;\r\n}\r\n",
                    "styleUrl": "./admin-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "platformId",
                        "type": "Object"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-transparent mb-4\">\r\n  <div class=\"container\">\r\n    <a class=\"navbar-brand\" href=\"#\">\r\n      <img src=\"assets/images/logo.png\" height=\"32\" />\r\n    </a>\r\n\r\n    <div class=\"d-flex justify-content-between\">\r\n      <a class=\"nav-item\" routerLink=\"/admin/transport-costs\" routerLinkActive=\"active\">Transport Costs</a>\r\n\r\n      <a class=\"nav-item pl-5\" routerLink=\"/admin/users\" routerLinkActive=\"active\">Users</a>\r\n\r\n      <a *ngIf=\"user\" class=\"nav-item pl-5\" routerLink=\"/auth/login\" (click)=\"logout()\">Logout</a>\r\n\r\n      <a *ngIf=\"!user\" class=\"nav-item pl-5\" routerLink=\"/auth/login\">Login</a>\r\n    </div>\r\n  </div>\r\n</nav>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1dd77afe0e1980a861c52d39a4737252",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit() {\r\n      this.router.events.subscribe((evt) => {\r\n          if (!(evt instanceof NavigationEnd)) {\r\n              return;\r\n          }\r\n          window.scrollTo(0, 0)\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "BasicLayoutComponent",
            "id": "component-BasicLayoutComponent-228aef299dba7878086e7ad0bbfa4adf",
            "file": "src/app/core/basic-layout/basic-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-basic-layout",
            "styleUrls": [
                "./basic-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./basic-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-basic-layout',\r\n  templateUrl: './basic-layout.component.html',\r\n  styleUrls: ['./basic-layout.component.scss']\r\n})\r\nexport class BasicLayoutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./basic-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n<app-footer></app-footer>\r\n"
        },
        {
            "name": "BookingFormComponent",
            "id": "component-BookingFormComponent-8b74041c7401749c2c3b736cfdd1996b",
            "file": "src/app/core/booking-form/booking-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-booking-form",
            "styleUrls": [
                "./booking-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./booking-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "booking",
                    "line": 30,
                    "type": "Booking | undefined"
                },
                {
                    "name": "bookings",
                    "defaultValue": "[]",
                    "line": 33,
                    "type": "Array<Booking>"
                },
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "line": 34,
                    "type": "Array<Location>"
                },
                {
                    "name": "product",
                    "line": 35,
                    "type": "Product | undefined"
                },
                {
                    "name": "showBookingSelect",
                    "defaultValue": "true",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "showYachtName",
                    "defaultValue": "false",
                    "line": 36,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "addToBooking",
                    "defaultValue": "new EventEmitter<{\r\n    booking: Booking;\r\n    product: Product | undefined;\r\n  }>()",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "availability",
                    "defaultValue": "new EventEmitter<AvailabilityState>()",
                    "line": 46,
                    "type": "EventEmitter"
                },
                {
                    "name": "bookingChange",
                    "defaultValue": "new EventEmitter<Booking | undefined>()",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "loadingAvailabilityEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "lovedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "manageBookingClick",
                    "defaultValue": "new EventEmitter<Booking>()",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availabilityState",
                    "defaultValue": "new AvailabilityState()",
                    "type": "AvailabilityState",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "datepicker",
                    "type": "NgbInputDatepicker",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'datepicker'"
                        }
                    ]
                },
                {
                    "name": "datesAvailable",
                    "defaultValue": "[]",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "formatter",
                    "type": "NgbDateParserFormatter",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fromDate",
                    "type": "NgbDate | null",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "hoveredDate",
                    "defaultValue": "null",
                    "type": "NgbDate | null",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "loadingAvailability",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "loadingAvailabilityGraph",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "minDate",
                    "type": "NgbDate",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "toDate",
                    "type": "NgbDate | null",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "addToBookingClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 376
                },
                {
                    "name": "availabilityGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 245,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "checkGeneralAvailability",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 200,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "counterChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "isFirst",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isHovered",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInside",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 339
                },
                {
                    "name": "isLast",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 169,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRange",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUnavailable",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 177,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markDisabled",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "current",
                            "type": "literal type | null"
                        },
                        {
                            "name": "next",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 287,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "literal type | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newBookingCreated",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "onCollectionLocationChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101
                },
                {
                    "name": "onDateSelection",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeliveryLocationChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "validateInput",
                    "args": [
                        {
                            "name": "currentValue",
                            "type": "NgbDate | null"
                        },
                        {
                            "name": "input",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "NgbDate | null",
                    "typeParameters": [],
                    "line": 193,
                    "jsdoctags": [
                        {
                            "name": "currentValue",
                            "type": "NgbDate | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  NgbCalendar,\r\n  NgbDate,\r\n  NgbDateParserFormatter,\r\n  NgbDatepicker,\r\n  NgbInputDatepicker,\r\n} from '@ng-bootstrap/ng-bootstrap';\r\nimport * as moment from 'moment';\r\nimport { BookingPeriod } from 'src/app/booking/models/booking-period.model';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { AvailabilityState } from '../models/availability-state';\r\nimport { Location } from '../models/location.model';\r\n\r\n@Component({\r\n  selector: 'app-booking-form',\r\n  templateUrl: './booking-form.component.html',\r\n  styleUrls: ['./booking-form.component.scss'],\r\n})\r\nexport class BookingFormComponent implements OnInit {\r\n  @Input() booking: Booking | undefined;\r\n  @Output() bookingChange = new EventEmitter<Booking | undefined>();\r\n\r\n  @Input() bookings: Array<Booking> = [];\r\n  @Input() locations: Array<Location> = [];\r\n  @Input() product: Product | undefined;\r\n  @Input() showYachtName: boolean = false;\r\n  @Input() showBookingSelect: boolean = true;\r\n  @Input() showTitle: boolean = true;\r\n\r\n  @Output() manageBookingClick = new EventEmitter<Booking>();\r\n  @Output() lovedChange = new EventEmitter<boolean>();\r\n  @Output() addToBooking = new EventEmitter<{\r\n    booking: Booking;\r\n    product: Product | undefined;\r\n  }>();\r\n  @Output() availability = new EventEmitter<AvailabilityState>();\r\n  @Output() loadingAvailabilityEvent = new EventEmitter<boolean>();\r\n\r\n  @ViewChild('datepicker') datepicker!: NgbInputDatepicker;\r\n\r\n  hoveredDate: NgbDate | null = null;\r\n  minDate: NgbDate;\r\n  fromDate: NgbDate | null;\r\n  toDate: NgbDate | null;\r\n\r\n  loadingAvailability = false;\r\n  loadingAvailabilityGraph = false;\r\n  availabilityState: AvailabilityState = new AvailabilityState();\r\n\r\n  datesAvailable: Array<{ date: NgbDate | null; available: boolean }> = [];\r\n\r\n  constructor(\r\n    private calendar: NgbCalendar,\r\n    public formatter: NgbDateParserFormatter,\r\n    private bookingService: BookingService\r\n  ) {\r\n    this.minDate = calendar.getToday();\r\n    this.fromDate = calendar.getToday();\r\n    this.toDate = calendar.getNext(calendar.getToday(), 'd', 10);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // If parent component passed in a new Booking\r\n    if (this.booking && !this.booking.id) {\r\n      this.booking!.period.fromDate = this.fromDate!;\r\n      this.booking!.period.toDate = this.toDate!;\r\n    }\r\n\r\n    if (this.booking && this.booking.id) {\r\n      this.checkGeneralAvailability();\r\n    }\r\n\r\n    this.bookingService.availabilityCheck.subscribe((_force: any) => {\r\n      this.checkGeneralAvailability();\r\n    })\r\n  }\r\n\r\n  newBookingCreated(booking: Booking) {\r\n    this.booking = booking;\r\n    this.booking!.period.fromDate = this.fromDate!;\r\n    this.booking!.period.toDate = this.toDate!;\r\n    this.bookingChange.emit(this.booking);\r\n  }\r\n\r\n  onDeliveryLocationChange() {\r\n    this.checkGeneralAvailability();\r\n    this.availabilityGraph();\r\n    this.bookingChange.emit(this.booking);\r\n  }\r\n\r\n  onCollectionLocationChange() {\r\n    this.checkGeneralAvailability();\r\n    this.availabilityGraph();\r\n    this.bookingChange.emit(this.booking);\r\n  }\r\n\r\n  counterChanged() {\r\n    this.checkGeneralAvailability();\r\n    this.availabilityGraph();\r\n    this.bookingChange.emit(this.booking);\r\n  }\r\n\r\n  onDateSelection(date: NgbDate) {\r\n    if (!this.fromDate && !this.toDate) {\r\n      this.fromDate = date;\r\n\r\n      this.booking!.period.fromDate = this.fromDate;\r\n      this.bookingChange.emit(this.booking);\r\n    } else if (\r\n      this.fromDate &&\r\n      !this.toDate &&\r\n      date &&\r\n      date.after(this.fromDate)\r\n    ) {\r\n      this.toDate = date;\r\n\r\n      this.booking!.period.fromDate = this.fromDate;\r\n      this.booking!.period.toDate = this.toDate;\r\n      this.datepicker.close();\r\n      this.bookingChange.emit(this.booking);\r\n      this.checkGeneralAvailability();\r\n    } else {\r\n      this.toDate = null;\r\n      this.fromDate = date;\r\n    }\r\n  }\r\n\r\n  isHovered(date: NgbDate) {\r\n    return (\r\n      this.fromDate &&\r\n      !this.toDate &&\r\n      this.hoveredDate &&\r\n      date.after(this.fromDate) &&\r\n      date.before(this.hoveredDate)\r\n    );\r\n  }\r\n\r\n  isInside(date: NgbDate) {\r\n    return this.toDate && date.after(this.fromDate) && date.before(this.toDate);\r\n  }\r\n\r\n  isRange(date: NgbDate) {\r\n    return (\r\n      date.equals(this.fromDate) ||\r\n      (this.toDate && date.equals(this.toDate)) ||\r\n      this.isInside(date) ||\r\n      this.isHovered(date)\r\n    );\r\n  }\r\n\r\n  isFirst(date: NgbDate) {\r\n    return (\r\n      date.year === this.fromDate?.year &&\r\n      date.month === this.fromDate?.month &&\r\n      date.day === this.fromDate?.day\r\n    );\r\n  }\r\n\r\n  isLast(date: NgbDate) {\r\n    return (\r\n      date.year === this.toDate?.year &&\r\n      date.month === this.toDate?.month &&\r\n      date.day === this.toDate?.day\r\n    );\r\n  }\r\n\r\n  isUnavailable(date: NgbDate) {\r\n    const found = this.datesAvailable.find(\r\n      (d) =>\r\n        d.date?.year === date.year &&\r\n        d.date.month === date.month &&\r\n        d.date.day === date.day\r\n    );\r\n    if (!found) return false;\r\n\r\n    return !found.available;\r\n  }\r\n\r\n  markDisabled(date: NgbDate) {\r\n    console.log(date);\r\n  }\r\n\r\n  validateInput(currentValue: NgbDate | null, input: string): NgbDate | null {\r\n    const parsed = this.formatter.parse(input);\r\n    return parsed && this.calendar.isValid(NgbDate.from(parsed))\r\n      ? NgbDate.from(parsed)\r\n      : currentValue;\r\n  }\r\n\r\n  async checkGeneralAvailability() {\r\n    if (!this.product) return;\r\n    if (!this.booking) return;\r\n    if (!this.booking.period) return;\r\n    if (!this.booking.period.fromDate) return;\r\n    if (!this.booking.period.toDate) return;\r\n    if (!this.booking.location) return;\r\n    if (!this.booking.location.collection) return;\r\n    if (!this.booking.location.delivery) return;\r\n\r\n    const miniBooking = new Booking();\r\n    miniBooking.products = [this.product!];\r\n    miniBooking.period = this.booking.period;\r\n    miniBooking.location = this.booking.location;\r\n\r\n    this.loadingAvailability = true;\r\n    this.loadingAvailabilityEvent.emit(this.loadingAvailability);\r\n    try {\r\n      const availabilityResponse = await this.bookingService.productsAvailability(\r\n        miniBooking\r\n      );\r\n\r\n      if (\r\n        availabilityResponse.products[0] &&\r\n        availabilityResponse.products[0].id === this.product.id\r\n      ) {\r\n        const stockDetermination = (availabilityResponse.products[0] as any)\r\n          .stockDetermination;\r\n        this.availabilityState = {\r\n          state: stockDetermination.availabilityState,\r\n          notes: stockDetermination.note,\r\n        };\r\n        this.availability.emit(this.availabilityState);\r\n      }\r\n    } catch (err) {\r\n      this.availabilityState = {\r\n        state: 'NOT_AVAILABLE',\r\n        notes: '',\r\n      };\r\n      this.availability.emit(this.availabilityState);\r\n    }\r\n    this.loadingAvailability = false;\r\n    this.loadingAvailabilityEvent.emit(this.loadingAvailability);\r\n  }\r\n\r\n  async availabilityGraph() {\r\n    if (!this.product) return;\r\n    if (!this.booking) return;\r\n    if (!this.booking.period) return;\r\n    if (!this.booking.period.fromDate) return;\r\n    if (!this.booking.period.toDate) return;\r\n    if (!this.booking.location) return;\r\n    if (!this.booking.location.collection) return;\r\n    if (!this.booking.location.delivery) return;\r\n\r\n    const period = new BookingPeriod();\r\n    period.start = moment(this.booking.period.fromDate)\r\n      .startOf('month')\r\n      .utc()\r\n      .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n    period.end = moment(this.booking.period.toDate)\r\n      .endOf('month')\r\n      .utc()\r\n      .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n\r\n    this.loadingAvailabilityGraph = true;\r\n\r\n    try {\r\n      const graph = await this.bookingService.availabilityGraph(\r\n        this.product,\r\n        period,\r\n        this.booking.location\r\n      );\r\n\r\n      this.datesAvailable = graph.availabilityGraph.map((ag) => {\r\n        return {\r\n          date: NgbDate.from(this.formatter.parse(ag.date!)),\r\n          available: ag.available!,\r\n        };\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    this.loadingAvailabilityGraph = false;\r\n  }\r\n\r\n  async navigate(\r\n    current: { year: number; month: number } | null,\r\n    next: { year: number; month: number }\r\n  ) {\r\n    this.loadingAvailabilityGraph = true;\r\n\r\n    let start = moment();\r\n    let end = moment(next);\r\n    if (current) start = moment(current);\r\n\r\n    const period = new BookingPeriod();\r\n\r\n    if (start.isBefore(end)) {\r\n      period.start = start\r\n        .startOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n      period.end = end\r\n        .endOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n    } else {\r\n      period.start = end\r\n        .startOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n      period.end = start\r\n        .endOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n    }\r\n\r\n    try {\r\n      const graph = await this.bookingService.availabilityGraph(\r\n        this.product!,\r\n        period,\r\n        this.booking!.location\r\n      );\r\n\r\n      this.datesAvailable = graph.availabilityGraph.map((ag) => {\r\n        return {\r\n          date: NgbDate.from(this.formatter.parse(ag.date!)),\r\n          available: ag.available!,\r\n        };\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    this.loadingAvailabilityGraph = false;\r\n  }\r\n\r\n  isInvalid(): boolean {\r\n    let invalid = false;\r\n\r\n    if (!this.booking?.location.collection) {\r\n      invalid = true;\r\n    }\r\n\r\n    if (!this.booking?.location.delivery) {\r\n      invalid = true;\r\n    }\r\n\r\n    if (!this.booking?.period.start) {\r\n      invalid = true;\r\n    }\r\n\r\n    if (!this.booking?.period.end) {\r\n      invalid = true;\r\n    }\r\n\r\n    if (!this.product?.quantity) {\r\n      invalid = true;\r\n    }\r\n\r\n    if (\r\n      this.availabilityState.state === 'COULD_NOT_DETERMINE' ||\r\n      this.availabilityState.state === 'NOT_AVAILABLE'\r\n    ) {\r\n      invalid = true;\r\n    }\r\n\r\n    if (this.loadingAvailability) {\r\n      invalid = true;\r\n    }\r\n\r\n    return invalid;\r\n  }\r\n\r\n  addToBookingClick() {\r\n    this.addToBooking.emit({ booking: this.booking!, product: this.product });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "select.form-control {\r\n  background: #ffffff;\r\n  border: 1px solid #c4c4c4;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  height: 60px;\r\n\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n\r\n  -moz-appearance: none;\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n}\r\n\r\n.float-container.disabled {\r\n  background-color: #e9ecef;\r\n  opacity: 1;\r\n}\r\n\r\n.form-group.hidden {\r\n  height: 0;\r\n  width: 0;\r\n  margin: 0;\r\n  border: none;\r\n  padding: 0;\r\n}\r\ndiv.form-group.hidden > div > input {\r\n  height: 0;\r\n  width: 0;\r\n  margin: 0;\r\n  border: none;\r\n  padding: 0;\r\n}\r\n\r\n.custom-day {\r\n  //styleName: <Mobile P Style 4> Avenir LT Std 45 Book 12;\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: 18px;\r\n  text-align: center;\r\n  padding: 0.185rem 0.25rem;\r\n  display: inline-block;\r\n  height: 2rem;\r\n  width: 2rem;\r\n}\r\n.custom-day.focused {\r\n  background-color: #e6e6e6;\r\n}\r\n.custom-day.range,\r\n.custom-day:hover {\r\n  background-color: #fab900;\r\n  color: white !important;\r\n}\r\n.custom-day.faded {\r\n  background-color: #fab900;\r\n}\r\n.custom-day.unavailable {\r\n  text-decoration: line-through;\r\n  color: #fab900 !important;\r\n}\r\n.custom-day.disabled {\r\n  text-decoration: line-through;\r\n  color: #c4c4c4 !important;\r\n}\r\n.custom-day.first {\r\n  border-radius: 998px 0px 0px 999px !important;\r\n}\r\n.custom-day.last {\r\n  border-radius: 0px 999px 999px 0px !important;\r\n}\r\n\r\ninput {\r\n  height: 60px;\r\n  max-height: 60px;\r\n}\r\n\r\n.float-container {\r\n  background: #ffffff;\r\n  border: 1px solid #c4c4c4;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  padding: 0 8px;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.float-container input {\r\n  border: none;\r\n  font-size: 16px;\r\n  outline: 0;\r\n\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n}\r\n\r\nlabel {\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 10px;\r\n  line-height: 14px;\r\n  letter-spacing: 0.2px;\r\n  text-transform: uppercase;\r\n  color: #19303b;\r\n\r\n  position: absolute;\r\n  transform-origin: top left;\r\n  transform: translate(16px, 10px) scale(1);\r\n  transition: all 0.1s ease-in-out;\r\n}\r\n\r\n.float-container.active label {\r\n  transform: translate(0, 4px) scale(0.75);\r\n}\r\n\r\ninput::placeholder {\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #c4c4c4;\r\n}",
                    "styleUrl": "./booking-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "calendar",
                        "type": "NgbCalendar"
                    },
                    {
                        "name": "formatter",
                        "type": "NgbDateParserFormatter"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "calendar",
                        "type": "NgbCalendar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formatter",
                        "type": "NgbDateParserFormatter",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row mt-2\">\r\n  <div class=\"col\">\r\n    <h4 *ngIf=\"bookings.length === 0 && showTitle\">Check Availability</h4>\r\n    <h4 *ngIf=\"bookings.length > 0 && showTitle\">Add to Booking</h4>\r\n    <form>\r\n      <div *ngIf=\"booking && bookings.length > 0 && showBookingSelect\" class=\"form-group\">\r\n        <app-booking-select\r\n          [(booking)]=\"booking\"\r\n          [bookings]=\"bookings\"\r\n          (newBooking)=\"newBookingCreated($event)\"\r\n          (manageBookingClick)=\"manageBookingClick.emit($event)\"\r\n        ></app-booking-select>\r\n      </div>\r\n\r\n      <div *ngIf=\"booking && !booking?.id\" class=\"row\">\r\n        <div class=\"col-lg-6 col-md-12 col-sm-12 p0\">\r\n          <div class=\"form-group\">\r\n            <app-location-select\r\n              label=\"DELIVERY LOCATION\"\r\n              [locations]=\"locations\"\r\n              [showDeliver]=\"true\"\r\n              [(location)]=\"booking.location.delivery\"\r\n              (locationChange)=\"onDeliveryLocationChange()\"\r\n            ></app-location-select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 col-md-12 col-sm-12 p0\">\r\n          <div class=\"form-group\">\r\n            <app-location-select\r\n              label=\"COLLECTION LOCATION\"\r\n              [locations]=\"locations\"\r\n              [showCollect]=\"true\"\r\n              [(location)]=\"booking.location.collection\"\r\n              (locationChange)=\"onCollectionLocationChange()\"\r\n            ></app-location-select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"booking && !booking?.id\" class=\"row\">\r\n        <div class=\"col-lg-6 col-md-12 col-sm-12 pr-n1\">\r\n          <div class=\"form-group hidden\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                name=\"datepicker\"\r\n                class=\"form-control btn-no-border\"\r\n                ngbDatepicker\r\n                #datepicker=\"ngbDatepicker\"\r\n                [autoClose]=\"'outside'\"\r\n                (dateSelect)=\"onDateSelection($event)\"\r\n                [displayMonths]=\"2\"\r\n                [dayTemplate]=\"t\"\r\n                outsideDays=\"hidden\"\r\n                [minDate]=\"minDate\"\r\n                [startDate]=\"fromDate!\"\r\n                [datepickerClass]=\"'custom-datepicker'\"\r\n                [disabled]=\"\r\n                  !booking.location.collection ||\r\n                  !booking.location.delivery ||\r\n                  loadingAvailability\r\n                \"\r\n                tabindex=\"-1\"\r\n                navigation=\"arrows\"\r\n                [weekdays]=\"true\"\r\n                (navigate)=\"navigate($event.current, $event.next)\"\r\n              />\r\n              <ng-template\r\n                #t\r\n                let-date\r\n                let-focused=\"focused\"\r\n                let-disabled=\"disabled\"\r\n              >\r\n                <span\r\n                  class=\"custom-day\"\r\n                  [class.focused]=\"focused\"\r\n                  [class.range]=\"isRange(date)\"\r\n                  [class.faded]=\"isHovered(date) || isInside(date)\"\r\n                  [class.unavailable]=\"isUnavailable(date)\"\r\n                  [class.first]=\"isFirst(date)\"\r\n                  [class.last]=\"isLast(date)\"\r\n                  [class.disabled]=\"isUnavailable(date) || disabled\"\r\n                  (mouseenter)=\"hoveredDate = date\"\r\n                  (mouseleave)=\"hoveredDate = null\"\r\n                >\r\n                  {{ date.day }}\r\n                </span>\r\n              </ng-template>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <div\r\n              class=\"float-container\"\r\n              [class.disabled]=\"\r\n                !booking.location.collection || !booking.location.delivery\r\n              \"\r\n            >\r\n              <label class=\"ml-n1\">Delivery Date</label>\r\n              <input\r\n                [disabled]=\"\r\n                  !booking.location.collection || !booking.location.delivery\r\n                \"\r\n                #dpFromDate\r\n                (click)=\"datepicker.toggle()\"\r\n                class=\"form-control mt-2 btn-no-border\"\r\n                placeholder=\"yyyy-mm-dd\"\r\n                name=\"dpFromDate\"\r\n                [value]=\"\r\n                  fromDate?.day +\r\n                  ' / ' +\r\n                  fromDate?.month +\r\n                  ' / ' +\r\n                  fromDate?.year\r\n                \"\r\n                (input)=\"fromDate = validateInput(fromDate, dpFromDate.value)\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 col-md-12 col-sm-12 pl-n1\">\r\n          <div class=\"form-group\">\r\n            <div\r\n              class=\"float-container\"\r\n              [class.disabled]=\"\r\n                !booking.location.collection || !booking.location.delivery\r\n              \"\r\n            >\r\n              <label class=\"ml-n1\">Collection Date</label>\r\n              <input\r\n                [disabled]=\"\r\n                  !booking.location.collection || !booking.location.delivery\r\n                \"\r\n                #dpToDate\r\n                (click)=\"datepicker.toggle()\"\r\n                class=\"form-control mt-2 btn-no-border\"\r\n                placeholder=\"yyyy-mm-dd\"\r\n                name=\"dpToDate\"\r\n                [value]=\"\r\n                  toDate?.day + ' / ' + toDate?.month + ' / ' + toDate?.year\r\n                \"\r\n                (input)=\"toDate = validateInput(toDate, dpToDate.value)\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"booking && !booking?.id && showYachtName\" class=\"form-group\">\r\n        <div class=\"form-group\">\r\n          <app-floating-input\r\n            label=\"Yacht Name\"\r\n            placeholder=\"Optional\"\r\n            [(value)]=\"booking.yachtName\"\r\n          ></app-floating-input>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <div *ngIf=\"product && booking\" class=\"row\">\r\n      <div class=\"col-3\">\r\n        <app-counter\r\n          [(counter)]=\"product.quantity\"\r\n          [disabled]=\"loadingAvailability\"\r\n          (counterChange)=\"counterChanged()\"\r\n        ></app-counter>\r\n      </div>\r\n      <div class=\"col-2\">\r\n        <app-btn-love (lovedChange)=\"lovedChange.emit($event)\"></app-btn-love>\r\n      </div>\r\n\r\n      <div class=\"col-7\">\r\n        <button\r\n          class=\"btn btn-primary btn-lg btn-block py-3\"\r\n          [disabled]=\"isInvalid()\"\r\n          (click)=\"addToBookingClick()\"\r\n        >\r\n          Add to Booking\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- The case where you are just creating a blank booking with no product -->\r\n    <div *ngIf=\"!product\" class=\"row\">\r\n      <div class=\"col-12\">\r\n        <button\r\n          class=\"btn btn-primary btn-lg btn-block py-3\"\r\n          (click)=\"addToBookingClick()\"\r\n        >\r\n          Create Booking\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BookingListItemComponent",
            "id": "component-BookingListItemComponent-347e21d7bd312cdcf526c055f884223d",
            "file": "src/app/core/booking-list-item/booking-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-booking-list-item",
            "styleUrls": [
                "./booking-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./booking-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "booking",
                    "line": 22,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteBooking",
                    "defaultValue": "new EventEmitter<Booking>()",
                    "line": 11,
                    "type": "EventEmitter"
                },
                {
                    "name": "manageBooking",
                    "defaultValue": "new EventEmitter<Booking>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { Product } from 'src/app/product/models/product.model';\r\n\r\n@Component({\r\n  selector: 'app-booking-list-item',\r\n  templateUrl: './booking-list-item.component.html',\r\n  styleUrls: ['./booking-list-item.component.scss'],\r\n})\r\nexport class BookingListItemComponent implements OnInit {\r\n  @Output() deleteBooking = new EventEmitter<Booking>();\r\n  @Output() manageBooking = new EventEmitter<Booking>();\r\n\r\n  products: Array<Product> = [];\r\n\r\n  private _booking: Booking | undefined;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  @Input() set booking(booking: Booking | undefined) {\r\n    this._booking = booking;\r\n\r\n    this._booking?.products.forEach((p) => {\r\n      this.products.push(p);\r\n      p.accessories.forEach((a) => {\r\n        this.products.push(a);\r\n      });\r\n    });\r\n  }\r\n\r\n  get booking(): Booking | undefined {\r\n    return this._booking;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".small-grey-font {\r\n  color: #c4c4c4;\r\n  font-size: 14px;\r\n  font-family: AvenirLTStd-Light;\r\n}\r\n\r\n.plus {\r\n  width: 17px;\r\n}\r\n\r\nimg {\r\n  max-height: 80px;\r\n}\r\n\r\n@media (max-width: 991px) {\r\n  .card-shadow {\r\n    padding: 1rem;\r\n    box-shadow: 0px 0px 50px rgba(196, 196, 196, 0.3);\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./booking-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "booking": {
                    "name": "booking",
                    "setSignature": {
                        "name": "booking",
                        "type": "void",
                        "args": [
                            {
                                "name": "booking",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "booking",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "booking",
                        "type": "",
                        "returnType": "Booking | undefined",
                        "line": 33
                    }
                }
            },
            "templateData": "<div class=\"row justify-content-between align-items-center no-gutters card-shadow mt-3\">\r\n  <div class=\"col-lg-1 col-md-1 col-sm-12 col-xs-12\">\r\n    <img\r\n      class=\"pointer img-fluid float-left\"\r\n      (click)=\"deleteBooking.emit(booking)\"\r\n      src=\"assets/images/close.svg\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"col-lg-3 col-md-12 col-sm-12 col-xs-12 row\">\r\n    <div class=\"col-lg-12\">\r\n      <div class=\"fs-24 avenir-light fw-600 float-left\">\r\n        {{ booking?.yachtName }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\">\r\n      <div class=\"fs-24 avenir-light float-left\">\r\n        {{ booking?.location?.delivery?.name }} -\r\n        {{ booking?.location?.collection?.name }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\">\r\n      <div class=\"fs-24 avenir-light float-left\">\r\n        {{ booking?.period?.fromDate?.day }}.{{\r\n          booking?.period?.fromDate?.month\r\n        }}.{{ booking?.period?.fromDate?.year }} -\r\n        {{ booking?.period?.toDate?.day }}.{{\r\n          booking?.period?.toDate?.month\r\n        }}.{{ booking?.period?.toDate?.year }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-lg-5 col-md-12 col-sm-12\" *ngIf=\"products?.length == 1\">\r\n    <div\r\n      class=\"row no-gutters justify-content-center align-items-center px-3\"\r\n      *ngIf=\"products\"\r\n    >\r\n      <div class=\"col center\">\r\n        <img\r\n          *ngIf=\"booking && products && products!.length > 0\"\r\n          class=\"img-fluid\"\r\n          [src]=\"products![0].imageThumbnail?.url\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-lg-5 col-md-12 col-sm-12\" *ngIf=\"products?.length == 2\">\r\n    <div\r\n      class=\"row no-gutters d-flex justify-content-center align-items-center px-3\"\r\n      *ngIf=\"products\"\r\n    >\r\n      <div class=\"col center\">\r\n        <img\r\n          class=\"img-fluid\"\r\n          *ngIf=\"products!.length > 0\"\r\n          [src]=\"products![0].imageThumbnail?.url\"\r\n        />\r\n      </div>\r\n      <img\r\n        class=\"plus\"\r\n        *ngIf=\"products!.length > 1\"\r\n        src=\"assets/images/plus.svg\"\r\n      />\r\n      <div class=\"col center\" *ngIf=\"products!.length > 1\">\r\n        <img class=\"img-fluid\" [src]=\"products![1].imageThumbnail?.url\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-lg-5 col-md-12 col-sm-12\" *ngIf=\"products.length > 2\">\r\n    <div\r\n      class=\"row no-gutters d-flex justify-content-center align-items-center px-3\"\r\n      *ngIf=\"products\"\r\n    >\r\n      <div class=\"col center\">\r\n        <img\r\n          class=\"img-fluid\"\r\n          *ngIf=\"booking && products && products!.length > 0\"\r\n          [src]=\"products![0].imageThumbnail?.url\"\r\n        />\r\n      </div>\r\n      <img\r\n        class=\"plus\"\r\n        *ngIf=\"products!.length > 1\"\r\n        src=\"assets/images/plus.svg\"\r\n      />\r\n      <div class=\"col center\" *ngIf=\"products!.length > 1\">\r\n        <img class=\"img-fluid\" [src]=\"products![1].imageThumbnail?.url\" />\r\n      </div>\r\n      <img\r\n        class=\"plus\"\r\n        *ngIf=\"products!.length > 2\"\r\n        src=\"assets/images/plus.svg\"\r\n      />\r\n      <div class=\"col center\" *ngIf=\"products!.length > 2\">\r\n        <img class=\"img-fluid\" [src]=\"products![2].imageThumbnail?.url\" />\r\n      </div>\r\n      <div class=\"center\" *ngIf=\"products!.length > 3\">\r\n        <img class=\"plus\" src=\"assets/images/plus.svg\" />\r\n        <div class=\"fs-30 pl-2 tyros-reg\">\r\n          {{ products!.length - 3 }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-lg-3 col-md-12 col-sm-12 row\">\r\n    <div class=\"col-lg-12\">\r\n      <div\r\n        *ngIf=\"booking?.availability && !booking?.checkingAvailability\"\r\n        class=\"fs-24 tyros-reg float-right\"\r\n      >\r\n        €{{ booking?.availability?.grandTotalPrice }}\r\n      </div>\r\n      <div\r\n        *ngIf=\"booking?.checkingAvailability\"\r\n        class=\"fs-24 tyros-reg float-right\"\r\n      >\r\n        Loading...\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\">\r\n      <p class=\"small-grey-font float-right\">Total excl. Security Deposit</p>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\">\r\n      <button class=\"btn btn-primary btn-block\" (click)=\"manageBooking.emit()\">\r\n        MANAGE\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BookingOverviewComponent",
            "id": "component-BookingOverviewComponent-d9dfc882bc81d9fbb28eb4f1079a4588",
            "file": "src/app/booking/pages/booking-overview/booking-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-booking-overview",
            "styleUrls": [
                "./booking-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./booking-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availability",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "lastAvailabilityCheck",
                    "defaultValue": "'minutes ago'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loadingAvailabilityCheck",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "logisticsFee",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "rentalPeriod",
                    "defaultValue": "'0 days'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "quantityChanged",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        },
                        {
                            "name": "quantity",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recheckAvailability",
                    "args": [
                        {
                            "name": "force",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "force",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeProductFromBooking",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 155,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport * as moment from 'moment';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { Booking } from '../../models/booking.model';\r\nimport { BookingService } from '../../services/bookings.service';\r\n\r\n@Component({\r\n  selector: 'app-booking-overview',\r\n  templateUrl: './booking-overview.component.html',\r\n  styleUrls: ['./booking-overview.component.scss'],\r\n})\r\nexport class BookingOverviewComponent implements OnInit {\r\n  booking: Booking | undefined;\r\n  availability: any = null;\r\n  rentalPeriod: string = '0 days';\r\n  logisticsFee: number = 0;\r\n  lastAvailabilityCheck: string = 'minutes ago';\r\n  loadingAvailabilityCheck: boolean = false;\r\n  products: Array<Product> = [];\r\n  show: boolean = false;\r\n  user: any = null;\r\n  isAvailable: boolean = true;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private bookingService: BookingService,\r\n    private router: Router,\r\n    private ngAuthService: NgAuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.activatedRoute.paramMap.subscribe((params) => {\r\n      const bookingId = params.get('booking_id');\r\n      this.booking = this.bookingService.getBookingById(bookingId);\r\n      if (!this.booking) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n\r\n      this.recheckAvailability(true);\r\n    });\r\n  }\r\n\r\n  async recheckAvailability(force: boolean) {\r\n    if (!this.booking) return;\r\n\r\n    const daysOfPeriod = moment(this.booking.period.toDate).diff(\r\n      moment(this.booking.period.fromDate),\r\n      'days'\r\n    );\r\n    this.rentalPeriod = `${daysOfPeriod} days`;\r\n\r\n    if (!force && this.booking.availability && this.booking.checkedAvailabilityOn) {\r\n      const minutesAgoChecked = moment(this.booking.checkedAvailabilityOn).diff(\r\n        moment(),\r\n        'minutes'\r\n      );\r\n      if (minutesAgoChecked < 10) {\r\n        this.availability = this.booking.availability;\r\n      } else {\r\n        this.loadingAvailabilityCheck = true;\r\n        this.availability = await this.bookingService.productsAvailability(\r\n          this.booking\r\n        );\r\n        this.lastAvailabilityCheck = moment(\r\n          this.booking.checkedAvailabilityOn\r\n        ).fromNow();\r\n        this.loadingAvailabilityCheck = false;\r\n      }\r\n    } else {\r\n      this.loadingAvailabilityCheck = true;\r\n      this.availability = await this.bookingService.productsAvailability(\r\n        this.booking\r\n      );\r\n      this.lastAvailabilityCheck = moment(\r\n        this.booking.checkedAvailabilityOn\r\n      ).fromNow();\r\n      this.loadingAvailabilityCheck = false;\r\n    }\r\n\r\n    this.products = [];\r\n    this.booking?.products.forEach((p) => {\r\n      const availableProduct = this.availability.products.find(\r\n        (ap: any) => ap.id === p.id\r\n      );\r\n      if (!availableProduct) {\r\n        console.log('Available product not found');\r\n        return;\r\n      }\r\n      p.quantity = availableProduct.quantity;\r\n      p.totalPrice = availableProduct.totalPrice;\r\n      p.availabilityState = availableProduct.availabilityState;\r\n\r\n      if ((p.availabilityState === \"NOT_AVAILABLE\") || !this.isAvailable) {\r\n        this.isAvailable = false;\r\n      } else {\r\n        this.isAvailable = true;\r\n      }\r\n\r\n      p.note = availableProduct.note;\r\n\r\n      // TODO: Temp, remove if changing API\r\n      p.price =\r\n        Number(p.totalPrice) / Number(daysOfPeriod) / Number(p.quantity);\r\n\r\n      this.products.push(p);\r\n      p.accessories.forEach((a) => {\r\n        const availableAccessory = availableProduct.accessories.find(\r\n          (ac: any) => ac.id === a.id\r\n        );\r\n        if (!availableAccessory) {\r\n          console.log('Available accessory not found');\r\n          return;\r\n        }\r\n        a.quantity = availableAccessory.quantity;\r\n        a.totalPrice = availableAccessory.totalPrice;\r\n        a.availabilityState = availableAccessory.availabilityState;\r\n\r\n        if ((a.availabilityState === \"NOT_AVAILABLE\") || !this.isAvailable) {\r\n          this.isAvailable = false;\r\n        } else {\r\n          this.isAvailable = true;\r\n        }\r\n\r\n        // TODO: Temp, remove if changing API\r\n        p.totalPrice = Number(p.totalPrice) - Number(a.totalPrice);\r\n        p.price =\r\n          Number(p.totalPrice) / Number(daysOfPeriod) / Number(p.quantity);\r\n        a.price =\r\n          Number(a.totalPrice) / Number(daysOfPeriod) / Number(a.quantity);\r\n\r\n        this.products.push(a);\r\n      });\r\n    });\r\n\r\n    this.logisticsFee =\r\n      Number(this.availability.totalDeliveryOnBoard) +\r\n      Number(this.availability.totalHandlingCosts) +\r\n      Number(this.availability.totalRelocationFees) +\r\n      Number(this.availability.totalShippingCosts);\r\n  }\r\n\r\n  isValid(): boolean {\r\n    return this.isAvailable;\r\n  }\r\n\r\n  async removeProductFromBooking(product: Product) {\r\n    this.products = [];\r\n\r\n    if (product.type === 'Product') {\r\n      const b = await this.bookingService.removeProduct(this.booking!, product);\r\n      if (!b) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n    } else {\r\n      this.bookingService.removeAccessory(this.booking!, product);\r\n    }\r\n\r\n    await this.recheckAvailability(true);\r\n  }\r\n\r\n  quantityChanged(product: Product, quantity: number) {\r\n    this.products = [];\r\n\r\n    if (product.type === 'Product') {\r\n      const b = this.bookingService.changeProductQuantity(\r\n        this.booking!,\r\n        product,\r\n        quantity\r\n      );\r\n      if (!b) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n    } else {\r\n      this.bookingService.changeAccessoryQuantity(\r\n        this.booking!,\r\n        product,\r\n        quantity\r\n      );\r\n    }\r\n\r\n    this.recheckAvailability(true);\r\n  }\r\n\r\n  toggle() {\r\n    this.show = !this.show;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n  box-shadow: 0px 0px 50px rgba(196, 196, 196, 0.3);\r\n  border-radius: 2px;\r\n  border: none;\r\n}\r\n\r\n.available {\r\n  object-fit: contain;\r\n  max-height: 24px;\r\n}\r\n\r\n.pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n#custom-panel {\r\n  border-bottom: 0px solid white !important;\r\n}\r\n#custom-panel-1-header {\r\n  padding: 0rem !important;\r\n}\r\n\r\n.rotate-img-90 {\r\n  -webkit-transform: rotate(90deg);\r\n  -moz-transform: rotate(90deg);\r\n  -ms-transform: rotate(90deg);\r\n  -o-transform: rotate(90deg);\r\n  transform: rotate(90deg);\r\n}\r\n\r\n.flex {\r\n  display: flex;\r\n}\r\n\r\n@media screen and (min-width: 768px) {\r\n  .price {\r\n    width: 140px;\r\n    max-width: 140px;\r\n    text-align: right;\r\n  }\r\n\r\n  .column {\r\n    width: 360px;\r\n    max-width: 360px;\r\n  }\r\n\r\n  .products-div {\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .card-shadow {\r\n    padding: 0;\r\n    box-shadow: 0px 0px 0px rgba(196, 196, 196, 0.3);\r\n  }\r\n  .table-max {\r\n    width: 50%;\r\n    display: flex;\r\n  }\r\n\r\n  .img {\r\n    object-fit: contain;\r\n    max-height: 80px;\r\n    width: 110px;\r\n    max-width: 110px;\r\n  }\r\n\r\n  .mobile-icon{\r\n    display:none!important;\r\n  }\r\n\r\n  .show-on-mobile{\r\n    display: none!important;\r\n  }\r\n\r\n  #layout {\r\n    width: 90%;\r\n  }\r\n\r\n  .w33 {\r\n    width: 33%;\r\n  }\r\n\r\n  .display-max {\r\n    display: flex;\r\n    width: 50%;\r\n    justify-content: space-between;\r\n  }\r\n}\r\n\r\n@media (max-width: 1000px) {\r\n  .column {\r\n    width: auto;\r\n  }\r\n}\r\n\r\n@media (max-width: 767px) {\r\n  .price {\r\n    width: 130px;\r\n    max-width: 130px;\r\n    text-align: left;\r\n  }\r\n\r\n  .column {\r\n    width: 400px;\r\n    max-width: 400px;\r\n  }\r\n\r\n  .products-div {\r\n    align-items: left;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .mobile {\r\n    display: none !important;\r\n  }\r\n\r\n  .mobile-flex{\r\n    display:flex;\r\n    padding-bottom: 1rem;\r\n  }\r\n\r\n  .display-max {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .img {\r\n    object-fit: contain;\r\n    max-width: 85%;\r\n  }\r\n\r\n  .card-shadow {\r\n    padding: 1rem;\r\n    box-shadow: 0px 0px 50px rgba(196, 196, 196, 0.3);\r\n  }\r\n\r\n  .mobile-margin{\r\n    margin-top:1rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .mobile-icon{\r\n    text-align: right;\r\n  }\r\n\r\n  .show-on-mobile{\r\n    text-align: left;\r\n  }\r\n\r\n  .centered {\r\n    text-align: center;\r\n  }\r\n\r\n  .btn-flex-auto {\r\n    flex: auto;\r\n  }\r\n}",
                    "styleUrl": "./booking-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"fs-36 tyros-reg mt-5 mb-2 centered\">\r\n    {{ booking?.yachtName || \"My Booking\" }} |\r\n    {{ booking?.location?.delivery?.name }} -\r\n    {{ booking?.location?.collection?.name }}\r\n  </div>\r\n  <div class=\"fs-24 avenir-light mb-2 centered\">\r\n    {{ booking?.period?.fromDate?.day }}.{{\r\n      booking?.period?.fromDate?.month\r\n    }}.{{ booking?.period?.fromDate?.year }} -\r\n    {{ booking?.period?.toDate?.day }}.{{ booking?.period?.toDate?.month }}.{{\r\n      booking?.period?.toDate?.year\r\n    }}\r\n  </div>\r\n  <div class=\"fs-18 avenir-light mb-2 mobile\">\r\n    <b>Availability Check:&nbsp;</b>\r\n    <ng-template [ngIf]=\"!loadingAvailabilityCheck\">{{\r\n      lastAvailabilityCheck\r\n    }}</ng-template>\r\n    <ng-template [ngIf]=\"loadingAvailabilityCheck\">Loading...</ng-template>\r\n  </div>\r\n\r\n  <button\r\n    [disabled]=\"loadingAvailabilityCheck\"\r\n    class=\"btn btn-secondary px-5 mb-5 mobile\"\r\n    (click)=\"recheckAvailability(true)\"\r\n  >\r\n    RECHECK AVAILABILITY\r\n    <img class=\"ml-3\" src=\"assets/images/history-orange.svg\" />\r\n  </button>\r\n\r\n  <div class=\"d-flex justify-content-end\">\r\n    <button class=\"btn btn-lg btn-secondary px-5 mb-2 mobile\">SHARE</button>\r\n    <button class=\"btn btn-lg btn-secondary px-5 mx-2 mb-2 mobile\">\r\n      PRINT QUOTATION\r\n    </button>\r\n    <button\r\n      class=\"btn btn-lg btn-primary px-5 mb-2 btn-flex-auto\"\r\n      [disabled]=\"!isValid()\"\r\n      routerLink=\"checkout\"\r\n    >\r\n      CHECKOUT\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"mobile\">\r\n    <hr />\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-between mobile\">\r\n    <div class=\"w-50 fs-18 avenir-light\">Product</div>\r\n    <div class=\"d-flex w-50\">\r\n      <div class=\"fs-18 w-33 avenir-light\">QTY</div>\r\n      <div class=\"fs-18 w-33 avenir-light\">Availability</div>\r\n      <div class=\"fs-18 w-33 avenir-light text-center\">Price</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"mobile\">\r\n    <hr />\r\n  </div>\r\n\r\n  <div *ngFor=\"let product of products\" class=\"mobile-margin\">\r\n    <div class=\"card-shadow flex products-div py-3\">\r\n      <div class=\"table-max\">\r\n        <div class=\"pr-4\">\r\n          <img\r\n            class=\"pointer\"\r\n            (click)=\"removeProductFromBooking(product)\"\r\n            src=\"assets/images/close.svg\"\r\n          />\r\n        </div>\r\n        <div class=\"text-center\">\r\n          <img class=\"img\" [src]=\"product.imageThumbnail?.url\" />\r\n        </div>\r\n        <div class=\"mobile-flex\">\r\n          <div class=\"flex column\">\r\n            <div class=\"fs-24 tyros-reg\">{{ product.name }}</div>\r\n            <div class=\"fs-18 avenir-light grey\">\r\n              {{ product.price | number : '1.0-2' }} € / Day\r\n            </div>\r\n            <div *ngIf=\"product.note\" class=\"fs-18 avenir-light grey mobile\">\r\n              {{ product?.note }}\r\n            </div>\r\n          </div>\r\n          <div class=\"mobile-icon\">\r\n            <div\r\n              *ngIf=\"product.availabilityState === 'AVAILABLE'\"\r\n              class=\"d-flex\"\r\n            >\r\n              <button\r\n                *ngIf=\"!product.note\"\r\n                type=\"button\"\r\n                class=\"btn btn-transparent btn-no-border mr-2\"\r\n                placement=\"left\"\r\n                ngbPopover=\"This item is available for your dates.\"\r\n                popoverTitle=\"Available\"\r\n              >\r\n                <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n              </button>\r\n\r\n              <button\r\n                *ngIf=\"product.note\"\r\n                type=\"button\"\r\n                class=\"btn btn-transparent btn-no-border mr-2\"\r\n                placement=\"left\"\r\n                ngbPopover=\"{{ product.note }}\"\r\n                popoverTitle=\"Available\"\r\n              >\r\n                <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n              </button>\r\n            </div>\r\n            <div\r\n              *ngIf=\"product.availabilityState === 'NOT_AVAILABLE'\"\r\n              class=\"d-flex\"\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-transparent btn-no-border mr-2\"\r\n                placement=\"left\"\r\n                ngbPopover=\"{{ product.note }}\"\r\n                popoverTitle=\"Not Available\"\r\n              >\r\n                <img class=\"pointer\" src=\"assets/images/alert-orange.svg\" />\r\n              </button>\r\n            </div>\r\n            <div\r\n              *ngIf=\"product.availabilityState === 'AVAILABLE_BUT_DELAYED'\"\r\n              class=\"d-flex\"\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-transparent btn-no-border mr-2\"\r\n                placement=\"left\"\r\n                ngbPopover=\"{{ product.note }}\"\r\n                popoverTitle=\"Delayed\"\r\n              >\r\n                <img class=\"pointer\" src=\"assets/images/alert.svg\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"display-max\">\r\n        <div class=\"show-on-mobile\">\r\n          <div class=\"fs-24 tyros-reg price\">€{{ product.totalPrice | number : '1.0-2' }}</div>\r\n        </div>\r\n        <div>\r\n          <app-counter\r\n            [counter]=\"product.quantity\"\r\n            (counterChange)=\"quantityChanged(product, $event)\"\r\n          >\r\n          </app-counter>\r\n        </div>\r\n        <div class=\"mobile\">\r\n          <div *ngIf=\"product.availabilityState === 'AVAILABLE'\" class=\"d-flex\">\r\n            <button\r\n              *ngIf=\"!product.note\"\r\n              type=\"button\"\r\n              class=\"btn btn-transparent mr-2 btn-no-border\"\r\n              placement=\"top\"\r\n              ngbPopover=\"This item is available for your dates.\"\r\n              popoverTitle=\"Available\"\r\n            >\r\n              <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n            </button>\r\n            <button\r\n              *ngIf=\"product.note\"\r\n              type=\"button\"\r\n              class=\"btn btn-transparent mr-2 btn-no-border\"\r\n              placement=\"top\"\r\n              ngbPopover=\"{{ product.note }}\"\r\n              popoverTitle=\"Available\"\r\n            >\r\n              <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n            </button>\r\n          </div>\r\n          <div\r\n            *ngIf=\"product.availabilityState === 'NOT_AVAILABLE'\"\r\n            class=\"d-flex\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-transparent mr-2 btn-no-border\"\r\n              placement=\"top\"\r\n              ngbPopover=\"{{ product.note }}\"\r\n              popoverTitle=\"Not Available\"\r\n            >\r\n              <img class=\"pointer\" src=\"assets/images/alert-orange.svg\" />\r\n            </button>\r\n          </div>\r\n          <div\r\n            *ngIf=\"product.availabilityState === 'AVAILABLE_BUT_DELAYED'\"\r\n            class=\"d-flex\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-transparent mr-2 btn-no-border\"\r\n              placement=\"top\"\r\n              ngbPopover=\"{{ product.note }}\"\r\n              popoverTitle=\"Delayed\"\r\n            >\r\n              <img class=\"pointer\" src=\"assets/images/alert.svg\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"mobile\">\r\n          <div class=\"fs-24 tyros-reg price\">€{{ product.totalPrice | number : '1.0-2' }}</div>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"product.note\" class=\"show-on-mobile flex\">\r\n        <div *ngIf=\"product.availabilityState === 'AVAILABLE'\" class=\"d-flex\">\r\n          <button\r\n            *ngIf=\"!product.note\"\r\n            type=\"button\"\r\n            class=\"btn btn-transparent btn-no-border mr-2\"\r\n            placement=\"right\"\r\n            ngbPopover=\"This item is available for your dates.\"\r\n            popoverTitle=\"Available\"\r\n          >\r\n            <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n          </button>\r\n          <button\r\n            *ngIf=\"product.note\"\r\n            type=\"button\"\r\n            class=\"btn btn-transparent btn-no-border mr-2\"\r\n            placement=\"right\"\r\n            ngbPopover=\"{{ product.note }}\"\r\n            popoverTitle=\"Available\"\r\n          >\r\n            <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n          </button>\r\n        </div>\r\n        <div\r\n          *ngIf=\"product.availabilityState === 'NOT_AVAILABLE'\"\r\n          class=\"d-flex\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-transparent btn-no-border mr-2\"\r\n            placement=\"right\"\r\n            ngbPopover=\"{{ product.note }}\"\r\n            popoverTitle=\"Not Available\"\r\n          >\r\n            <img class=\"pointer\" src=\"assets/images/alert-orange.svg\" />\r\n          </button>\r\n        </div>\r\n        <div\r\n          *ngIf=\"product.availabilityState === 'AVAILABLE_BUT_DELAYED'\"\r\n          class=\"d-flex\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-transparent btn-no-border mr-2\"\r\n            placement=\"right\"\r\n            ngbPopover=\"{{ product.note }}\"\r\n            popoverTitle=\"Delayed\"\r\n          >\r\n            <img class=\"pointer\" src=\"assets/images/alert.svg\" />\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"fs-18 avenir-light grey\">\r\n          {{ product?.note }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"availability\" class=\"card px-5 py-5 mt-5\">\r\n    <div class=\"fs-24 tyros-reg\">Booking Overview</div>\r\n    <hr class=\"my-5\" />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">Rental Period</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">{{ rentalPeriod }}</div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">Delivery</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.period?.fromDate?.day }}.{{\r\n          booking?.period?.fromDate?.month\r\n        }}.{{ booking?.period?.fromDate?.year }}\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\"></div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.location?.delivery?.name }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">Collection</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.period?.toDate?.day }}.{{\r\n          booking?.period?.toDate?.month\r\n        }}.{{ booking?.period?.toDate?.year }}\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\"></div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.location?.collection?.name }}\r\n      </div>\r\n    </div>\r\n\r\n    <hr class=\"my-5\" />\r\n\r\n    <div *ngFor=\"let p of booking?.products; let i = index\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light\">{{ i === 0 ? \"Items\" : \"\" }}</div>\r\n        <div class=\"col-lg-8 avenir-light text-right\">\r\n          {{ p.quantity }} x {{ p.name }}\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngFor=\"let a of p.accessories\">\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-4 avenir-light\"></div>\r\n          <div class=\"col-lg-8 avenir-light text-right\">\r\n            {{ a.quantity }} x {{ a.name }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n    </div>\r\n    \r\n    <hr class=\"my-5\" />\r\n\r\n    <div class=\"justify-content-between row ml-0 mr-0\">\r\n      <div class=\"avenir-light\">\r\n        Logistics Fees\r\n        <button *ngIf=\"!this.show\" class=\"btn\" (click)=\"toggle()\">\r\n          <img src=\"/assets/images/nav-arrow-right.svg\" alt=\"-\" />\r\n        </button>\r\n        <button *ngIf=\"this.show\" class=\"btn rotate-img-90\" (click)=\"toggle()\">\r\n          <img src=\"/assets/images/nav-arrow-right.svg\" alt=\"-\" />\r\n        </button>\r\n      </div>\r\n      <div class=\"mr-0 avenir-light\">€{{ logisticsFee | number: \"1.2\" }}</div>\r\n    </div>\r\n\r\n    <div *ngIf=\"this.show\" class=\"pl-2 pb-2\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Delivery & Pickup</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalDeliveryOnBoard }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Shipping</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalShippingCosts | number : '1.0-2' }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Relocation</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalRelocationFees | number : '1.0-2' }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Handling</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalHandlingCosts | number : '1.0-2' }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">VAT as 0%*</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">€0.00</div>\r\n    </div>\r\n\r\n    <hr class=\"my-5\" />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">TOTAL FOR PAYMENT</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        €{{ availability?.grandTotalPrice | number : '1.0-2' }}\r\n      </div>\r\n    </div>\r\n\r\n    <hr class=\"my-5\" />\r\n\r\n    <!-- <div class=\"fs-24 avenir-light grey right\">\r\n      *VAT is free if you provide a VAT number of a EU registered company for\r\n      shipping <br />\r\n      inside the European Union. Companies registered outside also get VAT free\r\n      for exports <br />\r\n      provided they share a valid VAT number.\r\n    </div> -->\r\n    <div class=\"d-flex justify-content-center align-items-center\">\r\n      <button class=\"btn btn-lg btn-secondary px-5 mb-2 mobile\">SHARE</button>\r\n      <button class=\"btn btn-lg btn-secondary px-5 mx-2 mb-2 mobile\">\r\n        PRINT QUOTATION\r\n      </button>\r\n      <button\r\n        class=\"btn btn-lg btn-primary px-5 mb-2 btn-flex-auto\"\r\n        [disabled]=\"!isValid()\"\r\n        routerLink=\"checkout\"\r\n      >\r\n        CHECKOUT\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"pb-4\">\r\n    <app-we-specialize></app-we-specialize>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BookingSelectComponent",
            "id": "component-BookingSelectComponent-ae88a3f0a5b368d5d03f492678832524",
            "file": "src/app/core/booking-select/booking-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NgbDropdownConfig"
                }
            ],
            "selector": "app-booking-select",
            "styleUrls": [
                "./booking-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./booking-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "booking",
                    "line": 12,
                    "type": "Booking | undefined"
                },
                {
                    "name": "bookings",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "Array<Booking>"
                }
            ],
            "outputsClass": [
                {
                    "name": "bookingChange",
                    "defaultValue": "new EventEmitter<Booking | undefined>()",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "manageBookingClick",
                    "defaultValue": "new EventEmitter<Booking>()",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "newBooking",
                    "defaultValue": "new EventEmitter<Booking>()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "blankBooking",
                    "defaultValue": "undefined",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "bookingClick",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBookingTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "manageBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newBookingClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { NgbDropdownConfig } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\n\r\n@Component({\r\n  selector: 'app-booking-select',\r\n  templateUrl: './booking-select.component.html',\r\n  styleUrls: ['./booking-select.component.scss'],\r\n  providers: [NgbDropdownConfig],\r\n})\r\nexport class BookingSelectComponent implements OnInit {\r\n  @Input() booking: Booking | undefined;\r\n  @Output() bookingChange = new EventEmitter<Booking | undefined>();\r\n\r\n  @Input() bookings: Array<Booking> = [];\r\n\r\n  @Output() newBooking = new EventEmitter<Booking>();\r\n  @Output() manageBookingClick = new EventEmitter<Booking>();\r\n\r\n  blankBooking = undefined; // For selects ngValue to register null\r\n\r\n  constructor(config: NgbDropdownConfig) {\r\n    config.container = null;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  // Greece - Capri, dd/mm/YYYY - dd/mm/YYYY\r\n  getBookingTitle() {\r\n    if (this.booking === this.blankBooking) return 'Get Started';\r\n\r\n    let title = 'New Booking';\r\n\r\n    if (!this.booking.location) return title;\r\n    if (!this.booking.location.delivery) return title;\r\n    if (!this.booking.location.collection) return title;\r\n\r\n    title = `${this.booking.location.collection?.name} - ${this.booking.location.delivery?.name}`;\r\n\r\n    if (!this.booking.period) return title;\r\n    if (!this.booking.period.start) return title;\r\n    if (!this.booking.period.end) return title;\r\n\r\n    title = `${this.booking.location.collection?.name} - ${this.booking.location.delivery?.name}, ${this.booking.period?.fromDate.day}/${this.booking.period?.fromDate.month}/${this.booking.period?.fromDate.year} - ${this.booking.period.toDate.day}/${this.booking.period.toDate.month}/${this.booking.period.toDate.year}`;\r\n\r\n    return title;\r\n  }\r\n\r\n  newBookingClick() {\r\n    this.booking = new Booking();\r\n    this.newBooking.emit(this.booking);\r\n  }\r\n\r\n  bookingClick(booking: Booking) {\r\n    this.booking = booking;\r\n    this.bookingChange.emit(this.booking);\r\n  }\r\n\r\n  manageBooking(booking: Booking) {\r\n    this.manageBookingClick.emit(booking);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select-container {\r\n  background: #ffffff;\r\n  border: 1px solid #c4c4c4;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.select-container button {\r\n  border: none;\r\n  font-size: 16px;\r\n  outline: 0;\r\n\r\n  -moz-appearance: none;\r\n  -webkit-appearance: none;\r\n\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n}\r\n\r\nlabel {\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 10px;\r\n  line-height: 14px;\r\n  letter-spacing: 0.2px;\r\n  text-transform: uppercase;\r\n  color: #19303b;\r\n}\r\n\r\n.grey {\r\n  color: #c4c4c4 !important;\r\n}\r\n\r\n.new-booking {\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  line-height: 24px;\r\n  letter-spacing: 0px;\r\n  text-align: left;\r\n}\r\n\r\n.booking-dropdown-menu {\r\n  width: 100%;\r\n}\r\n\r\n.dropdown-divider {\r\n  margin: 0.5rem 1.2rem !important;\r\n}\r\n\r\n.p-style-2 {\r\n  /* <Mobile P Style 2> Avenir LT Std 35 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 18px;\r\n  line-height: 22px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-4 {\r\n  /* <Mobile Style 4> Tyros Pro SemiBold 16 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #19303b;\r\n}\r\n",
                    "styleUrl": "./booking-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "NgbDropdownConfig"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "NgbDropdownConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"select-container pt-1 pb-1\"\r\n  (click)=\"$event.stopPropagation(); bookingDropdown.open()\"\r\n>\r\n  <label *ngIf=\"bookings.length > 0\" class=\"mb-n1 pl-3 mt-2\">Select a Booking</label>\r\n  <label *ngIf=\"bookings.length === 0\" class=\"mb-n1 pl-3 mt-2\">Check Availability</label>\r\n  <div ngbDropdown #bookingDropdown=\"ngbDropdown\" class=\"mt-n1 mb-2\">\r\n    <div class=\"d-flex justify-content-between\">\r\n      <button\r\n        class=\"btn btn-lg p-0 pl-3 p-style-2\"\r\n        type=\"button\"\r\n        (click)=\"$event.stopPropagation(); bookingDropdown.open()\"\r\n        [ngClass]=\"{ grey: booking === blankBooking }\"\r\n      >\r\n        {{ getBookingTitle() }}\r\n      </button>\r\n      <img src=\"assets/images/dropdown-arrow.svg\" class=\"mr-3 pb-3\" />\r\n    </div>\r\n    <div class=\"booking-dropdown-menu mt-3\" ngbDropdownMenu>\r\n      <button\r\n        ngbDropdownItem\r\n        (click)=\"newBookingClick()\"\r\n        class=\"new-booking mt-2 mb-3\"\r\n      >\r\n        <img src=\"assets/images/plus-orange.svg\" class=\"mr-2\" /> New Booking\r\n      </button>\r\n      <div *ngIf=\"bookings && bookings.length > 0\" class=\"dropdown-divider\"></div>\r\n      <div\r\n        *ngFor=\"let b of bookings; index as i\"\r\n        ngbDropdownItem\r\n        (click)=\"bookingClick(b)\"\r\n        class=\"px-0\"\r\n      >\r\n        <div class=\"container-fluid\">\r\n          <div class=\"row\">\r\n            <div class=\"col-1 align-self-center pr-0\">\r\n              <img class=\"pl-2\" src=\"assets/images/fish-orange.svg\" />\r\n            </div>\r\n            <div class=\"col-7 pl-0\">\r\n              <p *ngIf=\"b.yachtName\" class=\"p-style-4 pb-0 mb-0\">\r\n                {{ b.yachtName }}\r\n              </p>\r\n              <p *ngIf=\"!b.yachtName\" class=\"p-style-4 pb-0 mb-0\">\r\n                Booking # {{ i + 1 }}\r\n              </p>\r\n              <p class=\"p-style-2 pb-0 mb-0\">\r\n                {{ b.location?.collection?.name }} -\r\n                {{ b.location?.delivery?.name }}\r\n              </p>\r\n              <p class=\"p-style-2 pb-0 mb-0\">\r\n                {{ b.period?.fromDate?.day }}.{{ b.period?.fromDate?.month }}.{{\r\n                  b.period?.fromDate?.year\r\n                }}\r\n                - {{ b.period?.toDate?.day }}.{{ b.period?.toDate?.month }}.{{\r\n                  b.period?.toDate?.year\r\n                }}\r\n              </p>\r\n            </div>\r\n            <div class=\"col-4 align-self-center\">\r\n              <button class=\"btn btn-transparent\" (click)=\"manageBooking(b)\">\r\n                Manage <img src=\"assets/images/nav-arrow-right-orange.svg\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"i + 1 !== bookings.length\" class=\"dropdown-divider\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-2782203d268518811baff6532e9b518c",
            "file": "src/app/core/breadcrumbs/breadcrumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumbs",
            "styleUrls": [
                "./breadcrumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backPath",
                    "defaultValue": "environment.home",
                    "line": 11
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\r\n    { path: '', label: 'Rentals', active: false, disabled: false },\r\n  ]",
                    "line": 13,
                    "type": "Array<Breadcrumb>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Breadcrumb } from '../models/breadcrumb.model';\r\n\r\n@Component({\r\n  selector: 'app-breadcrumbs',\r\n  templateUrl: './breadcrumbs.component.html',\r\n  styleUrls: ['./breadcrumbs.component.scss'],\r\n})\r\nexport class BreadcrumbsComponent implements OnInit {\r\n  @Input() backPath = environment.home;\r\n\r\n  @Input() breadcrumbs: Array<Breadcrumb> = [\r\n    { path: '', label: 'Rentals', active: false, disabled: false },\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  back() {\r\n    if (history.length === 0) {\r\n      location.href = this.backPath;\r\n      return;\r\n    }\r\n\r\n    history.back();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".breadcrumb-item + .breadcrumb-item {\r\n  padding-left: 0.5rem;\r\n\r\n  //styleName: <NAV Style> Avenir LT Std 55 Roman 16;\r\n  font-family: \"AvenirLTStd-Roman\";\r\n  font-size: 18px;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  line-height: 22px;\r\n  letter-spacing: 0.25px;\r\n  text-align: center;\r\n}\r\n\r\n.breadcrumb-item + .breadcrumb-item::before {\r\n  display: block;\r\n  content: \" \";\r\n  background-image: url(\"/assets/images/nav-arrow-right.svg\");\r\n  background-size: 10px 10px;\r\n  background-repeat: no-repeat;\r\n  width: 10px;\r\n  height: 10px;\r\n  margin: auto auto;\r\n  padding-right: 1rem;\r\n  margin-top: 5px;\r\n}\r\n\r\n.breadcrumb-item + .breadcrumb-item:nth-child(2)::before {\r\n  content: none;\r\n}\r\n\r\n.breadcrumb-item a {\r\n  color: #19303b;\r\n}\r\n\r\n.breadcrumb-item.active a {\r\n  color: #fab900;\r\n  cursor: default;\r\n}\r\n\r\n.breadcrumb-item a.disabled {\r\n  color: #c4c4c4;\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  .mobile {\r\n    display: none;\r\n  }\r\n\r\n  ol {\r\n    padding-left: 0;\r\n    padding-right: 0;\r\n  }\r\n\r\n  a {\r\n    font-size: 15px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./breadcrumbs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav>\r\n  <ol class=\"breadcrumb bg-transparent\">\r\n    <li class=\"breadcrumb-item mr-2\">\r\n      <div class=\"pointer\" (click)=\"back()\">\r\n        <img class=\"mobile mb-1\" src=\"assets/images/nav-arrow-left.svg\" />\r\n      </div>\r\n    </li>\r\n    <li\r\n      *ngFor=\"let breadcrumb of breadcrumbs\"\r\n      class=\"breadcrumb-item\"\r\n      [ngClass]=\"{ active: breadcrumb.active }\"\r\n    >\r\n      <a\r\n        *ngIf=\"breadcrumb.disabled === false && breadcrumb.absolutePath\"\r\n        [href]=\"breadcrumb.absolutePath\"\r\n        [ngClass]=\"{ disabled: breadcrumb.disabled }\"\r\n        >{{ breadcrumb.label }}</a\r\n      >\r\n      <a\r\n        *ngIf=\"breadcrumb.disabled === false && breadcrumb.path\"\r\n        [routerLink]=\"breadcrumb.path\"\r\n        [ngClass]=\"{ disabled: breadcrumb.disabled }\"\r\n        >{{ breadcrumb.label }}</a\r\n      >\r\n      <a\r\n        *ngIf=\"breadcrumb.disabled\"\r\n        [ngClass]=\"{ disabled: breadcrumb.disabled }\"\r\n        >{{ breadcrumb.label }}</a\r\n      >\r\n    </li>\r\n  </ol>\r\n</nav>\r\n"
        },
        {
            "name": "BtnLoveComponent",
            "id": "component-BtnLoveComponent-3ec3467e15babb580275a75f6ca12295",
            "file": "src/app/core/btn-love/btn-love.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-btn-love",
            "styleUrls": [
                "./btn-love.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./btn-love.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loved",
                    "defaultValue": "false",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "lovedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "triggerLove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-btn-love',\r\n  templateUrl: './btn-love.component.html',\r\n  styleUrls: ['./btn-love.component.scss'],\r\n})\r\nexport class BtnLoveComponent implements OnInit {\r\n  @Input() loved: boolean = false;\r\n\r\n  @Output() lovedChange = new EventEmitter<boolean>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  triggerLove() {\r\n    this.loved = !this.loved;\r\n    this.lovedChange.emit(this.loved);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./btn-love.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button class=\"btn btn-transparent px-0 py-2 btn-no-border\" (click)=\"triggerLove()\">\r\n  <img\r\n    *ngIf=\"loved\"\r\n    src=\"assets/images/heart-filled.svg\"\r\n    width=\"26\"\r\n    height=\"24\"\r\n  />\r\n  <img *ngIf=\"!loved\" src=\"assets/images/heart.svg\" width=\"26\" height=\"24\" />\r\n</button>\r\n"
        },
        {
            "name": "CardGridComponent",
            "id": "component-CardGridComponent-bf7e53d4fcb0aa8e12213a72bd9d182e",
            "file": "src/app/core/card-grid/card-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-grid",
            "styleUrls": [
                "./card-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-card-grid',\r\n  templateUrl: './card-grid.component.html',\r\n  styleUrls: ['./card-grid.component.scss']\r\n})\r\nexport class CardGridComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".rent-button {\r\n  display: none;\r\n}\r\n\r\n.col-6 {\r\n  display: none;\r\n}\r\n\r\n.card-shadow {\r\n  box-shadow: rgba(3, 8, 20, 0.1) 0px 0.15rem 0.5rem,\r\n  rgba(2, 8, 20, 0.1) 0px 0.075rem 0.175rem;\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .mobile {\r\n    display: flex;\r\n  }\r\n\r\n  .rent-button {\r\n    display: contents;\r\n  }\r\n\r\n  .col-6 {\r\n    display: flex;\r\n    align-items: flex-end;\r\n  }\r\n\r\n  .left {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n  }\r\n}",
                    "styleUrl": "./card-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row py-2\">\r\n  <div class=\"col-12 col-sm-6 col-md-4 col-lg-3 d-flex justify-content-center\">\r\n    <div class=\"card card-shadow my-1\" style=\"width: 18rem;\">\r\n      <img src=\"assets/images/pic4.jpg\" class=\"card-img-top\" />\r\n      <div class=\"card-body p-3\">\r\n        <div class=\"row\">\r\n          <div class=\"col left\">\r\n            <div class=\"fs-22 tyros-reg card-title\">Card title</div>\r\n            <p class=\"m-0 fs-14 avenir-light\">Daily rental from</p>\r\n            <p class=\"m-0 fs-20 tyros-reg\">200 $</p>\r\n          </div>\r\n          <div class=\"col-6\">\r\n            <div class=\"rent-button\">\r\n              <button class=\"btn btn-primary btn-block\">RENT</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-12 col-sm-6 col-md-4 col-lg-3 d-flex justify-content-center\">\r\n    <div class=\"card card-shadow my-1\" style=\"width: 18rem;\">\r\n      <img src=\"assets/images/pic4.jpg\" class=\"card-img-top\" />\r\n      <div class=\"card-body p-3\">\r\n        <div class=\"row\">\r\n          <div class=\"col left\">\r\n            <div class=\"fs-22 tyros-reg card-title\">Card title</div>\r\n            <p class=\"m-0 fs-14 avenir-light\">Daily rental from</p>\r\n            <p class=\"m-0 fs-20 tyros-reg\">200 $</p>\r\n          </div>\r\n          <div class=\"col-6\">\r\n            <div class=\"rent-button\">\r\n              <button class=\"btn btn-primary btn-block\">RENT</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-12 col-sm-6 col-md-4 col-lg-3 d-flex justify-content-center\">\r\n    <div class=\"card card-shadow my-1\" style=\"width: 18rem;\">\r\n      <img src=\"assets/images/pic4.jpg\" class=\"card-img-top\" />\r\n      <div class=\"card-body p-3\">\r\n        <div class=\"row\">\r\n          <div class=\"col left\">\r\n            <div class=\"fs-22 tyros-reg card-title\">Card title</div>\r\n            <p class=\"m-0 fs-14 avenir-light\">Daily rental from</p>\r\n            <p class=\"m-0 fs-20 tyros-reg\">200 $</p>\r\n          </div>\r\n          <div class=\"col-6\">\r\n            <div class=\"rent-button\">\r\n              <button class=\"btn btn-primary btn-block\">RENT</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-12 col-sm-6 col-md-4 col-lg-3 d-flex justify-content-center\">\r\n    <div class=\"card card-shadow my-1\" style=\"width: 18rem;\">\r\n      <img src=\"assets/images/pic4.jpg\" class=\"card-img-top\" />\r\n      <div class=\"card-body p-3\">\r\n        <div class=\"row\">\r\n          <div class=\"col left\">\r\n            <div class=\"fs-22 tyros-reg card-title\">Card title</div>\r\n            <p class=\"m-0 fs-14 avenir-light\">Daily rental from</p>\r\n            <p class=\"m-0 fs-20 tyros-reg\">200 $</p>\r\n          </div>\r\n          <div class=\"col-6\">\r\n            <div class=\"rent-button\">\r\n              <button class=\"btn btn-primary btn-block\">RENT</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"d-flex justify-content-center my-3\">\r\n  <i class=\"fs-6 fas fa-circle black px-1\"></i>\r\n  <i class=\"fs-6 fas fa-circle light-grey px-1\"></i>\r\n  <i class=\"fs-6 fas fa-circle light-grey px-1\"></i>\r\n  <i class=\"fs-6 fas fa-circle light-grey px-1\"></i>\r\n</div>\r\n\r\n<div class=\"d-flex justify-content-end align-items-center pointer\">\r\n  <div class=\"fs-14 tyros-reg\">DISCOVER MORE</div>\r\n  <i class=\"fas fa-chevron-right color-primary pl-2\"></i>\r\n</div>\r\n"
        },
        {
            "name": "CheckoutPage",
            "id": "component-CheckoutPage-9b29bda560824fd012127f12bf59f9b5",
            "file": "src/app/booking/pages/checkout/checkout.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkout",
            "styleUrls": [
                "./checkout.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkout.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordion",
                    "type": "NgbAccordion",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'accordion'"
                        }
                    ]
                },
                {
                    "name": "activeIds",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\r\n    { path: '..', label: 'My Booking', active: false, disabled: false },\r\n    { path: '.', label: 'Checkout', active: true, disabled: false },\r\n    { path: '', label: 'Payment', active: false, disabled: true },\r\n  ]",
                    "type": "Array<Breadcrumb>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "countries",
                    "defaultValue": "[]",
                    "type": "Array<Country>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "mobile",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "noInfo",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "roles",
                    "defaultValue": "[\r\n    { key: 'CAPTAIN_OR_CREW', value: 'Captain' },\r\n    { key: 'CHARTER_BROKER_OR_MANAGER', value: 'Manager' },\r\n    { key: 'CHARTER_BROKER_OR_MANAGER', value: 'Charter broker' },\r\n    { key: 'OTHER', value: 'Other' },\r\n  ]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "saved",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "beforeChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "NgbPanelChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "NgbPanelChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCountries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 124,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isBillingDetailsDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 387
                },
                {
                    "name": "isBillingDetailsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 359
                },
                {
                    "name": "isContactInformationValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 234
                },
                {
                    "name": "isDropOffDetailsDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 334
                },
                {
                    "name": "isDropOffDetailsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 324
                },
                {
                    "name": "isPickUpDetailsDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 304
                },
                {
                    "name": "isPickUpDetailsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 292
                },
                {
                    "name": "isYachtInformationDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 276
                },
                {
                    "name": "isYachtInformationValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 258
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "noInfoYet",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272
                },
                {
                    "name": "onBillingCountryChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148
                },
                {
                    "name": "onCountryChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128
                },
                {
                    "name": "onDropOffCountryChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sameAsContactInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179
                },
                {
                    "name": "saveBooking",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397
                },
                {
                    "name": "securityDepositCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227
                },
                {
                    "name": "setActive",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShow",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showBillingDetailsToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 350
                },
                {
                    "name": "showDropOffDetailsToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 316
                },
                {
                    "name": "showPickUpDetailsToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 288
                },
                {
                    "name": "showYachtInformationToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 254
                },
                {
                    "name": "submitBillingDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409
                },
                {
                    "name": "submitContactInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246
                },
                {
                    "name": "submitDropOffDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342
                },
                {
                    "name": "submitPickUpDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 308
                },
                {
                    "name": "submitYachtInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280
                },
                {
                    "name": "termsAndConditionsCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223
                },
                {
                    "name": "useShippingAddress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport { NgbAccordion, NgbPanelChangeEvent } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Breadcrumb } from 'src/app/core/models/breadcrumb.model';\r\nimport { Booking } from '../../models/booking.model';\r\nimport { Country } from '../../models/countries.model';\r\nimport { BookingService } from '../../services/bookings.service';\r\nimport { CountryService } from '../../services/countries.service';\r\n\r\n@Component({\r\n  selector: 'app-checkout',\r\n  templateUrl: './checkout.page.html',\r\n  styleUrls: ['./checkout.page.scss'],\r\n})\r\nexport class CheckoutPage implements OnInit {\r\n  @ViewChild('accordion') accordion!: NgbAccordion;\r\n\r\n  breadcrumbs: Array<Breadcrumb> = [\r\n    { path: '..', label: 'My Booking', active: false, disabled: false },\r\n    { path: '.', label: 'Checkout', active: true, disabled: false },\r\n    { path: '', label: 'Payment', active: false, disabled: true },\r\n  ];\r\n  activeIds: Array<string> = [];\r\n  booking: Booking | undefined;\r\n  noInfo: boolean = false;\r\n  mobile: boolean = false;\r\n  saved: boolean = false;\r\n  countries: Array<Country> = [];\r\n  user: any = null;\r\n  // cities: Array<City> = [];\r\n  // dropOffCities: Array<City> = [];\r\n  // billingCities: Array<City> = [];\r\n\r\n  roles: Array<any> = [\r\n    { key: 'CAPTAIN_OR_CREW', value: 'Captain' },\r\n    { key: 'CHARTER_BROKER_OR_MANAGER', value: 'Manager' },\r\n    { key: 'CHARTER_BROKER_OR_MANAGER', value: 'Charter broker' },\r\n    { key: 'OTHER', value: 'Other' },\r\n  ];\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private bookingService: BookingService,\r\n    private countryService: CountryService,\r\n    private ngAuthService: NgAuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.onResize();\r\n    this.fetchCountries();\r\n    this.activatedRoute.paramMap.subscribe((params) => {\r\n      const bookingId = params.get('booking_id');\r\n      if (!bookingId) throw new Error('Something went wrong');\r\n\r\n      this.booking = this.bookingService.getBookingById(bookingId);\r\n      if (!this.booking) throw new Error('Something went wrong');\r\n\r\n      if (this.ngAuthService.isAuthenticated()) {\r\n        const user = this.ngAuthService.getAuthenticatedUser();\r\n        if (!this.booking.name) {\r\n          this.booking.name = `${user.firstName} ${user.lastName}`;\r\n        }\r\n\r\n        if (!this.booking.email) {\r\n          this.booking.email = user.email;\r\n        }\r\n\r\n        if (!this.booking.billingName) {\r\n          this.booking.billingName = `${user.firstName} ${user.lastName}`;\r\n        }\r\n      }\r\n\r\n      // TODO: Show the most recent editing panel\r\n      if (!this.isBillingDetailsValid()) {\r\n        this.activeIds = ['billing-details'];\r\n      }\r\n\r\n      if (!this.isDropOffDetailsValid()) {\r\n        this.activeIds = ['drop-off-details'];\r\n      }\r\n\r\n      if (!this.isPickUpDetailsValid()) {\r\n        this.activeIds = ['pick-up-details'];\r\n      }\r\n\r\n      if (!this.isYachtInformationValid()) {\r\n        this.activeIds = ['yacht-information'];\r\n      }\r\n\r\n      if (!this.isContactInformationValid()) {\r\n        this.activeIds = ['contact-information'];\r\n      }\r\n\r\n      if (this.activeIds.length === 0) {\r\n        this.activeIds = ['contact-information'];\r\n      }\r\n    });\r\n  }\r\n\r\n  setActive(id: string) {\r\n    this.activeIds = [id];\r\n  }\r\n\r\n  onResize(event?: any) {\r\n    if (event?.target.innerWidth < 768) {\r\n      this.mobile = true;\r\n    } else if (event?.target.innerWidth > 768) {\r\n      this.mobile = false;\r\n    } else if (window.screen.width < 768) {\r\n      this.mobile = true;\r\n    } else if (window.screen.width > 768) {\r\n      this.mobile = false;\r\n    }\r\n  }\r\n\r\n  async fetchCountries() {\r\n    this.countries = await this.countryService.getAllCountries();\r\n  }\r\n\r\n  onCountryChange() {\r\n    // if (this.booking?.pickUpCountry) {\r\n    //   this.fetchCities(this.booking.pickUpCountry.isoCode);\r\n    // }\r\n  }\r\n\r\n  // async fetchCities(code: string) {\r\n  //   this.cities = await this.countryService.getCitiesOfCountry(code);\r\n  // }\r\n\r\n  onDropOffCountryChange() {\r\n    //   if (this.booking?.dropOffCountry) {\r\n    //     this.fetchDropOffCities(this.booking.dropOffCountry.isoCode);\r\n    //   }\r\n  }\r\n\r\n  // async fetchDropOffCities(code: string) {\r\n  //   this.dropOffCities = await this.countryService.getCitiesOfCountry(code);\r\n  // }\r\n\r\n  onBillingCountryChange() {\r\n    //   if (this.booking?.billingCountry) {\r\n    //     this.fetchBillingCities(this.booking.billingCountry.isoCode);\r\n    //   }\r\n  }\r\n\r\n  // async fetchBillingCities(code: string) {\r\n  //   this.billingCities = await this.countryService.getCitiesOfCountry(code);\r\n  // }\r\n\r\n  shouldShow(id: string) {\r\n    if (!this.activeIds.includes(id) && this.mobile) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // back(target: any) {\r\n  //   console.log('We are here', target);\r\n  //   if (target === 'pick-up-details') {\r\n  //     if (this.booking?.pickUpCountry) {\r\n  //       this.fetchCities(this.booking.pickUpCountry?.isoCode);\r\n  //     }\r\n  //   }\r\n  //   if (target === 'drop-off-details') {\r\n  //     if (this.booking?.dropOffCountry) {\r\n  //       this.fetchDropOffCities(this.booking.dropOffCountry?.isoCode);\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  sameAsContactInformation() {\r\n    if (!this.booking) throw new Error('Something went wrong');\r\n\r\n    if (!this.booking.yachtContactName) {\r\n      this.booking.yachtContactName = this.booking.name;\r\n    }\r\n\r\n    if (!this.booking.yachtEmail) {\r\n      this.booking.yachtEmail = this.booking.email;\r\n    }\r\n\r\n    if (!this.booking.yachtRole) {\r\n      this.booking.yachtRole = this.booking.role;\r\n    }\r\n\r\n    if (!this.booking.yachtPhone) {\r\n      this.booking.yachtPhone = this.booking.phone;\r\n    }\r\n  }\r\n\r\n  useShippingAddress() {\r\n    if (!this.booking) throw new Error('Something went wrong');\r\n    // console.log('use shipping add', this.booking);\r\n\r\n    if (!this.booking.billingCountry) {\r\n      this.booking.billingCountry = this.booking.pickUpCountry;\r\n    }\r\n\r\n    if (!this.booking.billingCity) {\r\n      // if (this.booking?.pickUpCountry) {\r\n      //   this.fetchBillingCities(this.booking.pickUpCountry?.isoCode);\r\n      // }\r\n      this.booking.billingCity = this.booking.pickUpCity;\r\n    }\r\n\r\n    if (!this.booking.billingZipCode) {\r\n      this.booking.billingZipCode = this.booking.pickUpZipCode;\r\n    }\r\n\r\n    if (!this.booking.billingAddress) {\r\n      this.booking.billingAddress = this.booking.pickUpAddress;\r\n    }\r\n  }\r\n\r\n  termsAndConditionsCheck() {\r\n    this.booking!.termsAndConditionsConsent = !(this.booking?.termsAndConditionsConsent);\r\n  }\r\n\r\n  securityDepositCheck() {\r\n    this.booking!.securityDepositConsent = !(this.booking?.securityDepositConsent);\r\n  }\r\n\r\n  public beforeChange($event: NgbPanelChangeEvent) { }\r\n\r\n  // Contact Information\r\n  isContactInformationValid(): boolean {\r\n    if (!this.booking) return false;\r\n\r\n    return !!(\r\n      this.booking.name &&\r\n      this.booking.email &&\r\n      this.booking.phone &&\r\n      this.booking.role &&\r\n      this.booking.role !== 'Role'\r\n    );\r\n  }\r\n\r\n  submitContactInformation() {\r\n    this.bookingService.save();\r\n    this.accordion.toggle('contact-information');\r\n    this.activeIds = ['yacht-information'];\r\n    this.accordion.toggle('yacht-information');\r\n  }\r\n\r\n  // Yacht Information\r\n  showYachtInformationToggle(): boolean {\r\n    return this.isContactInformationValid();\r\n  }\r\n\r\n  isYachtInformationValid(): boolean {\r\n    if (!this.booking) return false;\r\n\r\n    if (this.noInfo) return true;\r\n\r\n    return !!(\r\n      this.booking.yachtEmail &&\r\n      this.booking.yachtPhone &&\r\n      this.booking.yachtRole &&\r\n      this.booking.yachtRole != 'Role' &&\r\n      this.booking.yachtContactName\r\n    );\r\n  }\r\n\r\n  noInfoYet() {\r\n    this.noInfo = true;\r\n  }\r\n\r\n  isYachtInformationDisabled(): boolean {\r\n    return !this.isContactInformationValid();\r\n  }\r\n\r\n  submitYachtInformation() {\r\n    this.bookingService.save();\r\n    this.accordion.toggle('yacht-information');\r\n    this.activeIds = ['pick-up-details'];\r\n    this.accordion.toggle('pick-up-details');\r\n  }\r\n\r\n  // Pick Up Details\r\n  showPickUpDetailsToggle(): boolean {\r\n    return this.isContactInformationValid() && this.isYachtInformationValid();\r\n  }\r\n\r\n  isPickUpDetailsValid(): boolean {\r\n    if (!this.booking) return false;\r\n\r\n    return !!(\r\n      this.booking.pickUpCountry &&\r\n      this.booking.pickUpCity &&\r\n      this.booking.pickUpZipCode &&\r\n      this.booking.pickUpAddress &&\r\n      this.booking.yachtName\r\n    );\r\n  }\r\n\r\n  isPickUpDetailsDisabled(): boolean {\r\n    return !this.isContactInformationValid() && !this.isYachtInformationValid();\r\n  }\r\n\r\n  submitPickUpDetails() {\r\n    this.bookingService.save();\r\n    this.accordion.toggle('pick-up-details');\r\n    this.activeIds = ['drop-off-details'];\r\n    this.accordion.toggle('drop-off-details');\r\n  }\r\n\r\n  // Drop Off Details\r\n  showDropOffDetailsToggle(): boolean {\r\n    return (\r\n      this.isContactInformationValid() &&\r\n      this.isYachtInformationValid() &&\r\n      this.isPickUpDetailsValid()\r\n    );\r\n  }\r\n\r\n  isDropOffDetailsValid(): boolean {\r\n    if (!this.booking) return false;\r\n\r\n    return !!(\r\n      this.booking.dropOffCountry &&\r\n      this.booking.dropOffCity &&\r\n      this.booking.dropOffAddress\r\n    );\r\n  }\r\n\r\n  isDropOffDetailsDisabled(): boolean {\r\n    return (\r\n      !this.isContactInformationValid() &&\r\n      !this.isYachtInformationValid() &&\r\n      !this.isPickUpDetailsValid()\r\n    );\r\n  }\r\n\r\n  submitDropOffDetails() {\r\n    this.bookingService.save();\r\n    this.accordion.toggle('drop-off-details');\r\n    this.activeIds = ['billing-details'];\r\n    this.accordion.toggle('billing-details');\r\n  }\r\n\r\n  // Billing Details\r\n  showBillingDetailsToggle(): boolean {\r\n    return (\r\n      this.isContactInformationValid() &&\r\n      this.isYachtInformationValid() &&\r\n      this.isPickUpDetailsValid() &&\r\n      this.isDropOffDetailsValid()\r\n    );\r\n  }\r\n\r\n  isBillingDetailsValid(): boolean {\r\n    if (!this.booking) return false;\r\n\r\n    if (this.booking.isCompany) {\r\n      return !!(\r\n        this.booking.companyName &&\r\n        this.booking.vatNumber &&\r\n        this.booking.billingName &&\r\n        this.booking.billingCountry &&\r\n        this.booking.billingCity &&\r\n        this.booking.billingZipCode &&\r\n        this.booking.billingAddress &&\r\n        this.booking.termsAndConditionsConsent &&\r\n        this.booking.securityDepositConsent\r\n      );\r\n    } else {\r\n      return !!(\r\n        this.booking.billingName &&\r\n        this.booking.billingCountry &&\r\n        this.booking.billingCity &&\r\n        this.booking.billingZipCode &&\r\n        this.booking.billingAddress &&\r\n        this.booking.securityDepositConsent &&\r\n        this.booking.termsAndConditionsConsent\r\n      );\r\n    }\r\n  }\r\n\r\n  isBillingDetailsDisabled(): boolean {\r\n    return (\r\n      !this.isContactInformationValid() &&\r\n      !this.isYachtInformationValid() &&\r\n      !this.isPickUpDetailsValid() &&\r\n      !this.isDropOffDetailsValid() &&\r\n      !this.isBillingDetailsValid()\r\n    );\r\n  }\r\n\r\n  saveBooking() {\r\n    if (!this.booking) {\r\n      throw new Error('Something went wrong');\r\n    } else {\r\n      this.bookingService.save();\r\n      this.saved = true;\r\n      setTimeout(() => {\r\n        this.saved = false;\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  submitBillingDetails() {\r\n    if (!this.booking) throw new Error('Something went wrong');\r\n\r\n    this.bookingService.save();\r\n    this.accordion.toggle('billing-details');\r\n\r\n    this.router.navigate(['payment', this.booking.id, 'pay']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  color: #fab900;\r\n}\r\n\r\n.p-style-2 {\r\n  /* <P Style 2> Avenir LT Std 35 Book 24 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  align-items: center;\r\n  color: #363636;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn.btn-primary {\r\n  min-height: 40px;\r\n}\r\n\r\n@media screen and (min-width: 768px) {\r\n  .btn-checkout {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-top: 2rem;\r\n  }\r\n\r\n  .mobile-margin {\r\n    margin-right: 1rem;\r\n  }\r\n\r\n  .hide-not-mobile{\r\n    display: none !important;\r\n  }\r\n}\r\n\r\n@media (max-width: 767px) {\r\n  .mobile-margin {\r\n    margin-bottom: 1rem !important;\r\n  }\r\n\r\n  .btn.btn-secondary {\r\n    min-height: 40px;\r\n  }\r\n\r\n  .mobile-center {\r\n    text-align: center;\r\n  }\r\n\r\n  .no-border{\r\n    border:none !important;\r\n    border-bottom: none!important;\r\n  }\r\n\r\n  ngb-accordion {\r\n    .card {\r\n      border: none !important;\r\n      border-bottom: none !important;\r\n    }\r\n  }\r\n\r\n  .mobile-display {\r\n    display: none !important;\r\n  }\r\n\r\n  .btn-checkout {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./checkout.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "countryService",
                        "type": "CountryService"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "countryService",
                        "type": "CountryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" (window:resize)=\"onResize($event)\">\r\n  <app-breadcrumbs [breadcrumbs]=\"breadcrumbs\"></app-breadcrumbs>\r\n\r\n  <ngb-accordion *ngIf=\"booking\" [closeOthers]=\"true\" [activeIds]=\"activeIds\" (panelChange)=\"beforeChange($event)\"\r\n    #accordion=\"ngbAccordion\" class=\"accordion-border\">\r\n    <ngb-panel *ngIf=\"shouldShow('contact-information')\" id=\"contact-information\">\r\n      <ng-template ngbPanelHeader>\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-8 col-md-8 col-sm-12 mobile-center\">\r\n            <h4>\r\n              1 of 5\r\n            </h4>\r\n            <h2>\r\n              Contact Information\r\n            </h2>\r\n          </div>\r\n          <div class=\"col-lg-4 col-md-4 mobile-display\">\r\n            <div class=\"row justify-content-center mb-3\">\r\n              <div class=\"col-auto\">\r\n                <img *ngIf=\"isContactInformationValid()\" src=\"assets/images/available.svg\" />\r\n                <img *ngIf=\"!isContactInformationValid()\" src=\"assets/images/alert-orange.svg\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"row justify-content-center\">\r\n              <div class=\"col-auto\">\r\n                <button ngbPanelToggle (click)=\"setActive('contact-information')\"\r\n                  class=\"btn btn-outline-secondary px-5\">\r\n                  Edit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template ngbPanelContent>\r\n        <p class=\"p-style-2 mobile-center mt-n4\">How can we reach you?</p>\r\n        <div class=\"row mt-4\">\r\n          <div class=\"col-lg-6 col-md-8 col-sm-12\">\r\n            <form (submit)=\"submitContactInformation()\">\r\n              <div class=\"form-group\">\r\n                <input type=\"text\" id=\"name\" name=\"name\" class=\"form-control\" required minlength=\"4\"\r\n                  [(ngModel)]=\"booking.name\" placeholder=\"Your Name\" #name=\"ngModel\" />\r\n                <div *ngIf=\"name.invalid && (name.dirty || name.touched)\" class=\"alert alert-danger\">\r\n                  <div *ngIf=\"name.errors?.required\">\r\n                    Name is required.\r\n                  </div>\r\n                  <div *ngIf=\"name.errors?.minlength\">\r\n                    Name must be at least 4 characters long.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"firstEmail\" type=\"email\" [(ngModel)]=\"booking.email\"\r\n                  placeholder=\"E-mail\" #firstEmail=\"ngModel\" email required />\r\n                <div *ngIf=\"firstEmail.invalid && (firstEmail.dirty || firstEmail.touched)\" class=\"alert alert-danger\">\r\n                  <div *ngIf=\"firstEmail.errors?.required\">\r\n                    Email is required.\r\n                  </div>\r\n                  <div *ngIf=\"firstEmail.invalid\">\r\n                    Email must be valid.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"phone\" type=\"tel\"\r\n                  pattern=\"(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\s*[)]?[-\\s\\.]?[(]?[0-9]{1,3}[)]?([-\\s\\.]?[0-9]{3})([-\\s\\.]?[0-9]{3,4})\"\r\n                  [(ngModel)]=\"booking.phone\" placeholder=\"Phone\" required #phone=\"ngModel\" autocomplete=\"false\"/>\r\n\r\n                <div *ngIf=\"phone.invalid && (phone.dirty || phone.touched)\" class=\"alert alert-danger\">\r\n                  <div *ngIf=\"phone.errors?.required\">\r\n                    Phone Number is required.\r\n                  </div>\r\n                  <div *ngIf=\"phone.invalid\">\r\n                    Phone Number must be valid, have you included the country code? E.g. +31 ...\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <select class=\"form-control\" name=\"role\" [(ngModel)]=\"booking.role\">\r\n                  <option [ngValue]=\"undefined\" [disabled]=\"true\">Role</option>\r\n                  <option *ngFor=\"let role of roles\" [ngValue]=\"role.key\">{{role.value}}</option>\r\n                </select>\r\n              </div>\r\n              <button type=\"submit\" [disabled]=\"!isContactInformationValid() && !firstEmail.invalid\"\r\n                class=\"btn btn-primary btn-block py-3\">\r\n                Continue\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </ngb-panel>\r\n\r\n    <ngb-panel *ngIf=\"shouldShow('yacht-information')\" id=\"yacht-information\" [disabled]=\"isYachtInformationDisabled()\">\r\n      <ng-template ngbPanelHeader>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-2 hide-not-mobile\">\r\n            <button ngbPanelToggle (click)=\"setActive('contact-information')\" class=\"btn btn-outline-secondary\">\r\n              Back\r\n            </button>\r\n          </div>\r\n          <div class=\"col-lg-8 col-md-8 col-sm-10 mobile-center\">\r\n            <h4>\r\n              2 of 5\r\n            </h4>\r\n            <h2>\r\n              Yacht Information\r\n            </h2>\r\n          </div>\r\n          <div *ngIf=\"showYachtInformationToggle()\" class=\"col-lg-4 col-md-4 mobile-display\">\r\n            <div class=\"row justify-content-center mb-3\">\r\n              <div class=\"col-auto\">\r\n                <img *ngIf=\"isYachtInformationValid()\" src=\"assets/images/available.svg\" />\r\n                <img *ngIf=\"!isYachtInformationValid()\" src=\"assets/images/alert-orange.svg\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"row justify-content-center\">\r\n              <div class=\"col-auto\">\r\n                <button ngbPanelToggle (click)=\"setActive('yacht-information')\" class=\"btn btn-outline-secondary px-5\">\r\n                  Edit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template ngbPanelContent>\r\n        <p class=\"p-style-2 mobile-center mt-n4\">Who can we talk to on-board?</p>\r\n        <div class=\"row mt-4\">\r\n          <div class=\"col-lg-6 col-md-8 col-sm-12\">\r\n            <form (submit)=\"submitYachtInformation()\">\r\n              <div class=\"form-group form-check\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"same-as-contact\"\r\n                  (click)=\"sameAsContactInformation()\" />\r\n                <label class=\"form-check-label ml-4 p-style-3\" for=\"same-as-contact\">Use Contact Information.</label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"yachtName\" type=\"text\" [(ngModel)]=\"booking.yachtName\"\r\n                  placeholder=\"Yacht Name\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"yachtContactName\" type=\"text\" [(ngModel)]=\"booking.yachtContactName\"\r\n                  placeholder=\"Contact Name\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <select class=\"form-control\" name=\"role\" [(ngModel)]=\"booking.yachtRole\">\r\n                  <option [ngValue]=\"undefined\" [disabled]=\"true\">Role</option>\r\n                  <option *ngFor=\"let role of roles\" [ngValue]=\"role.key\">{{role.value}}</option>\r\n                </select>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"yachtEmail\" type=\"email\" [(ngModel)]=\"booking.yachtEmail\"\r\n                  placeholder=\"E-mail\" #yachtEmail=\"ngModel\" email />\r\n                <div *ngIf=\"yachtEmail.invalid && (yachtEmail.dirty || yachtEmail.touched)\" class=\"alert alert-danger\">\r\n                  <div *ngIf=\"yachtEmail.invalid\">\r\n                    Email must be valid.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"yachtPhone\" type=\"tel\"\r\n                  pattern=\"(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\s*[)]?[-\\s\\.]?[(]?[0-9]{1,3}[)]?([-\\s\\.]?[0-9]{3})([-\\s\\.]?[0-9]{3,4})\"\r\n                  [(ngModel)]=\"booking.yachtPhone\" placeholder=\"Phone\" required #yachtPhone=\"ngModel\" autocomplete=\"false\"/>\r\n\r\n                <div *ngIf=\"yachtPhone.invalid && (yachtPhone.dirty || yachtPhone.touched)\" class=\"alert alert-danger\">\r\n                  <div *ngIf=\"yachtPhone.errors?.required\">\r\n                    Phone Number is required.\r\n                  </div>\r\n                  <div *ngIf=\"yachtPhone.invalid\">\r\n                    Phone Number must be valid, have you included the country code? E.g. +31 ...\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group form-check\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"no-information\" (click)=\"noInfoYet()\" />\r\n                <label class=\"form-check-label ml-4 p-style-3\" for=\"no-information\">I don't have this information yet.\r\n                  You can still continue\r\n                  with your booking.</label>\r\n              </div>\r\n              <button [disabled]=\"!isYachtInformationValid()\" type=\"submit\" class=\"btn btn-primary btn-block py-3\">\r\n                Continue\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </ngb-panel>\r\n\r\n    <ngb-panel *ngIf=\"shouldShow('pick-up-details')\" id=\"pick-up-details\" [disabled]=\"isPickUpDetailsDisabled()\">\r\n      <ng-template ngbPanelHeader>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-2 hide-not-mobile\">\r\n            <button ngbPanelToggle (click)=\"setActive('yacht-information')\" class=\"btn btn-outline-secondary\">\r\n              Back\r\n            </button>\r\n          </div>\r\n          <div class=\"col-lg-8 col-md-8 col-sm-10 mobile-center\">\r\n            <h4>\r\n              3 of 5\r\n            </h4>\r\n            <h2>\r\n              Pick Up Details\r\n            </h2>\r\n          </div>\r\n          <div *ngIf=\"showPickUpDetailsToggle()\" class=\"col-lg-4 col-md-4 mobile-display\">\r\n            <div class=\"row justify-content-center mb-3\">\r\n              <div class=\"col-auto\">\r\n                <img *ngIf=\"isPickUpDetailsValid()\" src=\"assets/images/available.svg\" />\r\n                <img *ngIf=\"!isPickUpDetailsValid()\" src=\"assets/images/alert-orange.svg\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"row justify-content-center\">\r\n              <div class=\"col-auto\">\r\n                <button ngbPanelToggle (click)=\"setActive('pick-up-details')\" class=\"btn btn-outline-secondary px-5\">\r\n                  Edit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template ngbPanelContent>\r\n        <p class=\"p-style-2 mobile-center mt-n4\">How can we reach you?</p>\r\n        <div class=\"row mt-4\">\r\n          <div class=\"col-lg-6 col-md-8 col-sm-12\">\r\n            <form (submit)=\"submitPickUpDetails()\">\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"yachtName\" type=\"text\" [(ngModel)]=\"booking.yachtName\"\r\n                  placeholder=\"Yacht Name\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <app-countries-select [countries]=\"countries\" [(country)]=\"booking.pickUpCountry\"\r\n                  (countryChange)=\"onCountryChange()\"></app-countries-select>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"pickUpCity\" type=\"text\" [(ngModel)]=\"booking.pickUpCity\"\r\n                  placeholder=\"City\" required />\r\n                  \r\n                <!-- <select class=\"form-control\" name=\"pickUpCity\" [(ngModel)]=\"booking.pickUpCity\">\r\n                  <option [ngValue]=\"undefined\" [disabled]=\"true\">City</option>\r\n                  <option *ngFor=\"let city of cities\" [ngValue]=\"city.name\">{{city.name}}</option>\r\n                </select> -->\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"pickUpZipCode\" type=\"text\" [(ngModel)]=\"booking.pickUpZipCode\"\r\n                  placeholder=\"Zip Code\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <textarea rows=\"3\" class=\"form-control\" name=\"pickUpAddress\" type=\"text\"\r\n                  [(ngModel)]=\"booking.pickUpAddress\" placeholder=\"Address\"></textarea>\r\n              </div>\r\n              <button [disabled]=\"!isPickUpDetailsValid()\" type=\"submit\" class=\"btn btn-primary btn-block py-3\">\r\n                Continue\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </ngb-panel>\r\n\r\n    <ngb-panel *ngIf=\"shouldShow('drop-off-details')\" id=\"drop-off-details\" [disabled]=\"isDropOffDetailsDisabled()\">\r\n      <ng-template ngbPanelHeader>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-2 hide-not-mobile\">\r\n            <!-- ; back('pick-up-details') -->\r\n            <button ngbPanelToggle (click)=\"setActive('pick-up-details')\" class=\"btn btn-outline-secondary\">\r\n              Back\r\n            </button>\r\n          </div>\r\n          <div class=\"col-lg-8 col-md-8 col-sm-10 mobile-center\">\r\n            <h4>\r\n              4 of 5\r\n            </h4>\r\n            <h2>\r\n              Drop Off Details\r\n            </h2>\r\n          </div>\r\n          <div *ngIf=\"showDropOffDetailsToggle()\" class=\"col-lg-4 col-md-4 mobile-display\">\r\n            <div class=\"row justify-content-center mb-3\">\r\n              <div class=\"col-auto\">\r\n                <img *ngIf=\"isDropOffDetailsValid()\" src=\"assets/images/available.svg\" />\r\n                <img *ngIf=\"!isDropOffDetailsValid()\" src=\"assets/images/alert-orange.svg\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"row justify-content-center\">\r\n              <div class=\"col-auto\">\r\n                <button ngbPanelToggle (click)=\"setActive('drop-off-details')\" class=\"btn btn-outline-secondary px-5\">\r\n                  Edit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template ngbPanelContent>\r\n        <p class=\"p-style-2 mobile-center mt-n4\">\r\n          Where do you want to drop off the Water Toys?\r\n        </p>\r\n        <div class=\"row mt-4\">\r\n          <div class=\"col-lg-6 col-md-8 col-sm-12\">\r\n            <form (submit)=\"submitDropOffDetails()\">\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"yachtName\" type=\"text\" [(ngModel)]=\"booking.yachtName\"\r\n                  placeholder=\"Yacht Name\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <app-countries-select [countries]=\"countries\" [(country)]=\"booking.dropOffCountry\"\r\n                  (countryChange)=\"onDropOffCountryChange()\"></app-countries-select>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"dropOffCity\" type=\"text\" [(ngModel)]=\"booking.dropOffCity\"\r\n                  placeholder=\"City\" required />\r\n\r\n                <!-- <select class=\"form-control\" name=\"dropOffCity\" [(ngModel)]=\"booking.dropOffCity\">\r\n                  <option [ngValue]=\"undefined\" [disabled]=\"true\">City</option>\r\n                  <option *ngFor=\"let city of dropOffCities\" [ngValue]=\"city.name\">{{city.name}}</option>\r\n                </select> -->\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"dropOffZipCode\" type=\"text\" [(ngModel)]=\"booking.dropOffZipCode\"\r\n                  placeholder=\"Zip Code\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <textarea rows=\"3\" class=\"form-control\" name=\"dropOffAddress\" type=\"text\"\r\n                  [(ngModel)]=\"booking.dropOffAddress\" placeholder=\"Address\"></textarea>\r\n              </div>\r\n              <button [disabled]=\"!isDropOffDetailsValid()\" type=\"submit\" class=\"btn btn-primary btn-block py-3\">\r\n                Continue\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </ngb-panel>\r\n\r\n    <ngb-panel *ngIf=\"shouldShow('billing-details')\" id=\"billing-details\" [disabled]=\"isBillingDetailsDisabled()\">\r\n      <ng-template ngbPanelHeader>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-2 hide-not-mobile\">\r\n            <!-- back('drop-off-details') -->\r\n            <button ngbPanelToggle (click)=\"setActive('drop-off-details')\" class=\"btn btn-outline-secondary\">\r\n              Back\r\n            </button>\r\n          </div>\r\n          <div class=\"col-lg-8 col-md-8 col-sm-10 mobile-center\">\r\n            <h4>\r\n              5 of 5\r\n            </h4>\r\n            <h2>\r\n              Billing Details\r\n            </h2>\r\n          </div>\r\n          <!-- <div *ngIf=\"showBillingDetailsToggle()\" class=\"col-4\">\r\n            <div class=\"row justify-content-center mb-3\">\r\n              <div class=\"col-auto\">\r\n                <img\r\n                  *ngIf=\"isBillingDetailsValid()\"\r\n                  src=\"assets/images/available.svg\"\r\n                />\r\n                <img\r\n                  *ngIf=\"!isBillingDetailsValid()\"\r\n                  src=\"assets/images/alert-orange.svg\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row justify-content-center\">\r\n              <div class=\"col-auto\">\r\n                <button ngbPanelToggle (click)=\"setActive('billing-details')\" class=\"btn btn-outline-secondary px-5\">\r\n                  Edit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div> -->\r\n        </div>\r\n      </ng-template>\r\n      <ng-template ngbPanelContent>\r\n        <p class=\"p-style-2 mobile-center mt-n4\">Who should we invoice?</p>\r\n        <div class=\"row mt-4\">\r\n          <div class=\"col-lg-6 col-md-8 col-sm-12\">\r\n            <form>\r\n              <div class=\"form-group form-check\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"isCompany\" name=\"isCompany\"\r\n                  [(ngModel)]=\"booking.isCompany\" />\r\n                <label class=\"form-check-label ml-4 p-style-3\" for=\"isCompany\">I am a Company.</label>\r\n              </div>\r\n              <div class=\"form-group form-check\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"useShippingAddress\"\r\n                  (click)=\"useShippingAddress()\" />\r\n                <label class=\"form-check-label ml-4 p-style-3\" for=\"useShippingAddress\">Use my Shipping Address.</label>\r\n              </div>\r\n              <div *ngIf=\"booking.isCompany\" class=\"form-group\">\r\n                <input class=\"form-control\" name=\"companyName\" [(ngModel)]=\"booking.companyName\"\r\n                  placeholder=\"Company Name\" />\r\n              </div>\r\n              <div *ngIf=\"booking.isCompany\" class=\"form-group\">\r\n                <input class=\"form-control\" name=\"vatNumber\" [(ngModel)]=\"booking.vatNumber\" placeholder=\"VAT Number\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"fullName\" type=\"text\" [(ngModel)]=\"booking.billingName\"\r\n                  placeholder=\"Full Name\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <app-countries-select [countries]=\"countries\" [(country)]=\"booking.billingCountry\"\r\n                  (countryChange)=\"onBillingCountryChange()\"></app-countries-select>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"billingCity\" type=\"text\" [(ngModel)]=\"booking.billingCity\"\r\n                  placeholder=\"City\" required />\r\n\r\n                <!-- <select class=\"form-control\" name=\"billingCity\" [(ngModel)]=\"booking.billingCity\">\r\n                  <option [ngValue]=\"undefined\" [disabled]=\"true\">City</option>\r\n                  <option *ngFor=\"let city of billingCities\" [ngValue]=\"city.name\">{{city.name}}</option>\r\n                </select> -->\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <input class=\"form-control\" name=\"billingZipCode\" type=\"text\" [(ngModel)]=\"booking.billingZipCode\"\r\n                  placeholder=\"Zip Code\" />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <textarea rows=\"3\" class=\"form-control\" name=\"billingAddress\" type=\"text\"\r\n                  [(ngModel)]=\"booking.billingAddress\" placeholder=\"Address\"></textarea>\r\n              </div>\r\n\r\n              <div class=\"form-group form-check\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"terms-and-conditions\"\r\n                  (click)=\"termsAndConditionsCheck()\" />\r\n                <label class=\"form-check-label ml-4 p-style-3\" for=\"terms-and-conditions\">I agree to the Terms and Conditions.</label>\r\n              </div>\r\n              <div class=\"form-group form-check\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"security-deposit-consent\"\r\n                  (click)=\"securityDepositCheck()\" />\r\n                <label class=\"form-check-label ml-4 p-style-3\" for=\"security-deposit-consent\">I agree to the Security Deposit.</label>\r\n              </div>\r\n              <!-- <button\r\n                type=\"submit\"\r\n                [disabled]=\"!isBillingDetailsValid()\"\r\n                class=\"btn btn-primary btn-block py-3\"\r\n              >\r\n                Continue\r\n              </button> -->\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </ngb-panel>\r\n  </ngb-accordion>\r\n\r\n  <div *ngIf=\"shouldShow('billing-details')\" class=\"btn-checkout\">\r\n    <button class=\"btn btn-lg btn-secondary mobile-margin px-5 mb-2\" (click)=\"saveBooking()\">\r\n      SAVE BOOKING\r\n    </button>\r\n    <div *ngIf=\"saved\" class=\"alert alert-success\">\r\n      Booking was saved.\r\n    </div>\r\n    <button class=\"btn btn-lg btn-primary px-5 mb-2\" [disabled]=\"!isBillingDetailsValid()\"\r\n      (click)=\"submitBillingDetails()\">\r\n      PROCEED TO PAYMENT\r\n    </button>\r\n  </div>\r\n\r\n  <!-- <div class=\"py-4\">\r\n    <app-we-specialize></app-we-specialize>\r\n  </div> -->\r\n</div>"
        },
        {
            "name": "ClearComponent",
            "id": "component-ClearComponent-b1d92038dc4d0c4105d8a6c7bb73c805",
            "file": "src/app/pages/clear/clear.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clear",
            "styleUrls": [
                "./clear.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clear.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-clear',\r\n  templateUrl: './clear.component.html',\r\n  styleUrls: ['./clear.component.scss'],\r\n})\r\nexport class ClearComponent implements OnInit {\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    localStorage.removeItem('BOOKINGS');\r\n    this.router.navigate(['']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clear.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>clear works!</p>\r\n"
        },
        {
            "name": "CompleteOrderComponent",
            "id": "component-CompleteOrderComponent-a2e033b1bf766c68fba7736d3fb628dd",
            "file": "src/app/payment/pages/complete-order/complete-order.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-complete-order",
            "styleUrls": [
                "./complete-order.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./complete-order.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availability",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\r\n    { path: environment.home + '/bookings', label: 'My Booking', active: false, disabled: false },\r\n    { path: '..', label: 'Checkout', active: false, disabled: false },\r\n    { path: '.', label: 'Payment', active: true, disabled: false },\r\n  ]",
                    "type": "Array<Breadcrumb>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "creditCard",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lastAvailabilityCheck",
                    "defaultValue": "'minutes ago'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loadingAvailabilityCheck",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "logisticsFee",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "rentalPeriod",
                    "defaultValue": "'0 days'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "wireTransfer",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "onCompleteBookingClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168
                },
                {
                    "name": "recheckAvailability",
                    "args": [
                        {
                            "name": "force",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "force",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport * as moment from 'moment';\r\nimport { Booking, BillingType } from 'src/app/booking/models/booking.model';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\nimport { Breadcrumb } from 'src/app/core/models/breadcrumb.model';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-complete-order',\r\n  templateUrl: './complete-order.component.html',\r\n  styleUrls: ['./complete-order.component.scss']\r\n})\r\nexport class CompleteOrderComponent implements OnInit {\r\n\r\n  // open1: boolean = false;\r\n  // open2: boolean = false;\r\n  creditCard: boolean = false;\r\n  wireTransfer: boolean = true;\r\n  // products: Array<Product> = [];\r\n\r\n  booking: Booking | undefined;\r\n  availability: any = null;\r\n  rentalPeriod: string = '0 days';\r\n  logisticsFee: number = 0;\r\n  lastAvailabilityCheck: string = 'minutes ago';\r\n  loadingAvailabilityCheck: boolean = false;\r\n  products: Array<Product> = [];\r\n  show: boolean = false;\r\n  user: any = null;\r\n\r\n  breadcrumbs: Array<Breadcrumb> = [\r\n    { path: environment.home + '/bookings', label: 'My Booking', active: false, disabled: false },\r\n    { path: '..', label: 'Checkout', active: false, disabled: false },\r\n    { path: '.', label: 'Payment', active: true, disabled: false },\r\n  ];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private bookingService: BookingService,\r\n    private ngAuthService: NgAuthService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.activatedRoute.paramMap.subscribe((params) => {\r\n      const bookingId = params.get('booking_id');\r\n      this.booking = this.bookingService.getBookingById(bookingId);\r\n      if (!this.booking) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n      if (this.booking && (this.booking.billingType === BillingType.creditCard)) {\r\n        this.creditCard = true;\r\n        this.wireTransfer = false;\r\n      } else if (this.booking && (this.booking.billingType === BillingType.wireTransfer)) {\r\n        this.creditCard = false;\r\n        this.wireTransfer = true;\r\n      }\r\n      this.recheckAvailability(true);\r\n    });\r\n  }\r\n\r\n  async recheckAvailability(force: boolean) {\r\n    if (!this.booking) return;\r\n\r\n    const daysOfPeriod = moment(this.booking.period.toDate).diff(\r\n      moment(this.booking.period.fromDate),\r\n      'days'\r\n    );\r\n    this.rentalPeriod = `${daysOfPeriod} days`;\r\n\r\n    if (!force && this.booking.availability && this.booking.checkedAvailabilityOn) {\r\n      const minutesAgoChecked = moment(this.booking.checkedAvailabilityOn).diff(\r\n        moment(),\r\n        'minutes'\r\n      );\r\n      if (minutesAgoChecked < 10) {\r\n        this.availability = this.booking.availability;\r\n      } else {\r\n        this.loadingAvailabilityCheck = true;\r\n        this.availability = await this.bookingService.productsAvailability(\r\n          this.booking\r\n        );\r\n        this.lastAvailabilityCheck = moment(\r\n          this.booking.checkedAvailabilityOn\r\n        ).fromNow();\r\n        this.loadingAvailabilityCheck = false;\r\n      }\r\n    } else {\r\n      this.loadingAvailabilityCheck = true;\r\n      this.availability = await this.bookingService.productsAvailability(\r\n        this.booking\r\n      );\r\n      this.lastAvailabilityCheck = moment(\r\n        this.booking.checkedAvailabilityOn\r\n      ).fromNow();\r\n      this.loadingAvailabilityCheck = false;\r\n    }\r\n\r\n    this.products = [];\r\n    this.booking?.products.forEach((p) => {\r\n      const availableProduct = this.availability.products.find(\r\n        (ap: any) => ap.id === p.id\r\n      );\r\n      if (!availableProduct) {\r\n        return;\r\n      }\r\n      p.quantity = availableProduct.quantity;\r\n      p.totalPrice = availableProduct.totalPrice;\r\n      p.availabilityState = availableProduct.availabilityState;\r\n      p.note = availableProduct.note;\r\n\r\n      // TODO: Temp, remove if changing API\r\n      p.price =\r\n        Number(p.totalPrice) / Number(daysOfPeriod) / Number(p.quantity);\r\n\r\n      this.products.push(p);\r\n      p.accessories.forEach((a) => {\r\n        const availableAccessory = availableProduct.accessories.find(\r\n          (ac: any) => ac.id === a.id\r\n        );\r\n        if (!availableAccessory) {\r\n          return;\r\n        }\r\n        a.quantity = availableAccessory.quantity;\r\n        a.totalPrice = availableAccessory.totalPrice;\r\n        a.availabilityState = availableAccessory.availabilityState;\r\n\r\n        // TODO: Temp, remove if changing API\r\n        p.totalPrice = Number(p.totalPrice) - Number(a.totalPrice);\r\n        p.price =\r\n          Number(p.totalPrice) / Number(daysOfPeriod) / Number(p.quantity);\r\n        a.price =\r\n          Number(a.totalPrice) / Number(daysOfPeriod) / Number(a.quantity);\r\n\r\n        this.products.push(a);\r\n      });\r\n    });\r\n\r\n    this.logisticsFee =\r\n      Number(this.availability.totalDeliveryOnBoard) +\r\n      Number(this.availability.totalHandlingCosts) +\r\n      Number(this.availability.totalRelocationFees) +\r\n      Number(this.availability.totalShippingCosts);\r\n  }\r\n\r\n  toggle() {\r\n    this.show = !this.show;\r\n  }\r\n\r\n  // openAccordian1() {\r\n  //   this.open1 = !this.open1;\r\n  // }\r\n\r\n  // openAccordian2() {\r\n  //   this.open2 = !this.open2;\r\n  // }\r\n\r\n  onCompleteBookingClicked() {\r\n    if (this.booking) {\r\n      this.router.navigate(['payment', this.booking.id, 'summary']);\r\n    } else {\r\n      this.router.navigate(['bookings']);\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n  box-shadow: 0px 0px 50px rgba(196, 196, 196, 0.3);\r\n  border-radius: 2px;\r\n  border: none;\r\n}\r\n\r\n.pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.rotate-img-90 {\r\n  -webkit-transform: rotate(90deg);\r\n  -moz-transform: rotate(90deg);\r\n  -ms-transform: rotate(90deg);\r\n  -o-transform: rotate(90deg);\r\n  transform: rotate(90deg);\r\n}\r\n\r\n.flex {\r\n  display: flex;\r\n}\r\n\r\n.padding-03 {\r\n  padding: 0.3rem;\r\n}\r\n\r\n.btn.btn-primary {\r\n  font-size: 14px;\r\n  width: 355px;\r\n}\r\n\r\n.grey-background {\r\n  background-color: #f1f1f1;\r\n  width: 97%;\r\n}\r\n\r\n.dropdown-menu {\r\n  border: none;\r\n  width: 100%;\r\n}\r\n\r\n.dropdown-item {\r\n  padding: 0;\r\n}\r\n\r\n.left {\r\n  justify-content: start;\r\n}\r\n\r\n@media screen and (min-width: 768px) {\r\n  .mobile-justify {\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .credit-padding {\r\n    padding-right: 15px;\r\n  }\r\n\r\n  .img-holder {\r\n    width: 145px;\r\n  }\r\n\r\n  .product-text {\r\n    font-size: 24px;\r\n  }\r\n  .my-order {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .heading {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .price {\r\n    width: 140px;\r\n    max-width: 140px;\r\n    text-align: right;\r\n  }\r\n\r\n  .column {\r\n    width: 360px;\r\n    max-width: 360px;\r\n  }\r\n\r\n  .products-div {\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .card-shadow {\r\n    padding: 0;\r\n    box-shadow: 0px 0px 0px rgba(196, 196, 196, 0.3);\r\n  }\r\n  .table-max {\r\n    width: 50%;\r\n    display: flex;\r\n  }\r\n\r\n  .img {\r\n    object-fit: contain;\r\n    max-height: 80px;\r\n    width: 110px;\r\n    max-width: 110px;\r\n  }\r\n\r\n  .mobile-icon {\r\n    display: none !important;\r\n  }\r\n\r\n  .show-on-mobile {\r\n    display: none !important;\r\n  }\r\n\r\n  #layout {\r\n    width: 90%;\r\n  }\r\n\r\n  .w33 {\r\n    width: 33%;\r\n  }\r\n\r\n  .display-max {\r\n    display: flex;\r\n    width: 50%;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .p-heading {\r\n    font-size: 20px;\r\n  }\r\n  .p-text {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .section-heading {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .section-subtitle {\r\n    font-size: 20px;\r\n  }\r\n\r\n  .section-text {\r\n    font-size: 18px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1000px) {\r\n  .column {\r\n    width: auto;\r\n  }\r\n}\r\n\r\n@media (max-width: 767px) {\r\n  .section-heading {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .section-subtitle {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .section-text {\r\n    font-size: 13px;\r\n  }\r\n  .p-heading {\r\n    font-size: 13px;\r\n  }\r\n\r\n  .p-text {\r\n    font-size: 13px;\r\n  }\r\n\r\n  // .mobile-justify{\r\n  //   justify-content: space-around;\r\n  // }\r\n\r\n  .img-holder {\r\n    width: 80px;\r\n    padding-right: 20px;\r\n    margin-left: 20px;\r\n  }\r\n\r\n  .block {\r\n    display: block;\r\n  }\r\n\r\n  .product-text {\r\n    font-size: 13px;\r\n  }\r\n  .table-max {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .my-order {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .heading {\r\n    font-size: 16px;\r\n  }\r\n\r\n  .col-12 {\r\n    padding-bottom: 2rem;\r\n  }\r\n\r\n  .between {\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .price {\r\n    width: 130px;\r\n    max-width: 130px;\r\n    text-align: left;\r\n  }\r\n\r\n  .column {\r\n    width: auto;\r\n  }\r\n\r\n  .products-div {\r\n    align-items: left;\r\n    flex-direction: row;\r\n  }\r\n\r\n  .mobile {\r\n    display: none !important;\r\n  }\r\n\r\n  .mobile-flex {\r\n    display: flex;\r\n    padding-bottom: 1rem;\r\n  }\r\n\r\n  .display-max {\r\n    display: none !important;\r\n  }\r\n\r\n  .img {\r\n    object-fit: contain;\r\n    max-height: 80px;\r\n    width: 110px;\r\n    max-width: 110px;\r\n  }\r\n\r\n  .mobile-margin {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .mobile-icon {\r\n    text-align: right;\r\n  }\r\n\r\n  .show-on-mobile {\r\n    text-align: left;\r\n  }\r\n\r\n  .centered {\r\n    text-align: center;\r\n  }\r\n\r\n  .btn-flex-auto {\r\n    flex: auto;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .between {\r\n    justify-content: space-evenly;\r\n  }\r\n}\r\n",
                    "styleUrl": "./complete-order.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\r\n  <app-breadcrumbs [breadcrumbs]=\"breadcrumbs\"></app-breadcrumbs>\r\n\r\n  <div class=\"fs-24 tyros-reg fab pt-2 centered block\">Review & Pay</div>\r\n  <div class=\"fs-36 tyros-reg mobile\">Complete your Order</div>\r\n  <div class=\"heading avenir-light pb-5 centered\">Make sure everything is correct before you complete your order.</div>\r\n  <!-- <div class=\"show-on-mobile\">\r\n    <hr />\r\n  </div> -->\r\n  <div class=\"my-order tyros-reg-600 pt-4 pb-3 centered\">My Order</div>\r\n  <div class=\"show-on-mobile\">\r\n    <hr />\r\n  </div>\r\n  \r\n  <div class=\"d-flex justify-content-between mobile\">\r\n    <div class=\"w-50 fs-18 avenir-light\">Product</div>\r\n    <div class=\"d-flex w-50\">\r\n      <div class=\"fs-18 w-33 avenir-light\">QTY</div>\r\n      <div class=\"fs-18 w-33 avenir-light\">Availability</div>\r\n      <div class=\"fs-18 w-33 avenir-light text-center\">Price</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngFor=\"let product of products\" class=\"mobile-margin\">\r\n    <div class=\"flex products-div py-3\">\r\n      <div class=\"table-max\">\r\n        <div class=\"text-center\">\r\n          <img class=\"img\" [src]=\"product.imageThumbnail?.url\" />\r\n        </div>\r\n        <!-- <div class=\"mobile-flex\"> -->\r\n          <div class=\"flex column\">\r\n            <div class=\"product-text tyros-reg\">{{ product.name }}</div>\r\n            <div class=\"product-text avenir-light grey mobile\">\r\n              {{ product.price | number : '1.0-2' }} € / Day\r\n            </div>\r\n            <div class=\"product-text avenir-light show-on-mobile flex grey\">\r\n              x \r\n              <app-counter [counter]=\"product.quantity\" [disabled]=\"true\" [grey]=\"true\">\r\n              </app-counter>\r\n            </div>\r\n            <div class=\"show-on-mobile product-text tyros-reg price\">€{{ product.totalPrice | number : '1.0-2' }}</div>\r\n            <div *ngIf=\"product.note\" class=\"product-text avenir-light grey mobile\">\r\n              {{ product?.note }}\r\n            </div>\r\n          </div>\r\n        <!-- </div> -->\r\n      </div>\r\n\r\n      <div class=\"display-max\">\r\n        <app-counter [counter]=\"product.quantity\" [disabled]=\"true\">\r\n        </app-counter>\r\n        <div class=\"mobile\">\r\n          <div *ngIf=\"product.availabilityState === 'AVAILABLE'\" class=\"d-flex\">\r\n            <button *ngIf=\"!product.note\" type=\"button\" class=\"btn btn-transparent mr-2 btn-no-border\" placement=\"top\"\r\n              ngbPopover=\"This item is available for your dates.\" popoverTitle=\"Available\">\r\n              <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n            </button>\r\n            <button *ngIf=\"product.note\" type=\"button\" class=\"btn btn-transparent mr-2 btn-no-border\" placement=\"top\"\r\n              ngbPopover=\"{{ product.note }}\" popoverTitle=\"Available\">\r\n              <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n            </button>\r\n          </div>\r\n          <div *ngIf=\"product.availabilityState === 'NOT_AVAILABLE'\" class=\"d-flex\">\r\n            <button type=\"button\" class=\"btn btn-transparent mr-2 btn-no-border\" placement=\"top\"\r\n              ngbPopover=\"{{ product.note }}\" popoverTitle=\"Not Available\">\r\n              <img class=\"pointer\" src=\"assets/images/alert-orange.svg\" />\r\n            </button>\r\n          </div>\r\n          <div *ngIf=\"product.availabilityState === 'AVAILABLE_BUT_DELAYED'\" class=\"d-flex\">\r\n            <button type=\"button\" class=\"btn btn-transparent mr-2 btn-no-border\" placement=\"top\"\r\n              ngbPopover=\"{{ product.note }}\" popoverTitle=\"Delayed\">\r\n              <img class=\"pointer\" src=\"assets/images/alert.svg\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"fs-24 tyros-reg price\">€{{ product.totalPrice | number : '1.0-2' }}</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"show-on-mobile\">\r\n      <hr />\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"section-heading tyros-reg-600 pt-5 pb-4 centered\">Billing Details</div>\r\n  <div class=\"row d-flex justify-content-between\">\r\n    <div class=\"col-12 col-md-6 d-flex flex-column\" *ngIf=\"creditCard\">\r\n      <div class=\"d-flex mobile-justify\">\r\n        <div class=\"credit-padding\">\r\n          <div class=\"p-heading tyros-reg pt-4 mt-1\">Credit Card</div>\r\n          <!-- <div class=\"d-flex align-items-center\">\r\n            <div class=\"p-text avenir-light d-flex grey\">.........................</div>\r\n            <div class=\"p-text avenir-light d-flex grey\">68</div>\r\n          </div>\r\n          <div class=\"p-text avenir-light\">MM/YY</div> -->\r\n        </div>\r\n        <div class=\"img-holder justify-content-end\">\r\n          <img class=\"padding-03\" src=\"assets/images/creditcard.svg\">\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"d-flex justify-content-start align-items-center pointer pt-5\">\r\n        <div class=\"fs-14 tyros-reg\">CHANGE</div>\r\n        <i class=\"fas fa-chevron-right color-primary pl-2\"></i>\r\n      </div> -->\r\n    </div>\r\n    <div class=\"col-12 col-md-6 d-flex flex-column\" *ngIf=\"wireTransfer\">\r\n      <div class=\"d-flex justify-content-between\">\r\n        <div>\r\n          <div class=\"p-heading tyros-reg pt-4 mt-1\">Wire Transfer</div>\r\n          <!-- <div class=\"d-flex justify-content-start align-items-center pointer pt-2\">\r\n            <div class=\"fs-14 tyros-reg\">CHANGE</div>\r\n            <i class=\"fas fa-chevron-right color-primary pl-2\"></i>\r\n          </div> -->\r\n        </div>\r\n        <img class=\"img\" src=\"assets/images/wiretransfer.svg\">\r\n      </div>\r\n      <div class=\"grey-background\">\r\n        <div class=\"pl-3\">\r\n          <div class=\"pb-4 pt-2\">\r\n            <div class=\"p-heading tyros-reg\">Bank Account</div>\r\n            <div class=\"p-text avenir-light\">NL21 ABNA 0844 5432 92</div>\r\n          </div>\r\n          <div class=\"pb-4\">\r\n            <div class=\"p-text tyros-reg\">BIC / SWIFT Code</div>\r\n            <div class=\"p-text avenir-light\">ABNANL2A</div>\r\n          </div>\r\n          <!-- <div class=\"pb-4 pt-2\">\r\n            <div class=\"p-text tyros-reg\">Bank Account</div>\r\n            <div class=\"p-text avenir-light\">NL19 ABCD 1234 9876 01</div>\r\n          </div>\r\n          <div class=\"pb-4\">\r\n            <div class=\"p-text tyros-reg\">BIC / SWIFT Code</div>\r\n            <div class=\"p-text avenir-light\">123they</div>\r\n          </div> -->\r\n          <div class=\"pb-2\">\r\n            <div class=\"p-text tyros-reg\">Payment ID</div>\r\n            <div class=\"p-text avenir-light\">{{booking?.orderId}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-text avenir-light-300 pt-3\">\r\n        Once you review and approve your order you will receive an\r\n        invoice via e-mail. We will ship your order as soon as the\r\n        final payment is in our account.\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"show-on-mobile\">\r\n      <hr />\r\n    </div>\r\n\r\n    <div class=\"col-12 col-md-3 d-flex flex-column\">\r\n      <div class=\"section-subtitle tyros-reg\">Billing Address</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.billingAddress}}</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.billingCity}}, {{booking?.billingZipCode}}</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.billingCountry?.name}}</div>\r\n      <!-- <div class=\"d-flex justify-content-start align-items-center pointer pt-5\">\r\n        <div class=\"fs-14 tyros-reg\">CHANGE</div>\r\n        <i class=\"fas fa-chevron-right color-primary pl-2\"></i>\r\n      </div> -->\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"show-on-mobile\">\r\n    <hr />\r\n  </div>\r\n\r\n  <div class=\"section-heading tyros-reg-600 pt-5 pb-4 centered\">Logistics Details</div>\r\n  <div class=\"row\">\r\n    <div class=\"col-12 col-md-4 d-flex flex-column\">\r\n      <div class=\"section-subtitle tyros-reg\">Pick Up Location</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.pickUpAddress}}</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.pickUpCity}}, {{booking?.pickUpZipCode}}</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.pickUpCountry?.name}}</div>\r\n    </div>\r\n    <div class=\"col-12 col-md-4 d-flex flex-column\">\r\n      <div class=\"section-subtitle tyros-reg\">Drop Off Location</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.dropOffAddress}}</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.dropOffCity}}, {{booking?.dropOffZipCode}}</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.dropOffCountry?.name}}</div>\r\n    </div>\r\n    <div class=\"col-12 col-md-4 d-flex flex-column\">\r\n      <div class=\"section-subtitle tyros-reg\">Contact Information</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.email}}</div>\r\n      <div class=\"p-text avenir-light\">{{booking?.phone}}</div>\r\n    </div>\r\n  </div>\r\n  <!-- <div class=\"d-flex align-items-center pointer pt-3\">\r\n    <div class=\"fs-14 tyros-reg\">CHANGE</div>\r\n    <i class=\"fas fa-chevron-right color-primary pl-2\"></i>\r\n  </div> -->\r\n\r\n  <div *ngIf=\"availability\" class=\"card px-5 py-5 mt-5\">\r\n    <div class=\"fs-24 tyros-reg centered\">Booking Details</div>\r\n    <hr class=\"my-5\" />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">Rental Period</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">{{ rentalPeriod }}</div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">Delivery</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.period?.fromDate?.day }}.{{\r\n        booking?.period?.fromDate?.month\r\n        }}.{{ booking?.period?.fromDate?.year }}\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\"></div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.location?.delivery?.name }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">Collection</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.period?.toDate?.day }}.{{\r\n        booking?.period?.toDate?.month\r\n        }}.{{ booking?.period?.toDate?.year }}\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\"></div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        {{ booking?.location?.collection?.name }}\r\n      </div>\r\n    </div>\r\n\r\n    <hr class=\"my-5\" />\r\n\r\n    <div *ngFor=\"let p of booking?.products; let i = index\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light\">{{ i === 0 ? \"Items\" : \"\" }}</div>\r\n        <div class=\"col-lg-8 avenir-light text-right\">\r\n          {{ p.quantity }} x {{ p.name }}\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngFor=\"let a of p.accessories\">\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-4 avenir-light\"></div>\r\n          <div class=\"col-lg-8 avenir-light text-right\">\r\n            {{ a.quantity }} x {{ a.name }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n    </div>\r\n\r\n    <hr class=\"my-5\" />\r\n\r\n    <div class=\"justify-content-between row ml-0 mr-0\">\r\n      <div class=\"avenir-light\">\r\n        Logistics Fees\r\n        <button *ngIf=\"!this.show\" class=\"btn\" (click)=\"toggle()\">\r\n          <img src=\"/assets/images/nav-arrow-right.svg\" alt=\"-\" />\r\n        </button>\r\n        <button *ngIf=\"this.show\" class=\"btn rotate-img-90\" (click)=\"toggle()\">\r\n          <img src=\"/assets/images/nav-arrow-right.svg\" alt=\"-\" />\r\n        </button>\r\n      </div>\r\n      <div class=\"mr-0 avenir-light\">€{{ logisticsFee | number: \"1.2\" }}</div>\r\n    </div>\r\n\r\n    <div *ngIf=\"this.show\" class=\"pl-2 pb-2\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Delivery & Pickup</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalDeliveryOnBoard }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Shipping</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalShippingCosts | number : '1.0-2' }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Relocation</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalRelocationFees | number : '1.0-2' }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-4 avenir-light grey\">Handling</div>\r\n        <div class=\"col-lg-8 avenir-light grey text-right\">\r\n          €{{ availability?.totalHandlingCosts | number : '1.0-2' }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">VAT as 0%*</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">€0.00</div>\r\n    </div>\r\n\r\n    <hr class=\"my-5\" />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-4 avenir-light\">TOTAL FOR PAYMENT</div>\r\n      <div class=\"col-lg-8 avenir-light text-right\">\r\n        €{{ availability?.grandTotalPrice | number : '1.0-2' }}\r\n      </div>\r\n    </div>\r\n\r\n    <hr class=\"my-5\" />\r\n\r\n    <div class=\"section-subtitle avenir-light right\">\r\n      Your booking is reserved for the next 48 hours. <br />\r\n      To complete your Booking, please provide us with a proof of\r\n      payment within the 48 hours.\r\n    </div>\r\n\r\n    <div class=\"d-flex justify-content-end\" (click)=\"onCompleteBookingClicked()\">\r\n      <button class=\"btn btn-primary btn-lg py-3 mt-3\">\r\n        Complete Booking\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <!-- <app-order-faq></app-order-faq> -->\r\n  <app-we-specialize></app-we-specialize>\r\n\r\n\r\n</div>"
        },
        {
            "name": "CounterComponent",
            "id": "component-CounterComponent-8b3c2f9e373615dbc8f650b61862f02d",
            "file": "src/app/core/counter/counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-counter",
            "styleUrls": [
                "./counter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "line": 9,
                    "type": "number"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "grey",
                    "defaultValue": "false",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "counterChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "minus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "plus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-counter',\r\n  templateUrl: './counter.component.html',\r\n  styleUrls: ['./counter.component.scss'],\r\n})\r\nexport class CounterComponent implements OnInit {\r\n  @Input() counter: number = 0;\r\n  @Input() disabled: boolean = false;\r\n  @Input() grey: boolean = false;\r\n  @Output() counterChange = new EventEmitter<number>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  minus() {\r\n    if (this.counter === 0) return;\r\n\r\n    this.counter = this.counter - 1;\r\n    this.counterChange.emit(this.counter);\r\n  }\r\n\r\n  plus() {\r\n    this.counter = this.counter + 1;\r\n    this.counterChange.emit(this.counter);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".counter-number {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  display: flex;\r\n  align-items: center;\r\n  color: #19303b;\r\n}\r\n\r\n.counter-number-grey {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: AvenirLTStd-Light;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  display: flex;\r\n  align-items: center;\r\n  color: #c4c4c4 !important;\r\n}\r\n",
                    "styleUrl": "./counter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul class=\"nav\">\r\n  <li *ngIf=\"!disabled\" class=\"nav-item\">\r\n    <button [disabled]=\"disabled\" class=\"btn btn-transparent  btn-no-border px-0 mr-2 py-2\" (click)=\"minus()\">\r\n      <img src=\"assets/images/minus.svg\" />\r\n    </button>\r\n  </li>\r\n  <li *ngIf=\"!grey\" class=\"nav-item d-flex align-items-center justify-content-center\">\r\n    <div class=\"counter-number\">{{ counter }}</div>\r\n  </li>\r\n  <li *ngIf=\"grey\" class=\"nav-item d-flex align-items-center justify-content-center\">\r\n    <div class=\".counter-number-grey\">{{ counter }}</div>\r\n  </li>\r\n  <li *ngIf=\"!disabled\" class=\"nav-item\">\r\n    <button [disabled]=\"disabled\" class=\"btn btn-transparent  btn-no-border px-0 ml-2 py-2\" (click)=\"plus()\">\r\n      <img src=\"assets/images/small-plus.svg\" />\r\n    </button>\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "CountriesSelectComponent",
            "id": "component-CountriesSelectComponent-f3437da84fa79ee0a138ec65a0c21f69",
            "file": "src/app/core/countries-select/countries-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-countries-select",
            "styleUrls": [
                "./countries-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./countries-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "countries",
                    "line": 43,
                    "type": ""
                },
                {
                    "name": "country",
                    "line": 23,
                    "type": "Country | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "countryChange",
                    "defaultValue": "new EventEmitter<Country>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_allCountries",
                    "defaultValue": "[]",
                    "type": "Array<Country>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "countryName",
                    "defaultValue": "'Country'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "countrySearch",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "countrySearchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'countrySearchInput'"
                        }
                    ]
                },
                {
                    "name": "countrySelect",
                    "type": "NgbDropdown",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'countrySelect'"
                        }
                    ]
                },
                {
                    "name": "filteredCountries",
                    "defaultValue": "[]",
                    "type": "Array<Country>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fuse",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isTyping",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "countryClick",
                    "args": [
                        {
                            "name": "country",
                            "type": "Country"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "country",
                            "type": "Country",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "countrySearchChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "openCountrySelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Country } from '../../booking/models/countries.model';\r\n\r\nimport Fuse from 'fuse.js';\r\n\r\n@Component({\r\n  selector: 'app-countries-select',\r\n  templateUrl: './countries-select.component.html',\r\n  styleUrls: ['./countries-select.component.scss']\r\n})\r\nexport class CountriesSelectComponent {\r\n  @ViewChild('countrySelect') countrySelect!: NgbDropdown;\r\n  @ViewChild('countrySearchInput') countrySearchInput!: ElementRef;\r\n\r\n  @Input() country: Country | undefined;\r\n  @Output() countryChange = new EventEmitter<Country>();\r\n\r\n  isTyping = false;\r\n\r\n  countrySearch = '';\r\n\r\n  countryName: string = 'Country';\r\n\r\n  _allCountries: Array<Country> = [];\r\n  filteredCountries: Array<Country> = [];\r\n\r\n  fuse?: any;\r\n\r\n  constructor() { }\r\n\r\n  // @Input() set country(country: Country | undefined) {\r\n  //   this.countryName = country ? country.name : 'Country';\r\n  // }\r\n\r\n  @Input() set countries(countries: Array<Country>) {\r\n    this._allCountries = countries;\r\n    this.filteredCountries = countries;\r\n\r\n    this.fuse = new Fuse(this._allCountries, {\r\n      keys: ['name'],\r\n    });\r\n  }\r\n\r\n  openCountrySelect() {\r\n    if (!this.countrySelect) return;\r\n\r\n    this.isTyping = true;\r\n    setTimeout(() => {\r\n      if (this.countrySearchInput) {\r\n        this.countrySearchInput.nativeElement.focus();\r\n      }\r\n      this.countrySelect.open();\r\n    }, 0);\r\n  }\r\n\r\n  countrySearchChange() {\r\n    // this.countryName = \"\";\r\n    if (!this.countrySearch) {\r\n      this.filteredCountries = this._allCountries;\r\n      return;\r\n    }\r\n\r\n    const result = this.fuse.search(this.countrySearch);\r\n    this.filteredCountries = result.map((res: any) => res.item);\r\n  }\r\n\r\n  countryClick(country: Country) {\r\n    this.country = country;\r\n    // this.countryName = country.name;\r\n    this.countryChange.emit(this.country);\r\n    setTimeout(() => {\r\n      this.isTyping = false;\r\n      this.countrySelect.close();\r\n      this.countrySearch = '';\r\n    }, 0);\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn-font{\r\n  font-size: 1rem !important;\r\n  color: #495057 !important;\r\n}\r\n\r\n// .select-container button {\r\n//   // border: none;\r\n//   outline: 0;\r\n//   -moz-appearance: none;\r\n//   -webkit-appearance: none;\r\n//   /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n//   font-family: \"AvenirLTStd-Book\";\r\n//   font-style: normal;\r\n//   font-weight: normal;\r\n//   font-size: 18px;\r\n//   line-height: 22px;\r\n//   color: #363636;\r\n// }\r\n\r\n.country-dropdown-menu {\r\n  // width: 150%;\r\n  max-height: 280px;\r\n  overflow-y: auto;\r\n  min-width: 100% !important;\r\n}\r\n\r\n.water-toy-country-asker {\r\n  font-family: \"TyrosPro-Bold\";\r\n  font-size: 16px;\r\n  position: relative;\r\n  padding-bottom: 0;\r\n  padding-top: 16px;\r\n  text-align: left;\r\n  padding-left: 29.5px;\r\n  padding-right: 29.5px;\r\n}\r\n\r\n.drop-down-item-1 {\r\n  padding-top: 8px;\r\n  // padding-bottom: 9px;\r\n  // font-size: 20px;\r\n  // position: static;\r\n  // padding-left: 52px;\r\n  // font-family: \"AvenirLTStd-Book\";\r\n}\r\n\r\n.country-image {\r\n  padding-right: 20px;\r\n}\r\n\r\n.country-select {\r\n  border: none !important;\r\n  border-bottom: none !important;\r\n  margin-top:2px!important;\r\n  padding-top: 10px;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .country-dropdown-menu {\r\n    width: 100%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./countries-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 35
            },
            "accessors": {
                "countries": {
                    "name": "countries",
                    "setSignature": {
                        "name": "countries",
                        "type": "void",
                        "args": [
                            {
                                "name": "countries",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "countries",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div\r\n  class=\"form-control py-1\"\r\n  (click)=\"$event.stopPropagation(); openCountrySelect()\"\r\n>\r\n  <div\r\n    ngbDropdown\r\n    #countrySelect=\"ngbDropdown\"\r\n    class=\"mt-n1 mb-2 btn-no-border\"\r\n  >\r\n    <button\r\n      *ngIf=\"!isTyping\"\r\n      class=\"btn-font btn btn-lg mt-2 p-0 text-left\"\r\n      type=\"button\"\r\n    >\r\n      {{ country?.name }}\r\n    </button>\r\n    <input\r\n      class=\"btn-no-border country-select\"\r\n      #countrySearchInput\r\n      (click)=\"$event.stopPropagation(); openCountrySelect()\"\r\n      *ngIf=\"isTyping || !country\"\r\n      type=\"text\"\r\n      name=\"x-field-1\"\r\n      autocomplete=\"new-field-1\"\r\n      [(ngModel)]=\"countrySearch\"\r\n      (keyup)=\"countrySearchChange()\"\r\n      placeholder=\"Country\"\r\n    />\r\n    <div class=\"country-dropdown-menu\" ngbDropdownMenu>\r\n      <div\r\n        *ngFor=\"let country of filteredCountries\"\r\n        ngbDropdownItem\r\n        class=\"drop-down-item-1\"\r\n        (click)=\"$event.stopPropagation(); countryClick(country)\"\r\n      >\r\n        <p>\r\n          <img\r\n            src=\"/assets/images/location.svg\"\r\n            alt=\"-\"\r\n            class=\"country-image\"\r\n          />\r\n          {{ country.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DropOffLocationComponent",
            "id": "component-DropOffLocationComponent-b0b5b9cd1297a15072d0e98f060dae41",
            "file": "src/app/product/modals/drop-off-location/drop-off-location.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drop-off-location",
            "styleUrls": [
                "./drop-off-location.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./drop-off-location.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dropOffLocation",
                    "type": "Location | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pickUpLocation",
                    "type": "Location | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "popularCaribbeanPorts",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "popularMediterraneanPorts",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "sameAsPickUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { Location } from 'src/app/core/models/location.model';\r\n\r\n@Component({\r\n  selector: 'app-drop-off-location',\r\n  templateUrl: './drop-off-location.component.html',\r\n  styleUrls: ['./drop-off-location.component.scss'],\r\n})\r\nexport class DropOffLocationComponent implements OnInit {\r\n  locations: Array<Location> = [];\r\n  dropOffLocation: Location | undefined;\r\n  popularMediterraneanPorts: Array<Location> = [];\r\n  popularCaribbeanPorts: Array<Location> = [];\r\n  pickUpLocation: Location | undefined;\r\n\r\n  constructor(public modal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  sameAsPickUp() {\r\n    this.modal.close(this.pickUpLocation);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 10px;\r\n  line-height: 10px;\r\n  color: #c4c4c4;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-2 {\r\n  /* <Mobile P Style 2> Avenir LT Std 35 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  font-size: 18px;\r\n  line-height: 22px;\r\n  letter-spacing: 0.117321px;\r\n  color: #000000;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}\r\n\r\n.btn.btn-shadow {\r\n  background: #ffffff;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.15);\r\n  border-radius: 3px;\r\n}\r\n\r\n.popular-port {\r\n  border: 1px solid #f8f8f8;\r\n  border-radius: 1px;\r\n}",
                    "styleUrl": "./drop-off-location.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-4 border-bottom-0 d-flex justify-content-between\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-transparent  btn-no-border\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('back')\"\r\n  >\r\n    <img src=\"assets/images/mobile-back.svg\" />\r\n  </button>\r\n\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <h4 class=\"text-center\">Drop-Off Location</h4>\r\n\r\n  <app-location-select\r\n    label=\"DROP-OFF LOCATION\"\r\n    [locations]=\"locations\"\r\n    [location]=\"dropOffLocation\"\r\n    (locationChange)=\"modal.close($event)\"\r\n  ></app-location-select>\r\n\r\n  <h4 class=\"mt-3\">Where shall we pick up the Toy?</h4>\r\n  <p class=\"p-style-2\">\r\n    Select a popular port or search for the most convenient one in the field\r\n    above.\r\n  </p>\r\n\r\n  <button\r\n    *ngIf=\"pickUpLocation\"\r\n    (click)=\"sameAsPickUp()\"\r\n    class=\"btn btn-secondary btn-block py-3\"\r\n  >\r\n    Same as Pick Up\r\n  </button>\r\n\r\n  <h4 *ngIf=\"popularMediterraneanPorts\" class=\"mt-3\">\r\n    Popular Mediterranean Ports\r\n  </h4>\r\n  <div *ngIf=\"popularMediterraneanPorts\" class=\"row justify-content-center\">\r\n    <button\r\n      *ngFor=\"let location of popularMediterraneanPorts\"\r\n      class=\"col-5 btn m-1 py-3\"\r\n      (click)=\"modal.close(location)\"\r\n      [class.btn-outline-secondary]=\"location.name !== dropOffLocation?.name\"\r\n      [class.btn-secondary]=\"location.name === dropOffLocation?.name\"\r\n    >\r\n      {{ location.name }}\r\n    </button>\r\n  </div>\r\n\r\n  <h4 *ngIf=\"popularCaribbeanPorts\" class=\"mt-3\">Popular Caribbean Ports</h4>\r\n  <div *ngIf=\"popularCaribbeanPorts\" class=\"row justify-content-center\">\r\n    <button\r\n      *ngFor=\"let location of popularCaribbeanPorts\"\r\n      class=\"col-5 btn m-1 py-3\"\r\n      (click)=\"modal.close(location)\"\r\n      [class.btn-outline-secondary]=\"location.name !== dropOffLocation?.name\"\r\n      [class.btn-secondary]=\"location.name === dropOffLocation?.name\"\r\n    >\r\n      {{ location.name }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "FaqsComponent",
            "id": "component-FaqsComponent-20812ca5db852e3c605439e644578417",
            "file": "src/app/core/faqs/faqs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-faqs",
            "styleUrls": [
                "./faqs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./faqs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "faq",
                    "line": 13,
                    "type": "FAQ | undefined"
                },
                {
                    "name": "faqs",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "Array<FAQ>"
                },
                {
                    "name": "title",
                    "defaultValue": "'Questions about Booking'",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FAQ } from '../models/faqs.model';\r\n\r\n@Component({\r\n  selector: 'app-faqs',\r\n  templateUrl: './faqs.component.html',\r\n  styleUrls: ['./faqs.component.scss'],\r\n})\r\nexport class FaqsComponent implements OnInit {\r\n  @Input() title: string = 'Questions about Booking';\r\n  @Input() faqs: Array<FAQ> = [];\r\n\r\n  @Input() faq: FAQ | undefined;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\n.faq-title {\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  font-style: normal;\r\n\r\n  margin-top: 10px;\r\n  margin-bottom: 2px;\r\n}",
                    "styleUrl": "./faqs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngb-accordion *ngIf=\"faqs.length\" #a=\"ngbAccordion\" activeIds=\"custom-panel-0\" class=\"pb-0 accordion-border\" style=\"border-bottom: none;\">\r\n  <ngb-panel id=\"custom-panel-1\">\r\n    <ng-template ngbPanelHeader>\r\n      <div class=\"d-flex align-items-center justify-content-between\">\r\n        <h2>{{ title }}</h2>\r\n        <button ngbPanelToggle class=\"btn btn-link btn-no-border p-0\">\r\n          <img src=\"/assets/images/Vector.svg\" alt=\"-\" class=\"plus-image\" />\r\n        </button>\r\n      </div>\r\n    </ng-template>\r\n    <ng-template ngbPanelContent>\r\n      <div class=\"pl-2 pb-2\" *ngFor=\"let faq of faqs\">\r\n        <h5 class=\"faq-title mb-1\">{{ faq?.question }}</h5>\r\n        {{ faq?.content }}\r\n      </div>\r\n    </ng-template>\r\n  </ngb-panel>\r\n</ngb-accordion>\r\n"
        },
        {
            "name": "FloatingInputComponent",
            "id": "component-FloatingInputComponent-26b1bc0b058a0b4bbf6dc3fa82475920",
            "file": "src/app/core/floating-input/floating-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-floating-input",
            "styleUrls": [
                "./floating-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./floating-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Label'",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Placeholder'",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 12,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputFocused",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "_e",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "_e",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusOut",
                    "args": [
                        {
                            "name": "_e",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "_e",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-floating-input',\r\n  templateUrl: './floating-input.component.html',\r\n  styleUrls: ['./floating-input.component.scss'],\r\n})\r\nexport class FloatingInputComponent implements OnInit {\r\n  @Input() label: string = 'Label';\r\n  @Input() placeholder: string = 'Placeholder';\r\n\r\n  @Input() value: string | undefined;\r\n  @Output() valueChange = new EventEmitter<string>();\r\n\r\n  inputFocused: boolean = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  focus(_e: Event) {\r\n    this.inputFocused = true;\r\n  }\r\n\r\n  focusOut(_e: Event) {\r\n    this.inputFocused = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".float-container {\r\n  background: #ffffff;\r\n  border: 1px solid #c4c4c4;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  padding: 0 8px;\r\n  position: relative;\r\n}\r\n\r\n.float-container input {\r\n  border: none;\r\n  font-size: 16px;\r\n  outline: 0;\r\n\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n}\r\n\r\nlabel {\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 10px;\r\n  line-height: 14px;\r\n  letter-spacing: 0.2px;\r\n  text-transform: uppercase;\r\n  color: #19303b;\r\n\r\n  position: absolute;\r\n  transform-origin: top left;\r\n  transform: translate(16px, 10px) scale(1);\r\n  transition: all 0.1s ease-in-out;\r\n}\r\n\r\n.float-container.active label {\r\n  transform: translate(0, 4px) scale(0.75);\r\n}\r\n\r\ninput::placeholder {\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #c4c4c4;\r\n}\r\n",
                    "styleUrl": "./floating-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"float-container\" [ngClass]=\"{ active: inputFocused }\">\r\n  <label class=\"ml-n1\">{{ label }}</label>\r\n  <input\r\n    class=\"form-control mt-3 btn-no-border\"\r\n    type=\"text\"\r\n    [placeholder]=\"placeholder\"\r\n    (focus)=\"focus($event)\"\r\n    (focusout)=\"focusOut($event)\"\r\n    [ngModel]=\"value\"\r\n    (ngModelChange)=\"valueChange.emit($event)\"\r\n  />\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-eb3f87f27433f2596d9b9240c9cb1c36",
            "file": "src/app/core/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "footer {\r\n  background: #ffffff;\r\n  // background-color: #F8F8F8;\r\n  // box-shadow: 0px -4px 10px rgba(196, 196, 196, 0.2);\r\n}\r\n\r\n.icon-height{\r\n  max-height: 55px;\r\n}\r\n\r\n.img-height{\r\n  max-height: 20px;\r\n}\r\n\r\n.background{\r\n  background-color: #F8F8F8;\r\n  box-shadow: 0px -4px 10px rgba(196, 196, 196, 0.2);\r\n}\r\n\r\n.info-point img {\r\n  margin: auto;\r\n  display: block;\r\n}\r\n\r\nh5 {\r\n  /* <Style 7> Tyros Pro Medium 18 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 18px;\r\n  line-height: 32px;\r\n  align-items: center;\r\n  text-align: center;\r\n}\r\n\r\nh6 {\r\n  /* <Style 6> Tyros Pro Bold 16 */\r\n\r\n  font-family: \"TyrosPro-Bold\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  color: #19303b;\r\n}\r\n\r\np {\r\n  /* <Mobile P Style 4> Avenir LT Std 45 Book 12 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n\r\n  text-align: center;\r\n  letter-spacing: 0.1px;\r\n}\r\n\r\na {\r\n  /* <Mobile P Style 4> Avenir LT Std 45 Book 12 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  color: #fab900;\r\n\r\n  text-align: center;\r\n  letter-spacing: 0.1px;\r\n}\r\n\r\nul li a {\r\n  /* Roman 16 BOLD */\r\n  font-family: \"AvenirLTStd-Roman\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: 0.5px;\r\n\r\n  color: #19303b;\r\n}\r\n\r\n.copyright {\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n\r\n  color: #c4c4c4;\r\n}\r\n\r\n\r\n@media (max-width: 767px) {\r\n  .center{\r\n    justify-content: center;\r\n  }\r\n}",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer class=\"mt-5\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12 mt-5 info-point\">\r\n        <img src=\"assets/images/ship.svg\" />\r\n        <h5 class=\"mt-3\">Ships Worldwide</h5>\r\n        <p class=\"px-5\">\r\n          We deliver Water Toys directly onboard, anywhere, anytime.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12 mt-5 info-point\">\r\n        <img src=\"assets/images/wallet.svg\" />\r\n        <h5 class=\"mt-3\">Lowest Prices</h5>\r\n        <p class=\"px-5\">We offer the most competitive prices on the market.</p>\r\n      </div>\r\n\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12 mt-5 info-point\">\r\n        <img src=\"assets/images/clock.svg\" />\r\n        <h5 class=\"mt-3\">Need advice</h5>\r\n        <p class=\"px-5\">\r\n          For any questions you can <a href=\"#\">contact us</a> directly.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12 mt-5 info-point\">\r\n        <img src=\"assets/images/sun.svg\" />\r\n        <h5 class=\"mt-3\">Guaranteed Fun</h5>\r\n        <p class=\"px-5\">\r\n          Thrill your friends and guests with the latest Water Toys.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- <hr /> -->\r\n\r\n  <div class=\"container mb-5 pb-4\">\r\n    <div class=\"row justify-content-center my-4 mb-5\">\r\n      <div class=\"col-auto\">\r\n        <img class=\"icon-height\" src=\"assets/images/mastercard.svg\" />\r\n      </div>\r\n      <div class=\"col-auto\">\r\n        <img class=\"icon-height\" src=\"assets/images/visa.svg\" />\r\n      </div>\r\n      <div class=\"col-auto\">\r\n        <img class=\"icon-height\" src=\"assets/images/wire-transfer.svg\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n\r\n<div class=\"background\">\r\n  <div class=\"container\">\r\n    <hr />\r\n    <div class=\"row mt-5\">\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12\">\r\n        <h6>Shop & Learn</h6>\r\n        <ul class=\"list-unstyled mt-4\">\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/store/\">Store</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/terms-conditions/\">Terms & Conditions</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/knowledge-base/\">Knowledge Base</a></li>\r\n\r\n          <!-- <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/seabob/\">Seabob</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/fliteboard/\">Fliteboard</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/radinn/\">Radinn</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/nautibuoy/\">Nautibuoy</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/water-toy-rentals-to-superyachts/inspirations/\">All Products & Accessories</a></li>\r\n          <li class=\"mt-2\"><a href=\"\">Insider</a></li>\r\n          <li class=\"mt-2\"><a href=\"\">Tips & Tricks</a></li> -->\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12\">\r\n        <h6>Water Toys Rental</h6>\r\n        <ul class=\"list-unstyled mt-4\">\r\n          <li class=\"mt-2\"><a\r\n              href=\"https://www.oceanpremium.com/water-toy-rentals-to-superyachts/inspirations/\">Inspirations</a></li>\r\n          <li class=\"mt-2\"><a\r\n              href=\"https://www.oceanpremium.com/water-toy-rentals-to-superyachts/water-toy-rental-in-caribbean/\">Rentals\r\n              in The Caribbean</a></li>\r\n          <li class=\"mt-2\"><a\r\n              href=\"https://www.oceanpremium.com/water-toy-rentals-to-superyachts/water-toy-rental-in-mediterranean/\">Rentals\r\n              in The Med</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/water-toy-rentals-to-superyachts/map/\">Map</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/terms-conditions/\">Terms & Conditions</a></li>\r\n\r\n          <!-- <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/\">B2B Rental Platform</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/rent/seabob-rental/\">Seabob Rental</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/rent/fliteboard-rental/\">Fliteboard Rental</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/rent/efoil-rental/\">eFoil Rental</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/rent/radinn-rental/\">Radinn Rental</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/rent/jetsurf-rental/\">Jetsurf Rental</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/inspirations/all-water-toy-rentals/\">All Water Toys Rental</a></li> -->\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12\">\r\n        <h6>Repair Centre</h6>\r\n        <ul class=\"list-unstyled mt-4\">\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/water-toy-repair/seabob-repair/\">Seabob repair</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/water-toy-repair/fliteboard-repair/\">Fliteboard\r\n              repair</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/#\">Request collection</a></li>\r\n\r\n          <!-- <li class=\"mt-2\"><a href=\"http://forms.monday.com/forms/077e7f8a97d455abbdc4daf6fffa229c?r=use1\">Create Service Request</a></li>\r\n          <li class=\"mt-2\"><a href=\"\">Logistics Arrangements</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/water-toy-repair/\">Seabob & Fliteboard Repair</a></li>\r\n          <li class=\"mt-2\"><a href=\"\">Preventive Maintenance</a></li>\r\n          <li class=\"mt-2\"><a href=\"\">Refurbishment</a></li>\r\n          <li class=\"mt-2\"><a href=\"\">Storage</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://dev01.oceanpremium.com/support/\">Contact & Support</a></li> -->\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"col-lg-3 col-md-6 col-sm-12\">\r\n        <h6>About Ocean Premium</h6>\r\n        <ul class=\"list-unstyled mt-4\">\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/blog/\">Blog</a></li>\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/about/\">About</a></li>\r\n          <!-- <li class=\"mt-2\"><a href=\"\">News</a></li> -->\r\n          <!-- <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/terms-conditions/\">Terms & Conditions</a></li> -->\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/privacy-policy/\">Privacy Policy</a></li>\r\n          <!-- <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/rental/bookings\">My Account</a></li> -->\r\n          <li class=\"mt-2\"><a href=\"https://www.oceanpremium.com/contact/\">Contact</a></li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row mb-5\">\r\n      <div class=\"col-lg-6 col-md-6 col-sm-12 center\">\r\n        <div class=\"row justify-content-center my-4\">\r\n          <div class=\"col\">\r\n            <a href=\"https://www.oceanpremium.com/\"><img height=\"46\" src=\"assets/images/logo.png\" /></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-lg-6 col-md-6 col-sm-12 center\">\r\n        <div class=\"row justify-content-lg-end justify-content-md-end my-4\">\r\n          <div class=\"col-auto\">\r\n            <a href=\"https://www.facebook.com/oceanpremium\"><img class=\"img-height\" src=\"assets/images/facebook.svg\" /></a>\r\n          </div>\r\n          <div class=\"col-auto\">\r\n            <a href=\"https://www.instagram.com/oceanpremium/\"><img class=\"img-height\" src=\"assets/images/instagram.svg\" /></a>\r\n          </div>\r\n          <div class=\"col-auto\">\r\n            <a href=\"https://twitter.com/oceanpremium/\"><img class=\"img-height\" src=\"assets/images/twitter.svg\" /></a>\r\n          </div>\r\n          <div class=\"col-auto\">\r\n            <a href=\"https://www.linkedin.com/company/oceanpremium/about/\"><img class=\"img-height\" src=\"assets/images/linkedin.svg\" /></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row justify-content-center mt-5 mb-4\">\r\n      <div class=\"col-auto\">\r\n        <p class=\"copyright\">\r\n          © 2010 - 2021 Ocean Premium - Water Toys anytime anywhere.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "ForgotPasswordComponent",
            "id": "component-ForgotPasswordComponent-4bd82a5a27f4602dccbb9d4f07f20409",
            "file": "src/app/core/forgot-password/forgot-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password",
            "styleUrls": [
                "./forgot-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "forgotPasswordRequest",
                    "defaultValue": "{\r\n    email: ''\r\n  }",
                    "type": "ForgotPasswordRequest",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "dismissToSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "sendRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ForgotPasswordRequest, NgAuthService } from '@appstrax/ng-auth';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\r\n  forgotPasswordRequest: ForgotPasswordRequest = {\r\n    email: ''\r\n  };\r\n\r\n  loading: boolean = false;\r\n  error: string | null = null;\r\n\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private ngAuthService: NgAuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (this.user) {\r\n      this.router.navigate(['/bookings']);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async sendRequest() {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    try {\r\n      localStorage.setItem('UserEmail', this.forgotPasswordRequest.email);\r\n      const res = await this.ngAuthService.forgotPassword(this.forgotPasswordRequest);\r\n      this.router.navigate(['auth/reset-password']);\r\n    } catch (err) {\r\n      this.error = 'Failed to send email, please try again or contact support.';\r\n    }\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  confirm(): boolean {\r\n    if (!this.loading && this.forgotPasswordRequest.email) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  dismissToSignup() {\r\n    this.router.navigate(['auth/sign-up']);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh6 {\r\n  /* <Style 6> Tyros Pro Bold 16 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 26px;\r\n  text-align: center;\r\n}\r\n\r\ninput {\r\n  height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn.btn-link {\r\n  color: #fab900;\r\n  padding: 0;\r\n}\r\n\r\n.red {\r\n  color: red;\r\n}\r\n",
                    "styleUrl": "./forgot-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mb-5 pb-5\">\r\n    <h4>Forgot Password?</h4>\r\n    <h2>Please enter your email below</h2>\r\n\r\n    <div class=\"row justify-content-center\">\r\n        <div class=\"col-sm-12 col-md-12 col-lg-6\">\r\n            <form (submit)=\"sendRequest()\">\r\n                <div class=\"form-group mt-4\">\r\n                    <input [disabled]=\"loading\" [(ngModel)]=\"forgotPasswordRequest.email\" name=\"email\" type=\"email\"\r\n                        class=\"form-control\" placeholder=\"Email\" />\r\n                </div>\r\n                <button [disabled]=\"!confirm()\" class=\"btn btn-primary btn-lg btn-block py-3\">\r\n                    {{ loading ? \"Loading...\" : \"Submit\" }}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n    <h6 *ngIf=\"error\" class=\"mt-3 red\">\r\n        {{ error }}\r\n    </h6>\r\n\r\n    <h6 class=\"mt-3\">\r\n        Don't have an account? <button (click)=\"dismissToSignup()\" class=\"btn btn-link\">Register</button>\r\n    </h6>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a78c7a2189a05cc5c80f4af064699632",
            "file": "src/app/core/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cartSize",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  cartSize: number = 0;\r\n\r\n  constructor(private bookingService: BookingService,\r\n    private ngAuthService: NgAuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.cartSize = this.bookingService.getBookings().length;\r\n    this.bookingService.bookingsChanged.subscribe(() => {\r\n      this.cartSize = this.bookingService\r\n        .getBookings()\r\n        .filter((b) => !b.paid).length;\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.ngAuthService.logout();\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    const user = this.ngAuthService.getAuthenticatedUser();\r\n    if (user) { return false; } else { return true; }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar {\r\n  height: 100px;\r\n  box-shadow: 0px 0px 20px rgba(214, 214, 214, 0.5);\r\n}\r\n\r\n.nav-item {\r\n  color: #19303b;\r\n}\r\n\r\n.nav-item.active {\r\n  color: #fab900;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-transparent mb-4\">\r\n  <div class=\"container\">\r\n    <a class=\"navbar-brand\" href=\"#\">\r\n      <img src=\"assets/images/logo.png\" height=\"32\" />\r\n    </a>\r\n\r\n    <div class=\"d-flex justify-content-between\">\r\n      <a *ngIf=\"isLoggedIn()\" class=\"nav-item pr-5 pointer\" routerLink=\"/auth/login\">Login</a>\r\n      <a *ngIf=\"isLoggedIn()\" class=\"nav-item pr-5 pointer\" routerLink=\"/auth/forgot-password\">Forgot Password</a>\r\n      <a\r\n        *ngIf=\"!isLoggedIn()\"\r\n        class=\"nav-item pr-5\"\r\n        routerLink=\"/auth/login\"\r\n        routerLinkActive=\"active\"\r\n        (click)=\"logout()\"\r\n        >Logout</a\r\n      >\r\n      <a class=\"nav-item\" routerLinkActive=\"active\" routerLink=\"/\">Rent</a>\r\n\r\n      <a class=\"nav-item pl-5\" routerLinkActive=\"active\" href=\"https://www.oceanpremium.com/store/\">Buy</a>\r\n\r\n      <a class=\"nav-item active pl-5\" routerLink=\"/bookings\">\r\n        <img src=\"assets/images/cart.svg\" />\r\n        &nbsp; {{ cartSize }}</a\r\n      >\r\n    </div>\r\n  </div>\r\n</nav>\r\n<!-- \r\n<nav\r\n  class=\"navbar navbar-fixed-top navbar-toggleable-sm navbar-inverse bg-inverse\"\r\n>\r\n  <div class=\"container d-flex flex-row flex-md-nowrap flex-wrap\">\r\n    <a\r\n      href=\"#\"\r\n      class=\"hidden-lg-up my-2 mr-3\"\r\n      data-toggle=\"collapse\"\r\n      data-target=\"#navbarCollapse\"\r\n      aria-controls=\"navbarCollapse\"\r\n      aria-expanded=\"false\"\r\n    >\r\n      <i-bs name=\"list\" width=\"2rem\" height=\"2rem\"></i-bs>\r\n    </a>\r\n    <a class=\"navbar-brand\" href=\"#\">Brand</a>\r\n    <div\r\n      class=\"navbar-collapse collapse flex-md-unordered flex-last\"\r\n      id=\"navbarCollapse\"\r\n    >\r\n      <ul class=\"navbar-nav\">\r\n        <li class=\"nav-item active\">\r\n          <a class=\"nav-link\" href=\"#\"\r\n            >Link <span class=\"sr-only\">Home</span></a\r\n          >\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" href=\"#\">Link</a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" href=\"#\">Link</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div class=\"d-flex ml-auto\">\r\n      <ul class=\"navbar-nav\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" href=\"#\">Right</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div class=\"hidden-md-up w-100\"></div>\r\n  </div>\r\n</nav> -->\r\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-ad4e401105a47bbefdac3637d246d6c8",
            "file": "src/app/admin/components/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-layout',\r\n  templateUrl: './layout.component.html',\r\n  styleUrls: ['./layout.component.scss']\r\n})\r\nexport class LayoutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-admin-header></app-admin-header>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "LocationSelectComponent",
            "id": "component-LocationSelectComponent-83917ea272d72af5445bdb6162c61155",
            "file": "src/app/core/location-select/location-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-location-select",
            "styleUrls": [
                "./location-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./location-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'PICK-UP'",
                    "line": 26,
                    "type": "String"
                },
                {
                    "name": "location",
                    "line": 23,
                    "type": "Location | undefined"
                },
                {
                    "name": "locations",
                    "line": 40,
                    "type": ""
                },
                {
                    "name": "showCollect",
                    "defaultValue": "false",
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "showDeliver",
                    "defaultValue": "false",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "locationChange",
                    "defaultValue": "new EventEmitter<Location>()",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_allLocations",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "filteredLocations",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "fuse",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isTyping",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "locationSearch",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "locationSearchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'locationSearchInput'"
                        }
                    ]
                },
                {
                    "name": "locationSelect",
                    "type": "NgbDropdown",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'locationSelect'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "locationClick",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "locationSearchChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "openLocationSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Location } from '../models/location.model';\r\n\r\nimport Fuse from 'fuse.js';\r\n\r\n@Component({\r\n  selector: 'app-location-select',\r\n  templateUrl: './location-select.component.html',\r\n  styleUrls: ['./location-select.component.scss'],\r\n})\r\nexport class LocationSelectComponent {\r\n  @ViewChild('locationSelect') locationSelect!: NgbDropdown;\r\n  @ViewChild('locationSearchInput') locationSearchInput!: ElementRef;\r\n\r\n  @Input() location: Location | undefined;\r\n  @Input() showCollect: boolean = false;\r\n  @Input() showDeliver: boolean = false;\r\n  @Input() label: String = 'PICK-UP';\r\n  @Output() locationChange = new EventEmitter<Location>();\r\n\r\n  isTyping = false;\r\n\r\n  locationSearch = '';\r\n\r\n  _allLocations: Array<Location> = [];\r\n  filteredLocations: Array<Location> = [];\r\n\r\n  fuse?: any;\r\n\r\n  constructor() {}\r\n\r\n  @Input() set locations(locations: Array<Location>) {\r\n    this._allLocations = locations;\r\n    this.filteredLocations = locations;\r\n\r\n    this.fuse = new Fuse(this._allLocations, {\r\n      keys: ['name'],\r\n    });\r\n  }\r\n\r\n  openLocationSelect() {\r\n    if (!this.locationSelect) return;\r\n\r\n    this.isTyping = true;\r\n    setTimeout(() => {\r\n      if (this.locationSearchInput) {\r\n        this.locationSearchInput.nativeElement.focus();\r\n      }\r\n      this.locationSelect.open();\r\n    }, 0);\r\n  }\r\n\r\n  locationSearchChange() {\r\n    if (!this.locationSearch) {\r\n      this.filteredLocations = this._allLocations;\r\n      return;\r\n    }\r\n\r\n    const result = this.fuse.search(this.locationSearch);\r\n    this.filteredLocations = result.map((res: any) => res.item);\r\n  }\r\n\r\n  locationClick(location: Location) {\r\n    this.location = location;\r\n    this.locationChange.emit(this.location);\r\n    setTimeout(() => {\r\n      this.isTyping = false;\r\n      this.locationSelect.close();\r\n      this.locationSearch = '';\r\n    }, 0);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select-container {\r\n  background: #ffffff;\r\n  border: 1px solid #c4c4c4;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  position: relative;\r\n  cursor: pointer;\r\n  height: 64px;\r\n}\r\n\r\n.select-container button {\r\n  border: none;\r\n  outline: 0;\r\n  -moz-appearance: none;\r\n  -webkit-appearance: none;\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 18px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n}\r\nlabel {\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 10px;\r\n  line-height: 14px;\r\n  letter-spacing: 0.2px;\r\n  text-transform: uppercase;\r\n  color: #19303b;\r\n  padding-bottom: 6px;\r\n}\r\n.grey {\r\n  color: #c4c4c4 !important;\r\n}\r\n\r\n.location-dropdown-menu {\r\n  // width: 150%;\r\n  max-height: 280px;\r\n  overflow-y: auto;\r\n  min-width: 100% !important;\r\n}\r\n\r\n.water-toy-location-asker {\r\n  font-family: \"TyrosPro-Bold\";\r\n  font-size: 16px;\r\n  position: relative;\r\n  padding-bottom: 0;\r\n  padding-top: 16px;\r\n  text-align: left;\r\n  padding-left: 29.5px;\r\n  padding-right: 29.5px;\r\n}\r\n\r\n.drop-down-item-1 {\r\n  padding-top: 8px;\r\n  padding-bottom: 9px;\r\n  font-size: 20px;\r\n  position: static;\r\n  padding-left: 52px;\r\n  font-family: \"AvenirLTStd-Book\";\r\n}\r\n\r\n.location-image {\r\n  padding-right: 20px;\r\n}\r\n\r\n.drop-down-item-2 {\r\n  padding-top: 8px;\r\n  padding-bottom: 9px;\r\n  font-size: 20px;\r\n  position: static;\r\n  padding-left: 82px;\r\n  font-family: \"AvenirLTStd-Book\";\r\n}\r\n\r\n.drop-down-item-3 {\r\n  padding-top: 8px;\r\n  padding-bottom: 9px;\r\n  font-size: 20px;\r\n  position: static;\r\n  padding-left: 82px;\r\n  font-family: \"AvenirLTStd-Book\";\r\n}\r\n\r\n.drop-down-item-4 {\r\n  padding-top: 8px;\r\n\r\n  font-size: 20px;\r\n  position: static;\r\n  padding-left: 82px;\r\n  font-family: \"AvenirLTStd-Book\";\r\n}\r\n\r\n#locationSelectInput {\r\n  border: unset !important;\r\n  border-bottom: 1px solid #c4c4c4 !important;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .location-dropdown-menu {\r\n    width: 100%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./location-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 36
            },
            "accessors": {
                "locations": {
                    "name": "locations",
                    "setSignature": {
                        "name": "locations",
                        "type": "void",
                        "args": [
                            {
                                "name": "locations",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "locations",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div\r\n  class=\"select-container py-1\"\r\n  (click)=\"$event.stopPropagation(); openLocationSelect()\"\r\n>\r\n  <label class=\"mb-n1 pl-3 mt-2\">{{ label }}</label>\r\n\r\n  <div ngbDropdown #locationSelect=\"ngbDropdown\" class=\"mt-n1 mb-2\">\r\n    <button *ngIf=\"!isTyping\" class=\"btn btn-lg p-0 pl-3\" type=\"button\">\r\n      {{ location?.name }}\r\n    </button>\r\n    \r\n    <input\r\n      id=\"locationSelectInput\"\r\n      #locationSearchInput\r\n      (click)=\"$event.stopPropagation(); openLocationSelect()\"\r\n      *ngIf=\"isTyping\"\r\n      type=\"text\"\r\n      autocomplete=\"new-field-1\"\r\n      class=\"form-control btn-no-border\"\r\n      [(ngModel)]=\"locationSearch\"\r\n      (keyup)=\"locationSearchChange()\"\r\n    />\r\n    <div class=\"location-dropdown-menu mt-3\" ngbDropdownMenu>\r\n      <div *ngIf=\"showCollect\" >\r\n        <h1 class=\"water-toy-location-asker\">\r\n          Where do you want the Water Toy to be Collected from?<br />\r\n        </h1>\r\n      </div>\r\n      <div *ngIf=\"showDeliver\" >\r\n        <h1 class=\"water-toy-location-asker\">\r\n          Where do you want the Water Toy to be Delivered to?\r\n        </h1>\r\n      </div>\r\n\r\n      <div\r\n        *ngFor=\"let location of filteredLocations\"\r\n        ngbDropdownItem\r\n        class=\"drop-down-item-1\"\r\n        (click)=\"$event.stopPropagation(); locationClick(location)\"\r\n      >\r\n        <p>\r\n          <img\r\n            src=\"/assets/images/location.svg\"\r\n            alt=\"-\"\r\n            class=\"location-image\"\r\n          />\r\n          {{ location.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-c96c944cf2a564ef55ae5328f372faea",
            "file": "src/app/core/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authRequest",
                    "defaultValue": "{\r\n    email: '',\r\n    password: '',\r\n  }",
                    "type": "AuthRequest",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissToSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthRequest, NgAuthService } from '@appstrax/ng-auth';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  authRequest: AuthRequest = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n  loading: boolean = false;\r\n  error: string | null = null;\r\n\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private ngAuthService: NgAuthService,\r\n    private router: Router,\r\n    // @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // if (isPlatformServer(this.platformId)) return;\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (this.user) {\r\n      this.router.navigate(['/bookings']);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async login() {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    try {\r\n      const user = await this.ngAuthService.login(this.authRequest);\r\n      history.back();\r\n    } catch (err) {\r\n      this.error = 'Failed to login, please try again or contact support.';\r\n    }\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  dismissToSignup() {\r\n    this.router.navigate(['auth/sign-up']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh6 {\r\n  /* <Style 6> Tyros Pro Bold 16 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 26px;\r\n  text-align: center;\r\n}\r\n\r\ninput {\r\n  height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn.btn-link {\r\n  color: #fab900;\r\n  padding: 0;\r\n}\r\n\r\n.red {\r\n  color: red;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mb-5 pb-5\">\r\n    <h4>Welcome Back</h4>\r\n    <h2>Log In</h2>\r\n\r\n    <div class=\"row justify-content-center\">\r\n        <div class=\"col-sm-12 col-md-12 col-lg-6\">\r\n            <form (submit)=\"login()\">\r\n                <div class=\"form-group mt-4\">\r\n                    <input [disabled]=\"loading\" [(ngModel)]=\"authRequest.email\" name=\"email\" type=\"email\"\r\n                        class=\"form-control\" placeholder=\"Email\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input [disabled]=\"loading\" [(ngModel)]=\"authRequest.password\" name=\"password\" type=\"password\"\r\n                        class=\"form-control\" placeholder=\"Password\" />\r\n                </div>\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary btn-lg btn-block py-3\">\r\n                    {{ loading ? \"Loading...\" : \"Log in\" }}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n    <h6 *ngIf=\"error\" class=\"mt-3 red\">\r\n        {{ error }}\r\n    </h6>\r\n\r\n    <h6 class=\"mt-3\">\r\n        Don't have an account? <button (click)=\"dismissToSignup()\" class=\"btn btn-link\">Register</button>\r\n    </h6>\r\n</div>"
        },
        {
            "name": "LoginModalComponent",
            "id": "component-LoginModalComponent-36cf7e1f730781594acece0492eea7ef",
            "file": "src/app/core/modals/login-modal/login-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-modal",
            "styleUrls": [
                "./login-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authRequest",
                    "defaultValue": "{\r\n    email: '',\r\n    password: '',\r\n  }",
                    "type": "AuthRequest",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissToSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthRequest, NgAuthService } from '@appstrax/ng-auth';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-login-modal',\r\n  templateUrl: './login-modal.component.html',\r\n  styleUrls: ['./login-modal.component.scss'],\r\n})\r\nexport class LoginModalComponent implements OnInit {\r\n  authRequest: AuthRequest = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n  loading: boolean = false;\r\n  error: string | null = null;\r\n\r\n  constructor(\r\n    public modal: NgbActiveModal,\r\n    private ngAuthService: NgAuthService\r\n  ) { }\r\n  ngOnInit(): void { }\r\n\r\n  async login() {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    try {\r\n      const user = await this.ngAuthService.login(this.authRequest);\r\n      this.modal.close(user);\r\n    } catch (err) {\r\n      this.error = 'Failed to login, please try again or contact support.';\r\n    }\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  dismissToSignup() {\r\n    this.modal.dismiss('signup');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh6 {\r\n  /* <Style 6> Tyros Pro Bold 16 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 26px;\r\n  text-align: center;\r\n}\r\n\r\ninput {\r\n  height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn.btn-link {\r\n  color: #fab900;\r\n  padding: 0;\r\n}\r\n\r\n.red {\r\n  color: red;\r\n}\r\n",
                    "styleUrl": "./login-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-4 border-bottom-0\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <div class=\"container mb-5 pb-5\">\r\n    <h4>Welcome Back</h4>\r\n    <h2>Log In</h2>\r\n\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-sm-12 col-md-12 col-lg-6\">\r\n        <form (submit)=\"login()\">\r\n          <div class=\"form-group mt-4\">\r\n            <input\r\n              [disabled]=\"loading\"\r\n              [(ngModel)]=\"authRequest.email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              class=\"form-control\"\r\n              placeholder=\"Email\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input\r\n              [disabled]=\"loading\"\r\n              [(ngModel)]=\"authRequest.password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              class=\"form-control\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </div>\r\n          <button\r\n            [disabled]=\"loading\"\r\n            class=\"btn btn-primary btn-lg btn-block py-3\"\r\n          >\r\n            {{ loading ? \"Loading...\" : \"Log in\" }}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <h6 *ngIf=\"error\" class=\"mt-3 red\">\r\n      {{ error }}\r\n    </h6>\r\n\r\n    <h6 class=\"mt-3\">\r\n      Don't have an account? <button (click)=\"dismissToSignup()\" class=\"btn btn-link\">Register</button>\r\n    </h6>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "MyBookingsComponent",
            "id": "component-MyBookingsComponent-627dae6312ba16582da82633ec1aedb3",
            "file": "src/app/booking/pages/my-bookings/my-bookings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-bookings",
            "styleUrls": [
                "./my-bookings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./my-bookings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "bookings",
                    "defaultValue": "[]",
                    "type": "Array<Booking>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "manageBooking",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openCreateBookingModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Location } from 'src/app/core/models/location.model';\r\nimport { LocationService } from 'src/app/core/services/location.service';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { AddBookingComponent } from '../../modals/add-booking/add-booking.component';\r\nimport { Availability } from '../../models/availability.model';\r\nimport { Booking } from '../../models/booking.model';\r\nimport { BookingService } from '../../services/bookings.service';\r\n\r\n@Component({\r\n  selector: 'app-my-bookings',\r\n  templateUrl: './my-bookings.component.html',\r\n  styleUrls: ['./my-bookings.component.scss'],\r\n})\r\nexport class MyBookingsComponent implements OnInit {\r\n  bookings: Array<Booking> = [];\r\n\r\n  booking: Booking | undefined;\r\n\r\n  locations: Array<Location> = [];\r\n\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private bookingService: BookingService,\r\n    private router: Router,\r\n    private modalService: NgbModal,\r\n    private locationService: LocationService,\r\n    private ngAuthService: NgAuthService\r\n  ) { }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.bookings = this.bookingService.getBookings();\r\n\r\n    this.bookings.forEach((b) => {\r\n      b.checkingAvailability = true;\r\n      this.bookingService\r\n        .productsAvailability(b)\r\n        .then((a) => {\r\n          b.checkingAvailability = false;\r\n        })\r\n        .catch((err) => {\r\n          b.checkingAvailability = false;\r\n        });\r\n    });\r\n\r\n    this.bookings = this.bookings.filter(b => {\r\n      if (b.paid) {\r\n        return null;\r\n      } else {\r\n        return b;\r\n      }\r\n    });\r\n\r\n    this.locations = await this.locationService.getLocations();\r\n  }\r\n\r\n  openCreateBookingModal() {\r\n    const modal = this.modalService.open(AddBookingComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n    modal.componentInstance.locations = this.locations;\r\n\r\n    modal.dismissed.subscribe((reason: 'back' | null) => {\r\n      if (!reason) return;\r\n    });\r\n\r\n    modal.result\r\n      .then((response: { booking: Booking; product: Product | undefined }) => {\r\n        this.bookingService.createBooking(response.booking);\r\n        this.ngOnInit();\r\n      })\r\n      .catch((err) => {\r\n        console.log('add booking error: ', err);\r\n      });\r\n  }\r\n\r\n  deleteBooking(booking: Booking) {\r\n    this.bookings = this.bookingService.deleteBooking(booking);\r\n  }\r\n\r\n  manageBooking(booking: Booking) {\r\n    this.router.navigate(['bookings', booking.id]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media (max-width: 575px) {\r\n  .container {\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 991px) {\r\n  .mobile{\r\n    display:none!important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./my-bookings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"fs-36 tyros-reg\">My Bookings</div>\r\n\r\n  <button class=\"btn btn-transparent p-0 mt-3 btn-no-border\" (click)=\"openCreateBookingModal()\">\r\n    <img src=\"assets/images/plus-orange.svg\" /> CREATE A NEW BOOKING\r\n  </button>\r\n\r\n  <div class=\"mobile\">\r\n    <hr class=\"mt-4\" />\r\n  </div>\r\n\r\n  <div class=\"my-3\">\r\n    <app-booking-list-item *ngFor=\"let booking of bookings\" [booking]=\"booking\" (deleteBooking)=\"deleteBooking(booking)\"\r\n    (manageBooking)=\"manageBooking(booking)\"></app-booking-list-item>\r\n  </div>\r\n  \r\n  <div class=\"my-5\">\r\n    <app-we-specialize></app-we-specialize>\r\n  </div>\r\n</div>"
        },
        {
            "name": "MyBookingsListItemComponent",
            "id": "component-MyBookingsListItemComponent-5f6b39adee6ee0bdc11b876601a27e61",
            "file": "src/app/core/my-bookings-list-item/my-bookings-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-bookings-list-item",
            "styleUrls": [
                "./my-bookings-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./my-bookings-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "booking",
                    "line": 13,
                    "type": "Booking | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "manageButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { Product } from 'src/app/product/models/product.model';\r\n\r\n@Component({\r\n  selector: 'app-my-bookings-list-item',\r\n  templateUrl: './my-bookings-list-item.component.html',\r\n  styleUrls: ['./my-bookings-list-item.component.scss'],\r\n})\r\nexport class MyBookingsListItemComponent implements OnInit {\r\n  @Input() booking: Booking | undefined;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  manageButtonClicked() {\r\n    this.router.navigate(['bookings', this.booking!.id!]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n  //display: none;\r\n}\r\n\r\n.btn {\r\n  width: 200px;\r\n  height: 44px;\r\n  font-size: 14px;\r\n}\r\n\r\n.small-grey-font {\r\n  color: #C4C4C4;\r\n  font-size: 14px;\r\n  font-family: AvenirLTStd-Light;\r\n} \r\n\r\n.flex-right {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n}\r\n\r\n.img {\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 40%;\r\n  object-fit: contain;\r\n}\r\n\r\n.array-number {\r\n  font-size: 30px;\r\n}\r\n\r\n.plus {\r\n  width: 17px;\r\n}\r\n\r\n.h-64 {\r\n  height: 64px;\r\n}\r\n\r\n.img-2 {\r\n  width: 80%;\r\n}\r\n\r\n.img-3 {\r\n  width: 90%;\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .first {\r\n    display: none !important;\r\n  }\r\n\r\n  .card {\r\n    display: contents;\r\n  }\r\n\r\n  .counter-2 {\r\n    display: none !important;\r\n  }\r\n\r\n  .display {\r\n    display: contents;\r\n  }\r\n}\r\n\r\n@media (max-width: 767px) {\r\n  .btn {\r\n    width: 100%;\r\n  }\r\n\r\n  .mobile {\r\n    display: none !important;\r\n  }\r\n\r\n  .counter-1 {\r\n    display: none !important;\r\n  }\r\n\r\n  .counter-2 {\r\n    display: contents !important;\r\n  }\r\n\r\n  .img-3 {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .col-4 {\r\n    padding-left: 0;\r\n  }\r\n\r\n  .img {\r\n    width: 9vw;\r\n  }\r\n\r\n  .plus-sign {\r\n    width: 17px;\r\n  }\r\n}",
                    "styleUrl": "./my-bookings-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"first row d-flex justify-content-between align-items-center no-gutters\"\r\n>\r\n  <div class=\"d-flex align-items-center\">\r\n    <div class=\"pr-4\">\r\n      <img src=\"assets/images/close.svg\" />\r\n    </div>\r\n    <div>\r\n      <div class=\"fs-24 avenir-light fw-600\">{{ booking?.yachtName }}</div>\r\n      <div class=\"fs-24 avenir-light\">\r\n        {{ booking?.location?.collection?.name }} -\r\n        {{ booking?.location?.delivery?.name }}\r\n      </div>\r\n      <div class=\"fs-24 avenir-light\">\r\n        {{ booking?.period?.fromDate?.day }}.{{\r\n          booking?.period?.fromDate?.month\r\n        }}.{{ booking?.period?.fromDate?.year }} -\r\n        {{ booking?.period?.toDate?.day }}.{{\r\n          booking?.period?.toDate?.month\r\n        }}.{{ booking?.period?.toDate?.year }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-6\" *ngIf=\"booking?.products?.length == 1\">\r\n    <div\r\n      class=\"row no-gutters d-flex justify-content-center align-items-center px-3\"\r\n      *ngIf=\"booking?.products\"\r\n    >\r\n      <div class=\"col center\">\r\n        <img\r\n          *ngIf=\"booking && booking?.products && booking?.products!.length > 0\"\r\n          class=\"img\"\r\n          [src]=\"booking?.products![0].imageThumbnail?.url\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-6\" *ngIf=\"booking?.products?.length == 2\">\r\n    <div\r\n      class=\"row no-gutters d-flex justify-content-center align-items-center px-3\"\r\n      *ngIf=\"booking?.products\"\r\n    >\r\n      <div class=\"col center\">\r\n        <img\r\n          class=\"img-2\"\r\n          *ngIf=\"booking?.products!.length > 0\"\r\n          [src]=\"booking?.products![0].imageThumbnail?.url\"\r\n        />\r\n      </div>\r\n      <img\r\n        class=\"plus\"\r\n        *ngIf=\"booking?.products!.length > 1\"\r\n        src=\"assets/images/plus.svg\"\r\n      />\r\n      <div class=\"col center\" *ngIf=\"booking?.products!.length > 1\">\r\n        <img class=\"img-2\" [src]=\"booking?.products![1].imageThumbnail?.url\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-6\" *ngIf=\"booking?.products!.length > 2\">\r\n    <div\r\n      class=\"row no-gutters d-flex justify-content-center align-items-center px-3\"\r\n      *ngIf=\"booking?.products\"\r\n    >\r\n      <div class=\"col center\">\r\n        <img\r\n          class=\"img-3\"\r\n          *ngIf=\"booking && booking?.products && booking?.products!.length > 0\"\r\n          [src]=\"booking?.products![0].imageThumbnail?.url\"\r\n        />\r\n      </div>\r\n      <img\r\n        class=\"plus\"\r\n        *ngIf=\"booking?.products!.length > 1\"\r\n        src=\"assets/images/plus.svg\"\r\n      />\r\n      <div class=\"col center\" *ngIf=\"booking?.products!.length > 1\">\r\n        <img class=\"img-3\" [src]=\"booking?.products![1].imageThumbnail?.url\" />\r\n      </div>\r\n      <img\r\n        class=\"plus\"\r\n        *ngIf=\"booking?.products!.length > 2\"\r\n        src=\"assets/images/plus.svg\"\r\n      />\r\n      <div class=\"col center\" *ngIf=\"booking?.products!.length > 2\">\r\n        <img class=\"img-3\" [src]=\"booking?.products![2].imageThumbnail?.url\" />\r\n      </div>\r\n      <div class=\"center\" *ngIf=\"booking?.products!.length > 3\">\r\n        <img class=\"plus\" src=\"assets/images/plus.svg\" />\r\n        <div class=\"fs-30 pl-2 tyros-reg\">\r\n          {{ booking?.products!.length - 3 }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"flex-right\">\r\n    <div class=\"fs-24 tyros-reg\">\r\n      €{{ booking?.availability?.grandTotalPriceWithVat }}\r\n    </div>\r\n    <p class=\"small-grey-font\">Total excl. Security Deposit</p>\r\n    <button class=\"btn btn-primary btn-block\" (click)=\"manageButtonClicked()\">\r\n      MANAGE\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- <div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <img class=\"pb-3\" src=\"assets/images/close.svg\">\r\n    <div class=\"fs-24 avenir-light fw-600\">Yacht Name | Greece - Capri</div>\r\n    <div class=\"fs-24 avenir-light\">16.03.2021 - 28.03.2021</div>\r\n\r\n    <div class=\"display col-6\" *ngIf=\"this.currentProductBookings.length == 1\">\r\n      <div class=\"row no-gutters d-flex justify-content-center align-items-center px-3\" *ngIf=\"this.currentProductBookings\">\r\n        <div class=\"col center\">\r\n          <img *ngIf=\"this.currentProductBookings.length > 0\" class=\"img\" [src]=\"currentProductBookings[0].imageThumbnail?.url\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n    <div class=\"display col-6\" *ngIf=\"this.currentProductBookings.length == 2\">\r\n      <div class=\"row no-gutters d-flex justify-content-center align-items-center px-3\" *ngIf=\"this.currentProductBookings\">\r\n        <div class=\"col center\">\r\n          <img class=\"img-2\" *ngIf=\"this.currentProductBookings.length > 0\" [src]=\"currentProductBookings[0].imageThumbnail?.url\">\r\n        </div>\r\n        <img class=\"plus\" *ngIf=\"this.currentProductBookings.length > 1\" src=\"assets/images/plus.svg\">\r\n        <div class=\"col center\" *ngIf=\"currentProductBookings.length > 1\">\r\n          <img class=\"img-2\" [src]=\"currentProductBookings[1].imageThumbnail?.url\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n    <div class=\"display col-6\" *ngIf=\"this.currentProductBookings.length > 2\">\r\n      <div class=\"row no-gutters d-flex justify-content-center align-items-center px-3\" *ngIf=\"this.currentProductBookings\">\r\n        <div class=\"mobile col center\">\r\n          <img class=\"img-3\" *ngIf=\"this.currentProductBookings.length > 0\" [src]=\"currentProductBookings[0].imageThumbnail?.url\">\r\n        </div>\r\n        <img class=\"mobile plus\" *ngIf=\"this.currentProductBookings.length > 1\" src=\"assets/images/plus.svg\">\r\n        <div class=\"col center\" *ngIf=\"currentProductBookings.length > 1\">\r\n          <img class=\"img-3\" [src]=\"currentProductBookings[1].imageThumbnail?.url\">\r\n        </div>\r\n        <img class=\"plus\" *ngIf=\"this.currentProductBookings.length > 2\" src=\"assets/images/plus.svg\">\r\n        <div class=\"col center\" *ngIf=\"currentProductBookings.length > 2\">\r\n          <img class=\"img-3\" [src]=\"currentProductBookings[2].imageThumbnail?.url\">\r\n        </div>\r\n        <div class=\"center\" *ngIf=\"this.currentProductBookings.length > 3\"> \r\n          <img class=\"plus\" src=\"assets/images/plus.svg\">\r\n          <div class=\"counter-1 fs-30 pl-2 tyros-reg\">{{ this.currentProductBookings.length - 3 }}</div>\r\n          <div class=\"counter-2 fs-30 pl-2 tyros-reg\">{{ this.currentProductBookings.length - 2 }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"d-flex flex-column align-items-end justify-content-end\">\r\n      <div class=\"fs-24 tyros-reg\">€7,130.00</div>\r\n      <p class=\"small-grey-font\">Total excl. Security Deposit</p>\r\n      <button class=\"btn btn-primary btn-block\" (click)=\"manageButtonClicked()\">MANAGE</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<hr class=\"mb-5\"> -->\r\n"
        },
        {
            "name": "NewQuestionComponent",
            "id": "component-NewQuestionComponent-1bf4778a0f76ad0978c7a2b0fefbda37",
            "file": "src/app/core/new-question/new-question.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-question",
            "styleUrls": [
                "./new-question.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-question.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "question",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { StringMappingType } from 'typescript';\r\n\r\n@Component({\r\n  selector: 'app-new-question',\r\n  templateUrl: './new-question.component.html',\r\n  styleUrls: ['./new-question.component.scss'],\r\n})\r\nexport class NewQuestionComponent implements OnInit {\r\n  question?: string;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    const url = this.router.url;\r\n    if (url.includes('bookings')) {\r\n      this.question = 'Renting';\r\n    }\r\n    if(url.includes('product')) {\r\n      this.question = 'Renting';\r\n    }\r\n    if(url.includes('bookings/my-bookings')) {\r\n      this.question = 'Booking';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".question-text {\r\n  font-size: 38px;\r\n  font-family: 'TyrosPro-Regular';\r\n}\r\n\r\n.height-166 {\r\n  height: 166px;\r\n}",
                    "styleUrl": "./new-question.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<hr class=\"mt-5\">\r\n<div class=\"d-flex my-4 justify-content-between align-items-center height-166\">\r\n  <div class=\"tyros-reg fs-36\" class=\"question-text\">Questions about {{ question }}</div>\r\n  <img src=\"assets/images/plus-sign.svg\">\r\n</div>\r\n<hr class=\"mb-5\">\r\n"
        },
        {
            "name": "OrderFaqComponent",
            "id": "component-OrderFaqComponent-cb0b0cc8a55237a4a62008840ea3f6ff",
            "file": "src/app/core/order-faq/order-faq.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-order-faq",
            "styleUrls": [
                "./order-faq.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-faq.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-order-faq',\r\n  templateUrl: './order-faq.component.html',\r\n  styleUrls: ['./order-faq.component.scss']\r\n})\r\nexport class OrderFaqComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".question-text {\r\n  font-size: 38px;\r\n  font-family: 'TyrosPro-Regular';\r\n}\r\n\r\n.height-166 {\r\n  height: 166px;\r\n}",
                    "styleUrl": "./order-faq.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<hr class=\"mt-5\">\r\n<div class=\"d-flex my-4 justify-content-between align-items-center height-166\">\r\n  <div class=\"tyros-reg fs-36\" class=\"question-text\">Order FAQ</div>\r\n  <img class=\"pr-2\" src=\"assets/images/plus-sign.svg\">\r\n</div>\r\n<hr class=\"mb-5\">\r\n"
        },
        {
            "name": "OrderSummaryComponent",
            "id": "component-OrderSummaryComponent-4ed4e0431a83db6b936f19cbfeebb3e0",
            "file": "src/app/payment/pages/order-summary/order-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-order-summary",
            "styleUrls": [
                "./order-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\n\r\n@Component({\r\n  selector: 'app-order-summary',\r\n  templateUrl: './order-summary.component.html',\r\n  styleUrls: ['./order-summary.component.scss']\r\n})\r\nexport class OrderSummaryComponent implements OnInit {\r\n\r\n  booking: Booking | undefined;\r\n  user: any = null;\r\n\r\n  constructor(private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private bookingService: BookingService,\r\n    private ngAuthService: NgAuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.activatedRoute.paramMap.subscribe((params) => {\r\n      const bookingId = params.get('booking_id');\r\n      this.booking = this.bookingService.getBookingById(bookingId);\r\n      if (!this.booking) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-detail {\r\n  box-shadow: 0px 0px 50px rgba(196, 196, 196, 0.3);\r\n  border-radius: 2px;\r\n}\r\n\r\n.float-container {\r\n  background: #ffffff;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  padding: 0 8px;\r\n  position: relative;\r\n}\r\n\r\n.float-container input {\r\n  border: none;\r\n  font-size: 16px;\r\n  outline: 0;\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n}\r\n\r\ninput::placeholder {\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636\r\n}\r\n\r\n.btn.btn-primary {\r\n  font-size: 14px;\r\n}\r\n\r\n.verticle {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n.verticle-line {\r\n  border: 1px solid #F1F1F1;\r\n  height: 84px;\r\n}\r\n\r\n.img {\r\n  width: 100%;\r\n  object-fit: contain;\r\n}\r\n\r\n.button-size {\r\n  height: 60px;\r\n  width: 165px;\r\n}\r\n\r\n.white {\r\n  color: white;\r\n}\r\n\r\n@media (max-width: 992px) {\r\n  .row {\r\n    flex-direction: column-reverse;\r\n  }\r\n\r\n  .verticle-line {\r\n    width: 150px;\r\n    height: 1px;\r\n  }\r\n\r\n  .verticle {\r\n    flex-direction: row;\r\n    padding: 2rem 2rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .card-detail {\r\n    padding: 0rem 1rem;\r\n  }\r\n\r\n  .fs-64 {\r\n    font-size: 45px;\r\n  }\r\n\r\n  .fs-24 {\r\n    font-size: 16px;\r\n  }\r\n\r\n  .verticle-line {\r\n    width: 100px;\r\n    height: 1px;\r\n  }\r\n\r\n  .button-size {\r\n    height: 60px;\r\n    width: 135px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./order-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\r\n  <div class=\"text-center mt-5 py-5\">\r\n    <div class=\"fs-36 tyros-reg-600 fab\">Thank you</div>\r\n    <div class=\"fs-64 tyros-reg-600 lh-68\">Your order has been <br> Completed</div>\r\n    <div class=\"fs-24 avenir-light pt-3\">We will send an order confirmation and shipping updates to the following e-mail:</div>\r\n    <div class=\"fs-24 pt-2 tyros-reg fab\">{{booking?.email}}</div>\r\n  </div>\r\n\r\n  <!-- <div class=\"mt-5 py-5 card-detail text-center\">\r\n    <div class=\"fs-24 tyros-reg fab\">Speed up your Checkout</div>\r\n    <div class=\"fs-36 tyros-reg pb-5\">Sign Up</div>\r\n\r\n    <div class=\"row center\">\r\n      <div class=\"col-12 col-lg-4\">\r\n        <div class=\"fs-18 tyros-reg-700\">Create an Account</div>\r\n\r\n        <div class=\"float-container my-3\">\r\n          <input\r\n            class=\"form-control \"\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"float-container my-3\">\r\n          <input\r\n            class=\"form-control \"\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"float-container my-3 d-flex\">\r\n          <input\r\n            class=\"form-control \"\r\n            type=\"text\"\r\n            placeholder=\"Password\"\r\n          />\r\n          <div class=\"input-group-append\">\r\n            <img class=\"pr-2\" src=\"assets/images/eye-crossed.svg\">\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"float-container my-3 d-flex\">\r\n          <input\r\n            class=\"form-control \"\r\n            type=\"text\"\r\n            placeholder=\"Repeat Password\"\r\n          />\r\n          <div class=\"input-group-append\">\r\n            <img class=\"pr-2\" src=\"assets/images/eye-crossed.svg\">\r\n          </div>\r\n        </div>\r\n\r\n        <button class=\"btn btn-primary btn-lg btn-block py-3 mt-3\">\r\n          SIGN UP\r\n        </button>\r\n\r\n      </div>\r\n      \r\n      <div class=\"verticle px-4\">\r\n        <div class=\"verticle-line\"></div>\r\n        <div class=\"fs-14 avenir-light\">or</div>\r\n        <div class=\"verticle-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"col-12 col-lg-4 d-flex align-items-center flex-column\">\r\n        <div class=\"fs-18 tyros-reg-700\">Log in with</div>\r\n        <div class=\"d-flex\">\r\n          <div class=\"button-size\">\r\n            <img class=\"img\" src=\"assets/images/google.svg\">\r\n          </div>\r\n          <div class=\"button-size\">\r\n            <img class=\"img\" src=\"assets/images/facebookbtn.svg\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div> -->\r\n\r\n  <!-- <app-order-faq></app-order-faq> -->\r\n  <!-- <span class=\"white py-5\">some space</span> -->\r\n  <app-we-specialize></app-we-specialize>\r\n</div>\r\n"
        },
        {
            "name": "PaymentLandingComponent",
            "id": "component-PaymentLandingComponent-2f1449fc28b35e05c73331cd6406e25a",
            "file": "src/app/payment/pages/payment-landing/payment-landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-payment-landing",
            "styleUrls": [
                "./payment-landing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./payment-landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "booking",
                    "type": "Booking",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\r\n    { path: '', label: 'My Booking', active: false, disabled: false },\r\n    { path: '', label: 'Checkout', active: false, disabled: false },\r\n    { path: '.', label: 'Payment', active: true, disabled: false },\r\n  ]",
                    "type": "Array<Breadcrumb>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "card",
                    "type": "StripeCardNumberComponent",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "StripeCardNumberComponent"
                        }
                    ]
                },
                {
                    "name": "cardOptions",
                    "defaultValue": "{\r\n    style: {\r\n      base: {\r\n        iconColor: '#666EE8',\r\n        color: '#31325F',\r\n        fontWeight: '300',\r\n        fontFamily: 'AvenirLTStd-Book, \"Helvetica Neue\", Helvetica, sans-serif',\r\n        fontSize: '18px',\r\n        '::placeholder': {\r\n          color: '#CFD7E0',\r\n        },\r\n      },\r\n    },\r\n  }",
                    "type": "StripeCardElementOptions",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "completedPayment",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "creditCardSelected",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "elementsOptions",
                    "defaultValue": "{\r\n    locale: 'en',\r\n  }",
                    "type": "StripeElementsOptions",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "paying",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "stripe",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "wireTransferSelected",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "onReviewAndPayClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "toggleCreditCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116
                },
                {
                    "name": "toggleWiretransfer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport {\r\n  StripeCardElementOptions,\r\n  StripeElementsOptions,\r\n} from '@stripe/stripe-js';\r\nimport { StripeCardNumberComponent, StripeService } from 'ngx-stripe';\r\nimport { Booking, BillingType } from 'src/app/booking/models/booking.model';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\nimport { Breadcrumb } from 'src/app/core/models/breadcrumb.model';\r\nimport { PaymentService } from '../../services/payment.service';\r\n\r\n@Component({\r\n  selector: 'app-payment-landing',\r\n  templateUrl: './payment-landing.component.html',\r\n  styleUrls: ['./payment-landing.component.scss'],\r\n})\r\nexport class PaymentLandingComponent implements OnInit {\r\n  @ViewChild(StripeCardNumberComponent) card?: StripeCardNumberComponent;\r\n\r\n  cardOptions: StripeCardElementOptions = {\r\n    style: {\r\n      base: {\r\n        iconColor: '#666EE8',\r\n        color: '#31325F',\r\n        fontWeight: '300',\r\n        fontFamily: 'AvenirLTStd-Book, \"Helvetica Neue\", Helvetica, sans-serif',\r\n        fontSize: '18px',\r\n        '::placeholder': {\r\n          color: '#CFD7E0',\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  elementsOptions: StripeElementsOptions = {\r\n    locale: 'en',\r\n  };\r\n\r\n  stripe: FormGroup;\r\n\r\n  breadcrumbs: Array<Breadcrumb> = [\r\n    { path: '', label: 'My Booking', active: false, disabled: false },\r\n    { path: '', label: 'Checkout', active: false, disabled: false },\r\n    { path: '.', label: 'Payment', active: true, disabled: false },\r\n  ];\r\n\r\n  public creditCardSelected: boolean = true;\r\n  public wireTransferSelected: boolean = false;\r\n\r\n  booking?: Booking;\r\n\r\n  completedPayment = false;\r\n  paying = false;\r\n\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private bookingService: BookingService,\r\n    private paymentService: PaymentService,\r\n    private stripeService: StripeService,\r\n    private ngAuthService: NgAuthService\r\n  ) {\r\n    this.stripe = this.fb.group({\r\n      // name: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.activatedRoute.paramMap.subscribe((params) => {\r\n      const bookingId = params.get('booking_id');\r\n      if (!bookingId) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n\r\n      this.booking = this.bookingService.getBookingById(bookingId);\r\n      if (!this.booking) {\r\n        this.router.navigate(['bookings']);\r\n        return;\r\n      }\r\n\r\n      this.breadcrumbs = [\r\n        {\r\n          path: `/bookings/${bookingId}`,\r\n          label: 'My Booking',\r\n          active: false,\r\n          disabled: false,\r\n        },\r\n        {\r\n          path: `/bookings/${bookingId}/checkout`,\r\n          label: 'Checkout',\r\n          active: false,\r\n          disabled: false,\r\n        },\r\n        { path: '.', label: 'Payment', active: true, disabled: false },\r\n      ];\r\n    });\r\n\r\n    if (this.booking) {\r\n      this.booking.billingType = BillingType.creditCard;\r\n    }\r\n  }\r\n\r\n  toggleCreditCard() {\r\n    if (this.booking) {\r\n      this.booking.billingType = BillingType.creditCard;\r\n    }\r\n    this.creditCardSelected = true;\r\n    this.wireTransferSelected = false;\r\n  }\r\n\r\n  toggleWiretransfer() {\r\n    if (this.booking) {\r\n      this.booking.billingType = BillingType.wireTransfer;\r\n    }\r\n    this.creditCardSelected = false;\r\n    this.wireTransferSelected = true;\r\n  }\r\n\r\n  async onReviewAndPayClicked() {\r\n    this.paying = true;\r\n    // this.bookingService.save();\r\n    if (this.wireTransferSelected) {\r\n      try {\r\n        const res = await this.paymentService.createOrder(this.booking!);\r\n        console.log(res);\r\n        this.booking!.orderId = res.data.orderId;\r\n        this.completedPayment = true;\r\n        if (this.booking) {\r\n          this.booking.paid = true;\r\n          this.bookingService.save();\r\n          this.router.navigate(['payment', this.booking.id, 'complete']);\r\n        }\r\n      } catch (err) {\r\n        console.log('Failed to place order');\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      try {\r\n        const res = await this.paymentService.createPaymentIntent(\r\n          this.booking!\r\n        );\r\n        console.log(res);\r\n        this.stripeService\r\n          .confirmCardPayment(res.data.clientSecret, {\r\n            payment_method: {\r\n              card: this.card?.element!,\r\n              billing_details: {\r\n                address: {\r\n                  country: this.booking?.billingCountry?.isoCode,\r\n                  line1: this.booking?.billingAddress,\r\n                  postal_code: this.booking?.billingZipCode,\r\n                },\r\n                email: this.booking?.email,\r\n                name: this.booking?.name,\r\n                phone: this.booking?.phone,\r\n              },\r\n            },\r\n          })\r\n          .subscribe((res) => {\r\n            console.log(res);\r\n            if (res.error) {\r\n              alert(res.error.message);\r\n              return;\r\n            } else {\r\n              this.completedPayment = true;\r\n              //this.bookingService.deleteBooking(this.booking!);\r\n              if (this.booking) {\r\n                this.booking.paid = true;\r\n                this.bookingService.save();\r\n                this.router.navigate(['payment', this.booking.id, 'complete']);\r\n              }\r\n            }\r\n          });\r\n      } catch (err) {\r\n        console.log('Failed to create payment intent');\r\n        console.log(err);\r\n      }\r\n    }\r\n    this.paying = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".float-container {\r\n  background: #ffffff;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  padding: 0 8px;\r\n  position: relative;\r\n}\r\n\r\n.float-container input {\r\n  border: none;\r\n  font-size: 16px;\r\n  outline: 0;\r\n\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n}\r\n\r\ninput::placeholder {\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #c4c4c4;\r\n}\r\n\r\n.btn.btn-primary {\r\n  font-size: 14px;\r\n  max-width: 355px;\r\n}\r\n\r\nimg {\r\n  width: 100%;\r\n  object-fit: contain;\r\n}\r\n\r\n.img-holder {\r\n  width: 145px;\r\n  height: 100px;\r\n}\r\n\r\n.padding {\r\n  padding: 0.3rem;\r\n}\r\n\r\n.grey-background {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .btn.btn-primary {\r\n    max-width: 100%;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .payment-card-mobile {\r\n    display: flex;\r\n    justify-content: center;\r\n    padding-bottom: 5rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 380px) {\r\n  .form-control {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n}\r\n\r\nh1 {\r\n  //styleName: <Style 1> Headline Tyros Pro SemiBold 70;\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-size: 64px;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  line-height: 72px;\r\n  letter-spacing: 0px;\r\n  text-align: center;\r\n}\r\n\r\nh4 {\r\n  //styleName: <Style 2> Tyros Pro Medium 36;\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-size: 36px;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  line-height: 42px;\r\n  letter-spacing: 0px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\n.p-style-2 {\r\n  //styleName: <P Style 2> Avenir LT Std 35 Book 24;\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-size: 24px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: 30px;\r\n  letter-spacing: 0.11732059717178345px;\r\n  text-align: center;\r\n}\r\n\r\nh5 {\r\n  //styleName: <Style 5> Tyros Pro Medium 20;\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-size: 20px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: 28px;\r\n  letter-spacing: 0px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n",
                    "styleUrl": "./payment-landing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "paymentService",
                        "type": "PaymentService"
                    },
                    {
                        "name": "stripeService",
                        "type": "StripeService"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paymentService",
                        "type": "PaymentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stripeService",
                        "type": "StripeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"!completedPayment\" class=\"container mobile\">\r\n  <app-breadcrumbs [breadcrumbs]=\"breadcrumbs\"></app-breadcrumbs>\r\n\r\n  <div class=\"fs-24 tyros-reg fab\">How would you like to pay?</div>\r\n  <div class=\"fs-36 tyros-reg pb-5\">Payment Options</div>\r\n\r\n  <div class=\"row pb-5\">\r\n    <div class=\"payment-card-mobile col-12 col-sm-4 col-md-4 col-xl-4\" *ngIf=\"creditCardSelected\">\r\n      <div class=\"img-holder\">\r\n        <img (click)=\"toggleCreditCard()\" class=\"padding\" src=\"assets/images/creditcard-orange.svg\" />\r\n      </div>\r\n      <div class=\"img-holder\">\r\n        <img (click)=\"toggleWiretransfer()\" src=\"assets/images/wiretransfer.svg\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"payment-card-mobile col-12 col-sm-4 col-md-4 col-xl-4\" *ngIf=\"wireTransferSelected\">\r\n      <div class=\"img-holder\">\r\n        <img (click)=\"toggleCreditCard()\" class=\"padding\" src=\"assets/images/creditcard.svg\" />\r\n      </div>\r\n      <div class=\"img-holder\">\r\n        <img (click)=\"toggleWiretransfer()\" src=\"assets/images/wiretransfer-orange.svg\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div ngxStripeCardGroup [formGroup]=\"stripe\" [elementsOptions]=\"elementsOptions\"\r\n      class=\"col-12 col-sm-8 col-md-6 col-xl-4\" *ngIf=\"creditCardSelected\">\r\n      <div class=\"fs-32 tyros-reg pb-3\">Pay with Credit Card</div>\r\n      <div class=\"fs-24 avenir-light\">\r\n        Please enter your card information to proceed with the final payment.\r\n      </div>\r\n\r\n      <div class=\"float-container my-3\">\r\n        <ngx-stripe-card-number [options]=\"cardOptions\"></ngx-stripe-card-number>\r\n      </div>\r\n\r\n      <div class=\"d-flex\">\r\n        <div class=\"float-container mr-3 w-70\">\r\n          <ngx-stripe-card-expiry [options]=\"cardOptions\"></ngx-stripe-card-expiry>\r\n        </div>\r\n        <div class=\"float-container w-30\">\r\n          <ngx-stripe-card-cvc [options]=\"cardOptions\"></ngx-stripe-card-cvc>\r\n        </div>\r\n      </div>\r\n\r\n      <button [disabled]=\"paying\" class=\"btn btn-primary btn-lg btn-block py-3 mt-3\" (click)=\"onReviewAndPayClicked()\">\r\n        REVIEW & PAY\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"col-12 col-sm-8 col-md-6 col-xl-6\" *ngIf=\"wireTransferSelected\">\r\n      <div class=\"fs-32 tyros-reg pb-3\">Pay via Wiretransfer</div>\r\n      <div class=\"fs-24 avenir-light pb-3\">\r\n        Once you review and approve your order you will receive an invoice via\r\n        e-mail. We will ship your order as soon as the final payment is in our\r\n        account.\r\n      </div>\r\n\r\n      <div class=\"grey-background\">\r\n        <div class=\"pl-3\">\r\n          <div class=\"pb-4 pt-2\">\r\n            <div class=\"fs-20 tyros-reg\">Bank Account</div>\r\n            <div class=\"fs-18 avenir-light\">NL21 ABNA 0844 5432 92</div>\r\n          </div>\r\n          <div class=\"pb-4\">\r\n            <div class=\"fs-20 tyros-reg\">BIC / SWIFT Code</div>\r\n            <div class=\"fs-18 avenir-light\">ABNANL2A</div>\r\n          </div>\r\n          <!--\r\n          <div class=\"pb-2\">\r\n            <div class=\"fs-20 tyros-reg\">Payment ID</div>\r\n            <div class=\"fs-18 avenir-light\">\r\n              4e4c62fd-bd91-4dd3-9694-8d5ed350cb5\r\n            </div>\r\n          </div> -->\r\n        </div>\r\n      </div>\r\n\r\n      <button [disabled]=\"paying\" class=\"btn btn-primary btn-lg btn-block py-3 mt-3\" (click)=\"onReviewAndPayClicked()\">\r\n        REVIEW & PAY\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- <app-order-faq></app-order-faq> -->\r\n  <app-we-specialize></app-we-specialize>\r\n</div>\r\n\r\n<div *ngIf=\"completedPayment\" class=\"container mobile\">\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <h4>Thank you</h4>\r\n      <h1>Your order has been completed</h1>\r\n      <p class=\"p-style-2\">\r\n        We will send a order confirmation and shipping updates to the following\r\n        e-mail:\r\n      </p>\r\n      <h5>{{ booking?.email }}</h5>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "PaymentOptionsComponent",
            "id": "component-PaymentOptionsComponent-6fdfc996563c0bac7f361cbc06291463",
            "file": "src/app/payment/pages/payment-landing/payment-options/payment-options.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-payment-options",
            "styleUrls": [
                "./payment-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./payment-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\r\n    { path: '', label: 'My Booking', active: false, disabled: false },\r\n    { path: '', label: 'Checkout', active: false, disabled: false },\r\n    { path: '', label: 'Payment', active: true, disabled: false },\r\n  ]",
                    "type": "Array<Breadcrumb>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "card",
                    "type": "StripeCardNumberComponent",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "StripeCardNumberComponent"
                        }
                    ]
                },
                {
                    "name": "cardOptions",
                    "defaultValue": "{\r\n    style: {\r\n      base: {\r\n        iconColor: '#666EE8',\r\n        color: '#31325F',\r\n        fontWeight: '300',\r\n        fontFamily: 'AvenirLTStd-Book, \"Helvetica Neue\", Helvetica, sans-serif',\r\n        fontSize: '18px',\r\n        '::placeholder': {\r\n          color: '#CFD7E0',\r\n        },\r\n      },\r\n    },\r\n  }",
                    "type": "StripeCardElementOptions",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "creditCardSelected",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "elementsOptions",
                    "defaultValue": "{\r\n    locale: 'en',\r\n  }",
                    "type": "StripeElementsOptions",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "stripe",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "wireTransferSelected",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "onImageClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "onReviewAndPayClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  StripeCardElementOptions,\r\n  StripeElementsOptions,\r\n} from '@stripe/stripe-js';\r\nimport { StripeCardNumberComponent, StripeService } from 'ngx-stripe';\r\nimport { Breadcrumb } from 'src/app/core/models/breadcrumb.model';\r\n\r\n@Component({\r\n  selector: 'app-payment-options',\r\n  templateUrl: './payment-options.component.html',\r\n  styleUrls: ['./payment-options.component.scss'],\r\n})\r\nexport class PaymentOptionsComponent implements OnInit {\r\n  @ViewChild(StripeCardNumberComponent) card?: StripeCardNumberComponent;\r\n\r\n  cardOptions: StripeCardElementOptions = {\r\n    style: {\r\n      base: {\r\n        iconColor: '#666EE8',\r\n        color: '#31325F',\r\n        fontWeight: '300',\r\n        fontFamily: 'AvenirLTStd-Book, \"Helvetica Neue\", Helvetica, sans-serif',\r\n        fontSize: '18px',\r\n        '::placeholder': {\r\n          color: '#CFD7E0',\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  elementsOptions: StripeElementsOptions = {\r\n    locale: 'en',\r\n  };\r\n\r\n  stripe: FormGroup;\r\n\r\n  breadcrumbs: Array<Breadcrumb> = [\r\n    { path: '', label: 'My Booking', active: false, disabled: false },\r\n    { path: '', label: 'Checkout', active: false, disabled: false },\r\n    { path: '', label: 'Payment', active: true, disabled: false },\r\n  ];\r\n\r\n  public creditCardSelected: boolean = true;\r\n  public wireTransferSelected: boolean = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private stripeService: StripeService\r\n  ) {\r\n    this.stripe = this.fb.group({\r\n      // name: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onImageClicked() {\r\n    this.creditCardSelected = !this.creditCardSelected;\r\n    this.wireTransferSelected = !this.wireTransferSelected;\r\n  }\r\n\r\n  onReviewAndPayClicked() {\r\n    this.router.navigate(['payment/1']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".float-container {\r\n  background: #ffffff;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  padding: 0 8px;\r\n  position: relative;\r\n}\r\n\r\n.float-container input {\r\n  border: none;\r\n  font-size: 16px;\r\n  outline: 0;\r\n\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n}\r\n\r\ninput::placeholder {\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #c4c4c4;\r\n}\r\n\r\n.btn.btn-primary {\r\n  font-size: 14px;\r\n  max-width: 355px;\r\n}\r\n\r\nimg {\r\n  width: 100%;\r\n  object-fit: contain;\r\n}\r\n\r\n.img-holder {\r\n  width: 145px;\r\n  height: 100px;\r\n}\r\n\r\n.padding {\r\n  padding: 0.3rem;\r\n}\r\n\r\n.grey-background {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .btn.btn-primary {\r\n    max-width: 100%;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .payment-card-mobile {\r\n    display: flex;\r\n    justify-content: center;\r\n    padding-bottom: 5rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 380px) {\r\n  .form-control {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./payment-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "stripeService",
                        "type": "StripeService"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stripeService",
                        "type": "StripeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-breadcrumbs [breadcrumbs]=\"breadcrumbs\"></app-breadcrumbs>\r\n\r\n<div class=\"fs-24 tyros-reg fab\">How would you like to pay?</div>\r\n<div class=\"fs-36 tyros-reg pb-5\">Payment Options</div>\r\n\r\n<div class=\"row pb-5\">\r\n  <div\r\n    class=\"payment-card-mobile col-12 col-sm-4 col-md-4 col-xl-4\"\r\n    *ngIf=\"creditCardSelected\"\r\n  >\r\n    <div class=\"img-holder\">\r\n      <img\r\n        (click)=\"onImageClicked()\"\r\n        class=\"padding\"\r\n        src=\"assets/images/creditcard-orange.svg\"\r\n      />\r\n    </div>\r\n    <div class=\"img-holder\">\r\n      <img (click)=\"onImageClicked()\" src=\"assets/images/wiretransfer.svg\" />\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    class=\"payment-card-mobile col-12 col-sm-4 col-md-4 col-xl-4\"\r\n    *ngIf=\"wireTransferSelected\"\r\n  >\r\n    <div class=\"img-holder\">\r\n      <img\r\n        (click)=\"onImageClicked()\"\r\n        class=\"padding\"\r\n        src=\"assets/images/creditcard.svg\"\r\n      />\r\n    </div>\r\n    <div class=\"img-holder\">\r\n      <img\r\n        (click)=\"onImageClicked()\"\r\n        src=\"assets/images/wiretransfer-orange.svg\"\r\n      />\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    ngxStripeCardGroup\r\n    [formGroup]=\"stripe\"\r\n    [elementsOptions]=\"elementsOptions\"\r\n    class=\"col-12 col-sm-8 col-md-6 col-xl-4\"\r\n    *ngIf=\"creditCardSelected\"\r\n  >\r\n    <div class=\"fs-32 tyros-reg pb-3\">Pay with Credit Card</div>\r\n    <div class=\"fs-24 avenir-light\">\r\n      Please enter your card information to proceed with the final payment.\r\n    </div>\r\n\r\n    <div class=\"float-container my-3\">\r\n      <ngx-stripe-card-number [options]=\"cardOptions\"></ngx-stripe-card-number>\r\n    </div>\r\n\r\n    <div class=\"d-flex\">\r\n      <div class=\"float-container mr-3 w-70\">\r\n        <ngx-stripe-card-expiry\r\n          [options]=\"cardOptions\"\r\n        ></ngx-stripe-card-expiry>\r\n      </div>\r\n      <div class=\"float-container w-30\">\r\n        <ngx-stripe-card-cvc [options]=\"cardOptions\"></ngx-stripe-card-cvc>\r\n      </div>\r\n    </div>\r\n\r\n    <button\r\n      class=\"btn btn-primary btn-lg btn-block py-3 mt-3\"\r\n      (click)=\"onReviewAndPayClicked()\"\r\n    >\r\n      REVIEW & PAY\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"col-12 col-sm-8 col-md-6 col-xl-6\" *ngIf=\"wireTransferSelected\">\r\n    <div class=\"fs-32 tyros-reg pb-3\">Pay via Wiretransfer</div>\r\n    <div class=\"fs-24 avenir-light pb-3\">\r\n      Once you review and approve your order you will receive an invoice via\r\n      e-mail. We will ship your order as soon as the final payment is in our\r\n      account.\r\n    </div>\r\n\r\n    <div class=\"grey-background\">\r\n      <div class=\"pl-3\">\r\n        <div class=\"pb-4 pt-2\">\r\n          <div class=\"fs-20 tyros-reg\">Bank Account</div>\r\n          <div class=\"fs-18 avenir-light\">NL19 ABCD 1234 9876 01</div>\r\n        </div>\r\n        <div class=\"pb-4\">\r\n          <div class=\"fs-20 tyros-reg\">BIC / SWIFT Code</div>\r\n          <div class=\"fs-18 avenir-light\">123they</div>\r\n        </div>\r\n        <div class=\"pb-2\">\r\n          <div class=\"fs-20 tyros-reg\">Payment ID</div>\r\n          <div class=\"fs-18 avenir-light\">\r\n            4e4c62fd-bd91-4dd3-9694-8d5ed350cb5\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <button\r\n      class=\"btn btn-primary btn-lg btn-block py-3 mt-3\"\r\n      (click)=\"onReviewAndPayClicked()\"\r\n    >\r\n      REVIEW & PAY\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- <app-order-faq></app-order-faq> -->\r\n<app-we-specialize></app-we-specialize>\r\n"
        },
        {
            "name": "PickUpLocationComponent",
            "id": "component-PickUpLocationComponent-7d695bf676f02ddd05f6631c2f87194a",
            "file": "src/app/product/modals/pick-up-location/pick-up-location.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pick-up-location",
            "styleUrls": [
                "./pick-up-location.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pick-up-location.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pickUpLocation",
                    "type": "Location | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "popularCaribbeanPorts",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "popularMediterraneanPorts",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "bookingClick",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { Location } from 'src/app/core/models/location.model';\r\n\r\n@Component({\r\n  selector: 'app-pick-up-location',\r\n  templateUrl: './pick-up-location.component.html',\r\n  styleUrls: ['./pick-up-location.component.scss'],\r\n})\r\nexport class PickUpLocationComponent implements OnInit {\r\n  locations: Array<Location> = [];\r\n  pickUpLocation: Location | undefined;\r\n  popularMediterraneanPorts: Array<Location> = [];\r\n  popularCaribbeanPorts: Array<Location> = [];\r\n\r\n  constructor(public modal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  bookingClick(booking: Booking) {\r\n    this.modal.close(booking);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 10px;\r\n  line-height: 10px;\r\n  color: #c4c4c4;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-2 {\r\n  /* <Mobile P Style 2> Avenir LT Std 35 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  font-size: 18px;\r\n  line-height: 22px;\r\n  letter-spacing: 0.117321px;\r\n  color: #000000;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}\r\n\r\n.btn.btn-shadow {\r\n  background: #ffffff;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.15);\r\n  border-radius: 3px;\r\n}\r\n\r\n.popular-port {\r\n  border: 1px solid #f8f8f8;\r\n  border-radius: 1px;\r\n}\r\n",
                    "styleUrl": "./pick-up-location.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-4 border-bottom-0 d-flex justify-content-between\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-transparent btn-no-border\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('back')\"\r\n  >\r\n    <img src=\"assets/images/mobile-back.svg\" />\r\n  </button>\r\n\r\n  <button\r\n    type=\"button\"\r\n    class=\"close btn-no-border\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <h4 class=\"text-center\">Pick-Up Location</h4>\r\n\r\n  <app-location-select\r\n    label=\"PICK-UP LOCATION\"\r\n    [locations]=\"locations\"\r\n    [location]=\"pickUpLocation\"\r\n    (locationChange)=\"modal.close($event)\"\r\n  ></app-location-select>\r\n\r\n  <h4 class=\"mt-3\">Where shall we drop off the Toy?</h4>\r\n  <p class=\"p-style-2\">\r\n    Select a popular port or search for the most convenient one in the field\r\n    above.\r\n  </p>\r\n\r\n  <h4 *ngIf=\"popularMediterraneanPorts\" class=\"mt-3\">\r\n    Popular Mediterranean Ports\r\n  </h4>\r\n  <div *ngIf=\"popularMediterraneanPorts\" class=\"row justify-content-center\">\r\n    <button\r\n      *ngFor=\"let location of popularMediterraneanPorts\"\r\n      class=\"col-5 btn m-1 py-3\"\r\n      (click)=\"modal.close(location)\"\r\n      [class.btn-outline-secondary]=\"location.name !== pickUpLocation?.name\"\r\n      [class.btn-secondary]=\"location.name === pickUpLocation?.name\"\r\n    >\r\n      {{ location.name }}\r\n    </button>\r\n  </div>\r\n\r\n  <h4 *ngIf=\"popularCaribbeanPorts\" class=\"mt-3\">Popular Caribbean Ports</h4>\r\n  <div *ngIf=\"popularCaribbeanPorts\" class=\"row justify-content-center\">\r\n    <button\r\n      *ngFor=\"let location of popularCaribbeanPorts\"\r\n      class=\"col-5 btn m-1 py-3\"\r\n      (click)=\"modal.close(location)\"\r\n      [class.btn-outline-secondary]=\"location.name !== pickUpLocation?.name\"\r\n      [class.btn-secondary]=\"location.name === pickUpLocation?.name\"\r\n    >\r\n      {{ location.name }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProductFeaturesComponent",
            "id": "component-ProductFeaturesComponent-0c1ab3b587a759d7edbf87beae982142",
            "file": "src/app/product/modals/product-features/product-features.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-features",
            "styleUrls": [
                "./product-features.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-features.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "'Long description...'",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "highlights",
                    "defaultValue": "['Highlight 1', 'Highlight 2']",
                    "line": 12,
                    "type": "Array<string>"
                },
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-product-features',\r\n  templateUrl: './product-features.component.html',\r\n  styleUrls: ['./product-features.component.scss'],\r\n})\r\nexport class ProductFeaturesComponent implements OnInit {\r\n  @Input() title: string = 'Title';\r\n  @Input() description: string = 'Long description...';\r\n  @Input() highlights: Array<string> = ['Highlight 1', 'Highlight 2'];\r\n\r\n  constructor(public modal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: #19303b;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}\r\n",
                    "styleUrl": "./product-features.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-4 border-bottom-0\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body px-5\">\r\n  <div class=\"container\">\r\n    <h4 class=\"mb-n1\">Features</h4>\r\n    <h2>{{ title }}</h2>\r\n\r\n    <div class=\"p-style-1 mt-5\" [innerHTML]=\"description\"></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProductPage",
            "id": "component-ProductPage-45b3c28fbb1d16612504cde59ca77332",
            "file": "src/app/product/pages/product/product.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product",
            "styleUrls": [
                "./product.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accessories",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "availabilityChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "availabilityState",
                    "defaultValue": "new AvailabilityState()",
                    "type": "AvailabilityState",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "bookings",
                    "defaultValue": "[]",
                    "type": "Array<Booking>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\r\n    {\r\n      absolutePath: environment.home,\r\n      label: 'Rentals',\r\n      active: false,\r\n      disabled: false,\r\n    },\r\n  ]",
                    "type": "Array<Breadcrumb>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "currentBooking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "faqsTitle",
                    "defaultValue": "'Questions about Booking'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "imageCarousel",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'productImage', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "loadingAvailability",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "modalBooking",
                    "defaultValue": "new Booking()",
                    "type": "Booking",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "popularCaribbeanPorts",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "popularMediterraneanPorts",
                    "defaultValue": "[]",
                    "type": "Array<Location>",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "product",
                    "type": "Product",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "productGroupSlug",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "productSlug",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "recommendedProducts",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "recommendedWaterToys",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "unauthBookingProduct",
                    "type": "literal type | undefined",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "methodsClass": [
                {
                    "name": "addToBooking",
                    "args": [
                        {
                            "name": "bookingAndProduct",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 477,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookingAndProduct",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "availability",
                    "args": [
                        {
                            "name": "availabilityState",
                            "type": "AvailabilityState"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 468,
                    "jsdoctags": [
                        {
                            "name": "availabilityState",
                            "type": "AvailabilityState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findProductBySlug",
                    "args": [
                        {
                            "name": "productGroupSlug",
                            "type": "string"
                        },
                        {
                            "name": "productSlug",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 138,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "productGroupSlug",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productSlug",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRecommendedProducts",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 514,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRecommendedWaterToys",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 529,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 258,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "loadingAvailabilityEvent",
                    "args": [
                        {
                            "name": "loading",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 473,
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lovedChange",
                    "args": [
                        {
                            "name": "loved",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "jsdoctags": [
                        {
                            "name": "loved",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "manageBookingClick",
                    "args": [
                        {
                            "name": "booking",
                            "type": "Booking"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "jsdoctags": [
                        {
                            "name": "booking",
                            "type": "Booking",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openAddToBookingModal",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 322,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openDropOffLocationModal",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 408,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openFeatures",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "openGallery",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                },
                {
                    "name": "openLoginModal",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 278,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openPickUpLocationModal",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 380,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openRecommendedAccessories",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openSelectDatesModal",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 437,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "openSignUpModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300
                },
                {
                    "name": "openYachtNameModal",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 354,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "productClick",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 498,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toyClick",
                    "args": [
                        {
                            "name": "toy",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 506,
                    "jsdoctags": [
                        {
                            "name": "toy",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  OnInit,\r\n  Optional,\r\n  PLATFORM_ID,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgbDate, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\nimport { LoginModalComponent } from 'src/app/core/modals/login-modal/login-modal.component';\r\nimport { SignUpModalComponent } from 'src/app/core/modals/sign-up-modal/sign-up-modal.component';\r\nimport { AvailabilityState } from 'src/app/core/models/availability-state';\r\nimport { Breadcrumb } from 'src/app/core/models/breadcrumb.model';\r\nimport { Location } from 'src/app/core/models/location.model';\r\nimport { LocationService } from 'src/app/core/services/location.service';\r\nimport { MetadataService } from 'src/app/core/services/metadata.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AddToBookingComponent } from '../../modals/add-to-booking/add-to-booking.component';\r\nimport { DropOffLocationComponent } from '../../modals/drop-off-location/drop-off-location.component';\r\nimport { PickUpLocationComponent } from '../../modals/pick-up-location/pick-up-location.component';\r\nimport { ProductFeaturesComponent } from '../../modals/product-features/product-features.component';\r\nimport { RecommendedAccessoriesComponent } from '../../modals/recommended-accessories/recommended-accessories.component';\r\nimport { SelectDatesComponent } from '../../modals/select-dates/select-dates.component';\r\nimport { YachtNameComponent } from '../../modals/yacht-name/yacht-name.component';\r\nimport { Product } from '../../models/product.model';\r\nimport { ProductService } from '../../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product',\r\n  templateUrl: './product.page.html',\r\n  styleUrls: ['./product.page.scss'],\r\n})\r\nexport class ProductPage implements OnInit {\r\n  @ViewChild('productImage', { static: false }) imageCarousel?: ElementRef;\r\n\r\n  breadcrumbs: Array<Breadcrumb> = [\r\n    {\r\n      absolutePath: environment.home,\r\n      label: 'Rentals',\r\n      active: false,\r\n      disabled: false,\r\n    },\r\n  ];\r\n\r\n  bookings: Array<Booking> = [];\r\n  currentBooking: Booking | undefined;\r\n  product?: Product;\r\n  accessories: Array<Product> = [];\r\n  productSlug: string = '';\r\n  productGroupSlug?: string;\r\n  locations: Array<Location> = [];\r\n  recommendedProducts: Array<Product> = [];\r\n  recommendedWaterToys: Array<Product> = [];\r\n\r\n  availabilityChecked = false;\r\n  isAvailable = false;\r\n\r\n  modalBooking: Booking = new Booking();\r\n  popularMediterraneanPorts: Array<Location> = [];\r\n  popularCaribbeanPorts: Array<Location> = [];\r\n\r\n  unauthBookingProduct:\r\n    | { booking: Booking; product: Product | undefined }\r\n    | undefined;\r\n\r\n  availabilityState: AvailabilityState = new AvailabilityState();\r\n  loadingAvailability: boolean = false;\r\n\r\n  faqsTitle: string = 'Questions about Booking';\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private modalService: NgbModal,\r\n    private productService: ProductService,\r\n    private bookingService: BookingService,\r\n    private locationService: LocationService,\r\n    private router: Router,\r\n    //private ngAuthService: NgAuthService,\r\n    @Optional() private metaService: MetadataService,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n  }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.activatedRoute.paramMap.subscribe((params) => {\r\n      if (!params.has('product_slug')) {\r\n        console.log('Product not found');\r\n        return;\r\n      }\r\n\r\n      // TODO: Get product_group_slug and product_slug\r\n      const productGroupSlug = params.get('product_group_slug')!;\r\n      const productSlug = params.get('product_slug')!;\r\n      this.findProductBySlug(productGroupSlug, productSlug);\r\n      this.getLocations();\r\n    });\r\n  }\r\n\r\n  openFeatures() {\r\n    const modal = this.modalService.open(ProductFeaturesComponent, {\r\n      size: 'lg',\r\n    });\r\n    modal.componentInstance.title = this.product?.name;\r\n    modal.componentInstance.description = this.product?.features;\r\n  }\r\n\r\n  openGallery() {\r\n    if (this.imageCarousel) {\r\n      this.imageCarousel.nativeElement.click();\r\n    }\r\n  }\r\n\r\n  async openRecommendedAccessories() {\r\n    const modal = this.modalService.open(RecommendedAccessoriesComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n    modal.componentInstance.accessories = this.accessories;\r\n\r\n    try {\r\n      const accessoriesToAdd = await modal.result;\r\n      await this.bookingService.addAccessories(\r\n        this.currentBooking!,\r\n        this.product!,\r\n        accessoriesToAdd\r\n      );\r\n      this.router.navigate(['bookings', 'recently-added']);\r\n    } catch (err) {\r\n      this.router.navigate(['bookings', 'recently-added']);\r\n    }\r\n  }\r\n\r\n  private async findProductBySlug(\r\n    productGroupSlug: string,\r\n    productSlug: string\r\n  ): Promise<void> {\r\n    this.breadcrumbs = [\r\n      {\r\n        absolutePath: environment.home,\r\n        label: 'Rentals',\r\n        active: false,\r\n        disabled: false,\r\n      },\r\n    ];\r\n\r\n    try {\r\n      const productAndAccessories = await this.productService.getProductBySlug(\r\n        productGroupSlug,\r\n        productSlug\r\n      );\r\n      this.accessories = productAndAccessories.accessories;\r\n      this.product = productAndAccessories.product;\r\n      var recomProd = this.accessories;\r\n      recomProd.forEach((product) => (product.quantity = 0));\r\n      recomProd = recomProd.filter((x) => x.type === 'OPTIONAL');\r\n      this.recommendedProducts = recomProd;\r\n\r\n      this.findRecommendedWaterToys(this.product);\r\n\r\n      if (this.metaService) {\r\n        this.metaService.updateMetadata({\r\n          title: `${this.product.slug || this.product.name\r\n            } for Superyachts | Ocean Premium`,\r\n          description: `${this.product.seoMetaDescription ||\r\n            this.product.slug ||\r\n            this.product.name\r\n            }`,\r\n        });\r\n      }\r\n\r\n      // TODO: When api provides a URL to use, use that here\r\n      this.breadcrumbs.push({\r\n        absolutePath: environment.home,\r\n        label: this.product.productGroup!.name!,\r\n        active: false,\r\n        disabled: false,\r\n      });\r\n      this.breadcrumbs.push({\r\n        path: '/',\r\n        label: this.product.name!,\r\n        active: true,\r\n        disabled: false,\r\n      });\r\n\r\n      this.faqsTitle = `Questions about ${this.product.name}`;\r\n\r\n      this.bookings = this.bookingService.getBookings();\r\n      this.currentBooking = this.bookingService.getCurrentBooking();\r\n\r\n      if (!this.currentBooking && this.bookings.length > 0) {\r\n        this.currentBooking = this.bookings[0];\r\n        this.bookingService.setCurrentBooking(this.currentBooking);\r\n      }\r\n\r\n      if (!this.currentBooking && this.bookings.length === 0) {\r\n        this.currentBooking = new Booking();\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n          const lastSearch = JSON.parse(\r\n            localStorage.getItem('last_search') || '{}'\r\n          );\r\n          if (lastSearch) {\r\n            try {\r\n              this.currentBooking.location.collection =\r\n                lastSearch.location?.collection;\r\n              this.currentBooking.location.delivery =\r\n                lastSearch.location?.delivery;\r\n\r\n              if (lastSearch.period.start) {\r\n                const fromParts = (lastSearch.period.start as string).split(\r\n                  '-'\r\n                );\r\n                const fromYear = Number(fromParts[0]);\r\n                const fromMonth = Number(fromParts[1]);\r\n                const fromDay = Number(fromParts[2].split('T')[0]);\r\n                this.currentBooking.period.fromDate = new NgbDate(\r\n                  fromYear,\r\n                  fromMonth,\r\n                  fromDay\r\n                );\r\n              }\r\n\r\n              if (lastSearch.period.end) {\r\n                const parts = (lastSearch.period.end as string).split('-');\r\n                const year = Number(parts[0]);\r\n                const month = Number(parts[1]);\r\n                const day = Number(parts[2].split('T')[0]);\r\n                this.currentBooking.period.fromDate = new NgbDate(\r\n                  year,\r\n                  month,\r\n                  day\r\n                );\r\n              }\r\n\r\n              setTimeout(() => {\r\n                this.bookingService.forceAvailabilityCheck();\r\n              }, 5000);\r\n            } catch (err) {\r\n              console.log('Failed to use last search: ', err);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.bookingService.bookingsChanged.subscribe(() => {\r\n        this.bookings = this.bookingService.getBookings();\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  async getLocations() {\r\n    this.locations = await this.locationService.getLocations();\r\n    this.locations.sort(function (a, b) {\r\n      return a.name.localeCompare(b.name);\r\n    });\r\n    this.popularMediterraneanPorts = await this.locationService.getPopularMediterraneanPorts(\r\n      this.locations\r\n    );\r\n    this.popularCaribbeanPorts = await this.locationService.getPopularCaribbeanPorts(\r\n      this.locations\r\n    );\r\n  }\r\n\r\n  manageBookingClick(booking: Booking) {\r\n  }\r\n\r\n  lovedChange(loved: boolean) {\r\n    console.log(loved);\r\n  }\r\n\r\n  async openLoginModal() {\r\n    const modal = this.modalService.open(LoginModalComponent, {\r\n      size: 'lg',\r\n    });\r\n\r\n    modal.dismissed.subscribe((reason) => {\r\n      if (reason === 'signup') {\r\n        this.openSignUpModal();\r\n      }\r\n    });\r\n\r\n    modal.result\r\n      .then((_user) => {\r\n        if (this.unauthBookingProduct) {\r\n          this.addToBooking(this.unauthBookingProduct);\r\n        }\r\n      })\r\n      .then((err) => {\r\n        console.log('login error: ', err);\r\n      });\r\n  }\r\n\r\n  openSignUpModal() {\r\n    const modal = this.modalService.open(SignUpModalComponent, {\r\n      size: 'lg',\r\n    });\r\n\r\n    modal.dismissed.subscribe((reason) => {\r\n      if (reason === 'login') {\r\n        this.openLoginModal();\r\n      }\r\n    });\r\n\r\n    modal.result\r\n      .then((_user) => {\r\n        if (this.unauthBookingProduct) {\r\n          this.addToBooking(this.unauthBookingProduct);\r\n        }\r\n      })\r\n      .then((err) => {\r\n        console.log('signup error: ', err);\r\n      });\r\n  }\r\n\r\n  async openAddToBookingModal() {\r\n    if (this.bookings.length === 0) {\r\n      this.openYachtNameModal();\r\n      return;\r\n    }\r\n\r\n    const modal = this.modalService.open(AddToBookingComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n    modal.componentInstance.bookings = this.bookings;\r\n\r\n    modal.dismissed.subscribe((reason: 'create-booking' | null) => {\r\n      if (!reason) return;\r\n\r\n      if (reason === 'create-booking') {\r\n        this.openYachtNameModal();\r\n      }\r\n    });\r\n\r\n    modal.result\r\n      .then((booking: Booking) => {\r\n        this.addToBooking({\r\n          booking: booking,\r\n          product: this.product!,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log('Add to booking error: ', err);\r\n      });\r\n  }\r\n\r\n  async openYachtNameModal() {\r\n    const modal = this.modalService.open(YachtNameComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n\r\n    modal.dismissed.subscribe((reason: 'back' | null) => {\r\n      if (!reason) return;\r\n\r\n      if (reason === 'back') {\r\n        if (this.bookings.length > 0) {\r\n          this.openAddToBookingModal();\r\n        }\r\n      }\r\n    });\r\n\r\n    modal.result\r\n      .then((yachtName: string | undefined) => {\r\n        this.modalBooking.yachtName = yachtName;\r\n        this.openPickUpLocationModal();\r\n      })\r\n      .catch((err) => {\r\n        console.log('yacht name error: ', err);\r\n      });\r\n  }\r\n\r\n  async openPickUpLocationModal() {\r\n    const modal = this.modalService.open(PickUpLocationComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n    modal.componentInstance.locations = this.locations;\r\n    modal.componentInstance.pickUpLocation = this.modalBooking.location.collection;\r\n    modal.componentInstance.popularMediterraneanPorts = this.popularMediterraneanPorts;\r\n    modal.componentInstance.popularCaribbeanPorts = this.popularCaribbeanPorts;\r\n\r\n    modal.dismissed.subscribe((reason: 'back' | null) => {\r\n      if (!reason) return;\r\n\r\n      if (reason === 'back') {\r\n        this.openYachtNameModal();\r\n      }\r\n    });\r\n\r\n    modal.result\r\n      .then((location: Location) => {\r\n        this.modalBooking.location.collection = location;\r\n        this.openDropOffLocationModal();\r\n      })\r\n      .catch((err) => {\r\n        console.log('pick up location error: ', err);\r\n      });\r\n  }\r\n\r\n  async openDropOffLocationModal() {\r\n    const modal = this.modalService.open(DropOffLocationComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n    modal.componentInstance.locations = this.locations;\r\n    modal.componentInstance.dropOffLocation = this.modalBooking.location.delivery;\r\n    modal.componentInstance.popularMediterraneanPorts = this.popularMediterraneanPorts;\r\n    modal.componentInstance.popularCaribbeanPorts = this.popularCaribbeanPorts;\r\n    modal.componentInstance.pickUpLocation = this.modalBooking.location.collection;\r\n\r\n    modal.dismissed.subscribe((reason: 'back' | null) => {\r\n      if (!reason) return;\r\n\r\n      if (reason === 'back') {\r\n        this.openPickUpLocationModal();\r\n      }\r\n    });\r\n\r\n    modal.result\r\n      .then((location: Location) => {\r\n        this.modalBooking.location.delivery = location;\r\n        this.openSelectDatesModal();\r\n      })\r\n      .catch((err) => {\r\n        console.log('drop off location error: ', err);\r\n      });\r\n  }\r\n\r\n  async openSelectDatesModal() {\r\n    const modal = this.modalService.open(SelectDatesComponent, {\r\n      size: 'xl',\r\n      scrollable: true,\r\n    });\r\n    modal.componentInstance.product = this.product;\r\n    modal.componentInstance.booking = this.modalBooking;\r\n\r\n    modal.dismissed.subscribe((reason: 'back' | null) => {\r\n      if (!reason) return;\r\n\r\n      if (reason === 'back') {\r\n        this.openDropOffLocationModal();\r\n      }\r\n    });\r\n\r\n    modal.result\r\n      .then((response: { fromDate: NgbDate; toDate: NgbDate }) => {\r\n        this.modalBooking.period.fromDate = response.fromDate;\r\n        this.modalBooking.period.toDate = response.toDate;\r\n\r\n        this.addToBooking({\r\n          booking: this.modalBooking,\r\n          product: this.product!,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log('drop off location error: ', err);\r\n      });\r\n  }\r\n\r\n  availability(availabilityState: AvailabilityState) {\r\n    this.availabilityState = availabilityState;\r\n    this.availabilityChecked = true;\r\n  }\r\n\r\n  loadingAvailabilityEvent(loading: any) {\r\n    this.loadingAvailability = loading as boolean;\r\n  }\r\n\r\n  async addToBooking(bookingAndProduct: {\r\n    booking: Booking;\r\n    product: Product | undefined;\r\n  }) {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      if (!localStorage.getItem('APPSTRAX_AUTH_TOKEN')) {\r\n        this.unauthBookingProduct = bookingAndProduct;\r\n        this.openLoginModal();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const booking = await this.bookingService.addToBooking(\r\n      bookingAndProduct.booking,\r\n      bookingAndProduct.product!\r\n    );\r\n    this.bookingService.setCurrentBooking(booking);\r\n    this.currentBooking = booking;\r\n    this.openRecommendedAccessories();\r\n  }\r\n\r\n  productClick(product: Product) {\r\n    if (product.productGroupSlug && product.productSlug) {\r\n      this.router.navigate([product.productGroupSlug, product.productSlug]);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  toyClick(toy: Product) {\r\n    if (toy.productGroupSlug && toy.productSlug) {\r\n      this.router.navigate([toy.productGroupSlug, toy.productSlug]);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  async findRecommendedProducts(product: Product) {\r\n    if (!product.productGroup) {\r\n      throw new Error(\r\n        \"Product Group not found, can't get recommended products\"\r\n      );\r\n    }\r\n\r\n    const productGroupIds = [product.productGroup?.id!];\r\n    this.recommendedProducts = await this.productService.getRecommendedProducts(\r\n      productGroupIds\r\n    );\r\n\r\n    this.findRecommendedWaterToys(product);\r\n  }\r\n\r\n  async findRecommendedWaterToys(product: Product) {\r\n    if (!product.productGroup) {\r\n      throw new Error(\r\n        \"Product Group not found, can't get recommended water toys\"\r\n      );\r\n    }\r\n\r\n    if (this.recommendedWaterToys.length) {\r\n      console.log('Already have toys', this.recommendedWaterToys);\r\n    } else {\r\n      const productGroupIds = [product.productGroup?.id!];\r\n      this.recommendedWaterToys = await this.productService.getRecommendedWaterToys(\r\n        productGroupIds\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n}\r\n\r\nh5 {\r\n  /* <BTN Style> Tyros Pro Bold 14 */\r\n  font-family: \"TyrosPro-Bold\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n\r\n  margin-top: 0.1rem !important;\r\n}\r\n\r\nul li button {\r\n  /* <NAV Style> Avenir LT Std 55 Roman 16 */\r\n  font-family: \"AvenirLTStd-Roman\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 18px;\r\n  line-height: 22px;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: 0.25px;\r\n  color: #363636;\r\n}\r\n\r\n.grey-background {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.grey {\r\n  color: #c4c4c4 !important;\r\n}\r\n\r\n.primary {\r\n  color: #fab900 !important;\r\n}\r\n\r\n.black {\r\n  color: #363636;\r\n}\r\n\r\n.product-image {\r\n  min-height: 450px;\r\n  max-height: 545px;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-2 {\r\n  /* <P Style 2> Avenir LT Std 35 Book 24 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n  letter-spacing: 0.117321px;\r\n  color: #082229;\r\n}\r\n\r\n.p-style-4 {\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  color: #19303b;\r\n}\r\n\r\nselect.form-control {\r\n  background: #ffffff;\r\n  border: 1px solid #c4c4c4;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  height: 60px;\r\n\r\n  /* <P Style 3> Avenir LT Std 45 Book 16 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #363636;\r\n\r\n  -moz-appearance: none;\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n}\r\n\r\n.form-group.hidden {\r\n  height: 0;\r\n  width: 0;\r\n  margin: 0;\r\n  border: none;\r\n  padding: 0;\r\n}\r\ndiv.form-group.hidden > div > input {\r\n  height: 0;\r\n  width: 0;\r\n  margin: 0;\r\n  border: none;\r\n  padding: 0;\r\n}\r\n.custom-day {\r\n  text-align: center;\r\n  padding: 0.185rem 0.25rem;\r\n  display: inline-block;\r\n  height: 2rem;\r\n  width: 2rem;\r\n}\r\n.custom-day.focused {\r\n  background-color: #e6e6e6;\r\n}\r\n.custom-day.range,\r\n.custom-day:hover {\r\n  background-color: #fab900;\r\n  color: white;\r\n}\r\n.custom-day.faded {\r\n  background-color: #fab900;\r\n}\r\n\r\ninput {\r\n  height: 60px;\r\n}\r\n\r\n.footer {\r\n  position: sticky;\r\n  display: block;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height: 180px;\r\n  line-height: 60px;\r\n  background-color: white;\r\n  box-shadow: 0px 0px 50px rgb(196 196 196 / 30%);\r\n  z-index: 10;\r\n}\r\n",
                    "styleUrl": "./product.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService"
                    },
                    {
                        "name": "platformId",
                        "type": "Object"
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"product\" class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <app-breadcrumbs [breadcrumbs]=\"breadcrumbs\"></app-breadcrumbs>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 order-last order-lg-1 order-md-1\">\r\n      <ngb-carousel\r\n        *ngIf=\"product.images\"\r\n        [showNavigationArrows]=\"true\"\r\n        [showNavigationIndicators]=\"false\"\r\n        lightbox-group\r\n      >\r\n        <ng-template ngbSlide *ngFor=\"let image of product.images\">\r\n          <div class=\"picsum-img-wrapper\">\r\n            <img\r\n              #productImage\r\n              class=\"img-fluid product-image\"\r\n              [src]=\"image.url\"\r\n              [alt]=\"product.name\"\r\n              lightbox\r\n            />\r\n          </div>\r\n        </ng-template>\r\n      </ngb-carousel>\r\n\r\n      <ul class=\"nav nav-justified mx-5 my-2\">\r\n        <li class=\"nav-item\">\r\n          <button class=\"btn btn-transparent\" (click)=\"openFeatures()\">\r\n            Features\r\n          </button>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <button class=\"btn btn-transparent\" (click)=\"openGallery()\">\r\n            Gallery\r\n          </button>\r\n        </li>\r\n      </ul>\r\n\r\n      <ul class=\"nav nav-justified mx-5\">\r\n        <li class=\"nav-item\">\r\n          <a\r\n            href=\"https://wa.me/+33640629599\"\r\n            class=\"btn btn-transparent primary\"\r\n          >\r\n            <img src=\"assets/images/chat.svg\" /> Chat with a specialist\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div\r\n      class=\"col-lg-6 col-md-6 col-sm-12 order-first order-lg-12 order-md-12\"\r\n    >\r\n      <h4 *ngIf=\"product?.description?.tagline\" class=\"primary\">\r\n        {{product?.description?.tagline}}\r\n      </h4>\r\n      <h1>{{product?.name}} Rental</h1>\r\n      <p *ngIf=\"product?.description?.summary\" class=\"my-4 p-style-2\">\r\n        {{product?.description?.summary}}\r\n      </p>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-5 d-none d-md-block d-lg-block\">\r\n          <p class=\"mb-n1 p-style-4\">Total excl. VAT & Deposit</p>\r\n          <h2 class=\"mb-n1\">{{product?.price | number : '1.0-2'}} €</h2>\r\n          <p class=\"p-style-4 grey\">per day</p>\r\n        </div>\r\n        <div\r\n          *ngIf=\"loadingAvailability\"\r\n          class=\"col-5 d-none d-md-block d-lg-block\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-2\">\r\n              <img src=\"assets/images/alert.svg\" />\r\n            </div>\r\n            <div class=\"col-10 m-0 p-0\">\r\n              <h5 class=\"text-uppercase primary\">Loading...</h5>\r\n              <p class=\"p-style-4\">\r\n                We are checking availability for the chosen location, dates and\r\n                quantity.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          *ngIf=\"!availabilityChecked && !loadingAvailability\"\r\n          class=\"col-5 d-none d-md-block d-lg-block\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-2\">\r\n              <img src=\"assets/images/alert.svg\" />\r\n            </div>\r\n            <div class=\"col-10 m-0 p-0\">\r\n              <h5 class=\"text-uppercase primary\">Check Availability</h5>\r\n              <p class=\"p-style-4\">\r\n                Please adjust location, dates or quantity to add this item to\r\n                your booking!\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          *ngIf=\"availabilityChecked && !loadingAvailability\"\r\n          class=\"col-5 d-none d-md-block d-lg-block\"\r\n        >\r\n          <div *ngIf=\"availabilityState.state === 'NOT_AVAILABLE'\" class=\"row\">\r\n            <div class=\"col-2\">\r\n              <img src=\"assets/images/alert.svg\" class=\"btn-no-border\" />\r\n            </div>\r\n            <div class=\"col-10 m-0 p-0\">\r\n              <h5 class=\"text-uppercase primary\">Not Available</h5>\r\n              <p *ngIf=\"availabilityState.notes\" class=\"p-style-4\">\r\n                {{availabilityState.notes}}\r\n              </p>\r\n              <p *ngIf=\"!availabilityState.notes\" class=\"p-style-4\">\r\n                Please adjust location, dates or quantity to add this item to\r\n                your booking!\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div\r\n            *ngIf=\"availabilityState.state === 'AVAILABLE_BUT_DELAYED'\"\r\n            class=\"row\"\r\n          >\r\n            <div class=\"col-2\">\r\n              <img src=\"assets/images/alert.svg\" class=\"btn-no-border\" />\r\n            </div>\r\n            <div class=\"col-10 m-0 p-0\">\r\n              <h5 class=\"text-uppercase primary\">Delayed</h5>\r\n              <p *ngIf=\"availabilityState.notes\" class=\"p-style-4\">\r\n                {{availabilityState.notes}}\r\n              </p>\r\n              <p *ngIf=\"!availabilityState.notes\" class=\"p-style-4\">\r\n                Please adjust location, dates or quantity to add this item to\r\n                your booking!\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"availabilityState.state === 'AVAILABLE'\" class=\"row\">\r\n            <div class=\"col-2\">\r\n              <img\r\n                src=\"assets/images/available-green.svg\"\r\n                class=\"btn-no-border\"\r\n              />\r\n            </div>\r\n            <div class=\"col-10 m-0 p-l-1\">\r\n              <h5 class=\"text-uppercase black\">Available</h5>\r\n              <p *ngIf=\"availabilityState.notes\" class=\"p-style-4\">\r\n                {{availabilityState.notes}}\r\n              </p>\r\n              <p *ngIf=\"!availabilityState.notes\" class=\"p-style-4\">\r\n                This item is available for your dates.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"d-none d-md-inline d-lg-inline\">\r\n        <app-booking-form\r\n          (availability)=\"availability($event)\"\r\n          (loadingAvailabilityEvent)=\"loadingAvailabilityEvent($event)\"\r\n          [(booking)]=\"currentBooking\"\r\n          [bookings]=\"bookings\"\r\n          [locations]=\"locations\"\r\n          [product]=\"product\"\r\n          (addToBooking)=\"addToBooking($event)\"\r\n          (lovedChange)=\"lovedChange($event)\"\r\n          (manageBookingClick)=\"manageBookingClick($event)\"\r\n        ></app-booking-form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <hr class=\"my-5\" />\r\n\r\n  <div *ngIf=\"product?.description?.section1\" class=\"row mt-5\">\r\n    <div class=\"col\">\r\n      <h4>{{product?.description?.section1?.head}}</h4>\r\n      <div\r\n        class=\"p-style-1\"\r\n        [innerHTML]=\"product?.description?.section1?.paragraph\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n\r\n  <hr *ngIf=\"product?.description?.section1\" class=\"my-5\" />\r\n\r\n  <div *ngIf=\"product?.description?.section2\" class=\"row\">\r\n    <div class=\"col\">\r\n      <h4>{{product?.description?.section2?.head}}</h4>\r\n      <div\r\n        class=\"p-style-1\"\r\n        [innerHTML]=\"product?.description?.section2?.paragraph\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"grey-background p-4 mt-5\">\r\n    <div *ngIf=\"product?.description?.section3\" class=\"row\">\r\n      <div class=\"col\">\r\n        <h4>{{product?.description?.section3?.head}}</h4>\r\n        <div\r\n          class=\"p-style-1\"\r\n          [innerHTML]=\"product?.description?.section3?.paragraph\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"product?.description?.section4\" class=\"row mt-5\">\r\n      <div class=\"col\">\r\n        <h4>{{product?.description?.section4?.head}}</h4>\r\n        <div\r\n          class=\"p-style-1\"\r\n          [innerHTML]=\"product?.description?.section4?.paragraph\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"product?.description?.section5\" class=\"row mt-5\">\r\n      <div class=\"col\">\r\n        <h4>{{product?.description?.section5?.head}}</h4>\r\n        <div\r\n          class=\"p-style-1\"\r\n          [innerHTML]=\"product?.description?.section5?.paragraph\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"product?.description?.section6\" class=\"row mt-5\">\r\n    <div class=\"col\">\r\n      <h4>{{product?.description?.section6?.head}}</h4>\r\n      <div\r\n        class=\"p-style-1\"\r\n        [innerHTML]=\"product?.description?.section6?.paragraph\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"product?.description?.section7\" class=\"row mt-5\">\r\n    <div class=\"col\">\r\n      <h4>{{product?.description?.section7?.head}}</h4>\r\n      <div\r\n        class=\"p-style-1\"\r\n        [innerHTML]=\"product?.description?.section7?.paragraph\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- <div *ngIf=\"product?.description?.section8\" class=\"row mt-5\">\r\n    <div class=\"col\">\r\n      <h4>{{product?.description?.section8?.head}}</h4>\r\n      <div\r\n        class=\"p-style-1\"\r\n        [innerHTML]=\"product?.description?.section8?.paragraph\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"product?.description?.section9\" class=\"row mt-5\">\r\n    <div class=\"col\">\r\n      <h4>{{product?.description?.section9?.head}}</h4>\r\n      <div\r\n        class=\"p-style-1\"\r\n        [innerHTML]=\"product?.description?.section9?.paragraph\"\r\n      ></div>\r\n    </div>\r\n  </div> -->\r\n\r\n  <div\r\n    *ngIf=\"recommendedProducts && recommendedProducts.length > 0\"\r\n    class=\"my-4 py-4\"\r\n  >\r\n    <div class=\"primary align-items-center mt-5 fs-24 tyros-reg-600\">\r\n      Available\r\n    </div>\r\n    <div class=\"fs-36 align-items-center tyros-reg-700\">Spares & Extras</div>\r\n    <p class=\"p-style-2\">\r\n      These are optional spares and extras that you can add to your booking\r\n      during check out.\r\n    </p>\r\n    <app-recommended-product-carousel\r\n      [products]=\"recommendedProducts\"\r\n      [showAddToBooking]=\"false\"\r\n      [showCounter]=\"false\"\r\n      (productClick)=\"productClick($event)\"\r\n    ></app-recommended-product-carousel>\r\n  </div>\r\n\r\n  <!-- Additional section for the Water Toys -->\r\n  <div *ngIf=\"recommendedWaterToys && recommendedWaterToys.length > 0\" class=\"my-4 py-4\">\r\n    <div class=\"primary align-items-center mt-5 fs-24 tyros-reg-600\">Recommended</div>\r\n    <div class=\"fs-36 align-items-center tyros-reg-700\">Water Toys to Rent</div>\r\n    <!-- <p class=\"p-style-2\">\r\n      These are optional spares and extras that you can add to your booking\r\n      during check out.\r\n    </p> -->\r\n\r\n    <app-recommended-water-toys [toys]=\"recommendedWaterToys\" (toyClick)=\"toyClick($event)\"></app-recommended-water-toys>\r\n    <!-- <app-recommended-product-carousel [products]=\"recommendedWaterToys\" [showAddToBooking]=\"false\" [showCounter]=\"false\"\r\n      (productClick)=\"productClick($event)\"></app-recommended-product-carousel> -->\r\n  </div>\r\n\r\n  <div *ngIf=\"product\" class=\"my-5\">\r\n    <app-faqs [title]=\"faqsTitle\" [faqs]=\"product.faqs\"></app-faqs>\r\n  </div>\r\n\r\n  <div class=\"py-4\">\r\n    <app-we-specialize></app-we-specialize>\r\n  </div>\r\n</div>\r\n\r\n<footer *ngIf=\"product\" class=\"footer d-block d-md-none d-lg-none\">\r\n  <div class=\"container py-3\">\r\n    <div class=\"row\">\r\n      <div class=\"col\">\r\n        <p class=\"p-style-2 mb-n1\">{{product?.name}} Rental</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col\">\r\n        <p class=\"p-style-4 grey\">{{product?.price}} € / day</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-4\">\r\n        <app-counter [(counter)]=\"product.quantity\"></app-counter>\r\n      </div>\r\n      <div class=\"col-8\">\r\n        <button\r\n          class=\"btn btn-primary btn-lg btn-block py-3 mt-2 btn-no-border\"\r\n          (click)=\"openAddToBookingModal()\"\r\n        >\r\n          Add to Booking\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n"
        },
        {
            "name": "ProductPreviewImages",
            "id": "component-ProductPreviewImages-8017edd6007a841c6adadd5a175c8b85",
            "file": "src/app/core/product-preview-images/product-preview-images.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-preview-images",
            "styleUrls": [
                "./product-preview-images.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-preview-images.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "Array<Product>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Product } from 'src/app/product/models/product.model';\r\n\r\n@Component({\r\n  selector: 'app-product-preview-images',\r\n  templateUrl: './product-preview-images.component.html',\r\n  styleUrls: ['./product-preview-images.component.scss'],\r\n})\r\nexport class ProductPreviewImages implements OnInit {\r\n  @Input() products: Array<Product> = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".img {\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 80%;\r\n  object-fit: contain;\r\n}\r\n\r\n.img-start {\r\n  width: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  object-fit: contain;\r\n}\r\n\r\n.h-64 {\r\n  height: 64px;\r\n}\r\n\r\n@media (max-width: 1000px) {\r\n  .plus-sign {\r\n    width: 4%;\r\n  }\r\n\r\n  .array-number {\r\n    font-size: 40px;\r\n  }\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .col-4 {\r\n    padding-left: 0;\r\n  }\r\n\r\n  .img {\r\n    width: 80%;\r\n  }\r\n\r\n  .array-number {\r\n    font-size: 30px;\r\n  }\r\n}",
                    "styleUrl": "./product-preview-images.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"row no-gutters d-flex justify-content-center align-items-center\"\r\n  *ngIf=\"products\"\r\n>\r\n  <div class=\"col center\">\r\n    <div *ngIf=\"products.length == 1\" class=\"img-start\">\r\n      <img class=\"img\" [src]=\"products[0].imageThumbnail?.url\" />\r\n    </div>\r\n    <img\r\n      *ngIf=\"products.length > 1\"\r\n      class=\"img\"\r\n      [src]=\"products[0].imageThumbnail?.url\"\r\n    />\r\n  </div>\r\n  <img\r\n    class=\"plus-sign\"\r\n    *ngIf=\"products.length > 1\"\r\n    src=\"assets/images/plus.svg\"\r\n  />\r\n  <div class=\"col center\" *ngIf=\"products.length > 1\">\r\n    <img class=\"img\" [src]=\"products[1].imageThumbnail?.url\" />\r\n  </div>\r\n  <img\r\n    class=\"plus-sign\"\r\n    *ngIf=\"products.length > 2\"\r\n    src=\"assets/images/plus.svg\"\r\n  />\r\n  <div class=\"col center\" *ngIf=\"products.length > 2\">\r\n    <img class=\"img\" [src]=\"products[2].imageThumbnail?.url\" />\r\n  </div>\r\n  <img\r\n    class=\"plus-sign\"\r\n    *ngIf=\"products.length > 3\"\r\n    src=\"assets/images/plus.svg\"\r\n  />\r\n  <div class=\"center\" *ngIf=\"products.length > 3\">\r\n    <div class=\"fs-60 array-number pl-2 tyros-reg\">\r\n      {{ products.length - 3 }}\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RecommendedAccessoriesComponent",
            "id": "component-RecommendedAccessoriesComponent-ee9beba8546af34b190c44ad18030d87",
            "file": "src/app/product/modals/recommended-accessories/recommended-accessories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recommended-accessories",
            "styleUrls": [
                "./recommended-accessories.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recommended-accessories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accessories",
                    "line": 26,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "accessoriesAdded",
                    "defaultValue": "new EventEmitter<Array<Product>>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_accessories",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "accessoriesToAdd",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valid",
                    "defaultValue": "true",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "valid",
                            "type": "Boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "valid",
                            "type": "Boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "recommendedProductAdded",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\nimport { Product } from '../../models/product.model';\r\n\r\n@Component({\r\n  selector: 'app-recommended-accessories',\r\n  templateUrl: './recommended-accessories.component.html',\r\n  styleUrls: ['./recommended-accessories.component.scss'],\r\n})\r\nexport class RecommendedAccessoriesComponent implements OnInit {\r\n  // @Input() accessories: Array<Product> = [];\r\n\r\n  @Output() accessoriesAdded = new EventEmitter<Array<Product>>();\r\n\r\n  accessoriesToAdd: Array<Product> = [];\r\n\r\n  valid: Boolean = true;\r\n\r\n  private _accessories: Array<Product> = [];\r\n\r\n  constructor(public modal: NgbActiveModal, private bookingService: BookingService) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  @Input() set accessories(accessories: Array<Product>) {\r\n    this._accessories = accessories;\r\n    this._accessories.forEach((product) => (product.quantity = 0));\r\n    this._accessories = this._accessories.filter((x) => x.type === 'OPTIONAL');\r\n  }\r\n\r\n  get accessories(): Array<Product> {\r\n    return this._accessories;\r\n  }\r\n\r\n  recommendedProductAdded(product: Product) {\r\n    if (product.quantity <= 0) {\r\n      this.accessoriesToAdd = this.accessoriesToAdd.filter(\r\n        (a) => a.id !== product.id\r\n      );\r\n      return;\r\n    }\r\n\r\n    const exists = this.accessoriesToAdd.find(\r\n      (accessory) => accessory.id === product.id\r\n    );\r\n    if (exists) {\r\n      exists.quantity = product.quantity;\r\n    } else {\r\n      this.accessoriesToAdd.push(product);\r\n    }\r\n  }\r\n\r\n  isValid(valid: Boolean) {\r\n    this.valid = valid;\r\n  }\r\n\r\n  nextClick() {\r\n    this.accessoriesAdded.emit(this.accessoriesToAdd);\r\n    this.modal.close(this.accessoriesToAdd);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  color: #fab900;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: #19303b;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}\r\n",
                    "styleUrl": "./recommended-accessories.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "accessories": {
                    "name": "accessories",
                    "setSignature": {
                        "name": "accessories",
                        "type": "void",
                        "args": [
                            {
                                "name": "accessories",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "accessories",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "accessories",
                        "type": "",
                        "returnType": "Array<Product>",
                        "line": 32
                    }
                }
            },
            "templateData": "<div class=\"modal-header m-4 border-bottom-0\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body mx-5\">\r\n  <h4 class=\"color-primary text-center\">Recommended</h4>\r\n  <div class=\"tyros-reg fs-36 text-center\">Spares & Extras</div>\r\n  <app-recommended-product-carousel\r\n    [displayCount]=\"3\"\r\n    [products]=\"accessories\"\r\n    [showAddToBooking]=\"false\"\r\n    [showCounter]=\"true\"\r\n    (isValid)=\"isValid($event)\"\r\n    (recommendedProductAdded)=\"recommendedProductAdded($event)\"\r\n  ></app-recommended-product-carousel>\r\n\r\n  <div class=\"row my-3\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12 my-2\">\r\n      <button\r\n        class=\"btn btn-outline-secondary btn-lg btn-block grey py-3\"\r\n        (click)=\"modal.dismiss()\"\r\n      >\r\n        NO THANKS\r\n      </button>\r\n    </div>\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12 my-2\">\r\n      <button\r\n        class=\"btn btn-primary btn-lg btn-block py-3\"\r\n        [disabled] = \"!valid\"\r\n        (click)=\"nextClick()\"\r\n      >\r\n        CONTINUE\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RecommendedProductCarousel",
            "id": "component-RecommendedProductCarousel-7cee440ad6287fc027b78dfed2dcf8af",
            "file": "src/app/core/recommended-product-carousel/recommended-product-carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recommended-product-carousel",
            "styleUrls": [
                "./recommended-product-carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recommended-product-carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayCount",
                    "defaultValue": "5",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "products",
                    "line": 34,
                    "type": ""
                },
                {
                    "name": "showAddToBooking",
                    "defaultValue": "true",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "showCounter",
                    "defaultValue": "true",
                    "line": 14,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "isValid",
                    "defaultValue": "new EventEmitter<Boolean>()",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "productClick",
                    "defaultValue": "new EventEmitter<Product>()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "recommendedProductAdded",
                    "defaultValue": "new EventEmitter<Product>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availabilityChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "availabilityState",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loadingAvailability",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadingAvailabilityGraph",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCurrentBookingsButtonClicked",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "productQuantityChanged",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        },
                        {
                            "name": "_quantity",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_quantity",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { AvailabilityState } from '../models/availability-state';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\n\r\n@Component({\r\n  selector: 'app-recommended-product-carousel',\r\n  templateUrl: './recommended-product-carousel.component.html',\r\n  styleUrls: ['./recommended-product-carousel.component.scss'],\r\n})\r\nexport class RecommendedProductCarousel implements OnInit {\r\n  @Input() showAddToBooking: boolean = true;\r\n  @Input() showCounter: boolean = true;\r\n  @Input() displayCount: number = 5;\r\n\r\n  @Output() productClick = new EventEmitter<Product>();\r\n  @Output() recommendedProductAdded = new EventEmitter<Product>();\r\n  @Output() isValid = new EventEmitter<Boolean>();\r\n\r\n  loadingAvailability = false;\r\n  availabilityChecked = false;\r\n  loadingAvailabilityGraph = false;\r\n  // availabilityState: AvailabilityState = new AvailabilityState();\r\n  availabilityState: any;\r\n\r\n  private _products: Array<Product> = [];\r\n\r\n  constructor(\r\n    private bookingService: BookingService) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  @Input() set products(p: Array<Product>) {\r\n    this._products = p.slice(0, this.displayCount);\r\n  }\r\n\r\n  get products(): Array<Product> {\r\n    return this._products;\r\n  }\r\n\r\n  async addToCurrentBookingsButtonClicked(product: Product) {\r\n    try {\r\n      product.addedToBooking = true;\r\n      this.recommendedProductAdded.emit(product);\r\n      setTimeout(() => {\r\n        product.addedToBooking = false;\r\n      }, 2000);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  async productQuantityChanged(product: Product, _quantity: number) {\r\n    this.isValid.emit(false);\r\n    const booking = this.bookingService.getCurrentBooking();\r\n    this.availabilityChecked = false;\r\n\r\n    if (!product) return;\r\n    if (!booking) return;\r\n    if (!booking.period) return;\r\n    if (!booking.period.fromDate) return;\r\n    if (!booking.period.toDate) return;\r\n    if (!booking.location) return;\r\n    if (!booking.location.collection) return;\r\n    if (!booking.location.delivery) return;\r\n\r\n    const miniBooking = new Booking();\r\n    miniBooking.products = booking.products;\r\n    miniBooking.products.forEach(p => {\r\n      p.accessories = [product];\r\n    });\r\n    miniBooking.period.fromDate = booking.period.fromDate;\r\n    miniBooking.period.toDate = booking.period.toDate;\r\n    miniBooking.location.collection = booking.location.collection;\r\n    miniBooking.location.delivery = booking.location.delivery;\r\n\r\n    this.loadingAvailability = true;\r\n    // this.loadingAvailabilityEvent.emit(this.loadingAvailability);\r\n    try {\r\n      const availabilityResponse = await this.bookingService.productsAvailability(\r\n        miniBooking\r\n      );\r\n\r\n      if (\r\n        availabilityResponse.products[0]\r\n      ) {\r\n        const stockDetermination = availabilityResponse.products[0].accessories;\r\n\r\n        stockDetermination.forEach((a) => {\r\n          this.availabilityState = {\r\n            state: a.availabilityState,\r\n            notes: a.note,\r\n          };\r\n        });\r\n        this.availabilityChecked = true;\r\n      }\r\n    } catch (err) {\r\n      // this.isValid.emit(false);\r\n      this.availabilityState = {\r\n        state: 'NOT_AVAILABLE',\r\n        notes: '',\r\n      };\r\n    }\r\n    this.loadingAvailability = false;\r\n    this.availabilityChecked = true;\r\n\r\n    if (!this.loadingAvailability && (this.availabilityState.state === 'NOT_AVAILABLE')) {\r\n      this.isValid.emit(false);\r\n      // alert(`Item not available; ${this.availabilityState.notes}`);\r\n      return;\r\n    } else if (!this.loadingAvailability && (this.availabilityState.state !== 'NOT_AVAILABLE')) {\r\n      this.isValid.emit(true);\r\n      this.recommendedProductAdded.emit(product);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n  min-height: 150px;\r\n  max-height: 150px;\r\n}\r\n\r\n.img2 {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n  min-height: 35px !important;\r\n  max-height: 40px!important;\r\n}\r\n\r\n.pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.discover {\r\n  display: none !important;\r\n}\r\n\r\napp-btn-love {\r\n  padding-top: 1rem;\r\n}\r\n\r\n.btn {\r\n  font-size: 10px;\r\n}\r\n\r\n.small-grey-font {\r\n  color: #c4c4c4;\r\n  font-size: 10px;\r\n  font-family: AvenirLTStd-Light;\r\n}\r\n\r\n.one-line {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: clip;\r\n}\r\n\r\n.recommended-product {\r\n  min-height: 290px;\r\n  justify-content:start!important;\r\n}\r\n\r\n.count-center {\r\n  display: inline-block;\r\n}\r\n\r\n.horizontal-scroll {\r\n  width: auto;\r\n  max-width: auto;\r\n  min-width: auto;\r\n  overflow-y: auto;\r\n  overflow-x: scroll;\r\n}\r\n\r\n.primary {\r\n  color: #fab900 !important;\r\n}\r\n\r\n.black {\r\n  color: #363636;\r\n}\r\n\r\n.j-center {\r\n  justify-content:center!important;\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .mobile {\r\n    display: flex;\r\n    margin: 1rem 0rem 1rem 0rem;\r\n  }\r\n\r\n  img {\r\n    width: auto;\r\n  }\r\n\r\n  .mobile-right {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    padding-left: 2rem;\r\n  }\r\n\r\n  .small-grey-font {\r\n    margin-bottom: 0;\r\n    padding-bottom: 0.4rem;\r\n  }\r\n\r\n  .btn {\r\n    width: 145px;\r\n    height: 34px;\r\n    font-size: 12px;\r\n  }\r\n\r\n  .discover {\r\n    display: contents !important;\r\n    display: flex;\r\n    text-align: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./recommended-product-carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "products": {
                    "name": "products",
                    "setSignature": {
                        "name": "products",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "products",
                        "type": "",
                        "returnType": "Array<Product>",
                        "line": 38
                    }
                }
            },
            "templateData": "<div class=\"row d-flex justify-content-between align-items-center mt-4 horizontal-scroll\">\r\n  <div *ngFor=\"let product of products\"\r\n    class=\"col-11 col-sm-6 col-md-3 col-lg-2 text-center d-flex mt-3 recommended-product\">\r\n    <div class=\"mobile pointer\" (click)=\"productClick.emit(product)\">\r\n      <div class=\"d-flex\">\r\n        <img class=\"img-fluid img\" [src]=\"product.imageThumbnail?.url\" />\r\n        <app-btn-love></app-btn-love>\r\n      </div>\r\n\r\n      <div class=\"mobile-right\">\r\n        <div class=\"row j-center\">\r\n          <div *ngIf=\"availabilityChecked && !loadingAvailability\" class=\"j-center\">\r\n            <div *ngIf=\"availabilityState.state === 'AVAILABLE'\" class=\"d-flex\">\r\n              <button *ngIf=\"!product.note\" type=\"button\" class=\"btn btn-transparent btn-no-border mr-2\" placement=\"top\"\r\n                ngbPopover=\"This item is available for your dates.\" popoverTitle=\"Available\">\r\n                <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n              </button>\r\n\r\n              <button *ngIf=\"product.note\" type=\"button\" class=\"btn btn-transparent btn-no-border mr-2\" placement=\"top\"\r\n                ngbPopover=\"{{ product.note }}\" popoverTitle=\"Available\">\r\n                <img class=\"pointer\" src=\"assets/images/available-green.svg\" />\r\n              </button>\r\n            </div>\r\n            <div *ngIf=\"availabilityState.state === 'NOT_AVAILABLE'\" class=\"d-flex\">\r\n              <button *ngIf=\"product.note\" type=\"button\" class=\"btn btn-transparent btn-no-border mr-2\" placement=\"top\"\r\n                ngbPopover=\"{{ product.note }}\" popoverTitle=\"Not Available\">\r\n                <img class=\"pointer\" src=\"assets/images/alert-orange.svg\" />\r\n              </button>\r\n\r\n              <button *ngIf=\"!product.note\" type=\"button\" class=\"btn btn-transparent btn-no-border mr-2\" placement=\"top\"\r\n                ngbPopover=\"This item is not available for your dates in the requested quantity.\" popoverTitle=\"Not Available\">\r\n                <img class=\"pointer\" src=\"assets/images/alert-orange.svg\" />\r\n              </button>\r\n            </div>\r\n            <div *ngIf=\"availabilityState.state === 'AVAILABLE_BUT_DELAYED'\" class=\"d-flex\">\r\n              <button *ngIf=\"product.note\" type=\"button\" class=\"btn btn-transparent btn-no-border mr-2\" placement=\"top\"\r\n                ngbPopover=\"{{ product.note }}\" popoverTitle=\"Delayed\">\r\n                <img class=\"pointer\" src=\"assets/images/alert.svg\" />\r\n              </button>\r\n\r\n              <button *ngIf=\"!product.note\" type=\"button\" class=\"btn btn-transparent btn-no-border mr-2\" placement=\"top\"\r\n                ngbPopover=\"This item is available for your dates, however it may be delayed in being delivered.\" popoverTitle=\"Delayed\">\r\n                <img class=\"pointer\" src=\"assets/images/alert.svg\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"fs-16 tyros one-line\">{{ product.name }}</div>\r\n        <div class=\"fs-18 tyros-reg\">{{ product.price | number : '1.0-2' }} €</div>\r\n        <p class=\"small-grey-font\">per day</p>\r\n\r\n        <div *ngIf=\"showCounter\">\r\n          <app-counter class=\"count-center\" [(counter)]=\"product.quantity\" [disabled]=\"loadingAvailability\"\r\n            (counterChange)=\"productQuantityChanged(product, $event)\"></app-counter>\r\n        </div>\r\n\r\n        <button *ngIf=\"showAddToBooking\" class=\"btn btn-primary btn-block\" [disabled]=\"loadingAvailability\"\r\n          (click)=\"addToCurrentBookingsButtonClicked(product)\">\r\n          ADD TO BOOKING\r\n        </button>\r\n        <div *ngIf=\"product.addedToBooking\" class=\"fs-12 avenir-light fab pt-2 px-2\">\r\n          Item added to your Booking.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "RecommendedWaterToysComponent",
            "id": "component-RecommendedWaterToysComponent-79dfa70d02361af8b30e33c6c01808af",
            "file": "src/app/core/recommended-water-toys/recommended-water-toys.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recommended-water-toys",
            "styleUrls": [
                "./recommended-water-toys.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recommended-water-toys.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayCount",
                    "defaultValue": "15",
                    "line": 13,
                    "type": "number"
                },
                {
                    "name": "toys",
                    "line": 25,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "toyClick",
                    "defaultValue": "new EventEmitter<Product>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_toys",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Product } from 'src/app/product/models/product.model';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Component({\r\n  selector: 'app-recommended-water-toys',\r\n  templateUrl: './recommended-water-toys.component.html',\r\n  styleUrls: ['./recommended-water-toys.component.scss']\r\n})\r\nexport class RecommendedWaterToysComponent implements OnInit {\r\n  @Input() displayCount: number = 15;\r\n\r\n  @Output() toyClick = new EventEmitter<Product>();\r\n\r\n\r\n  private _toys: Array<Product> = [];\r\n\r\n  constructor(private router: Router) { }\r\n\r\n\r\n  ngOnInit(): void { }\r\n\r\n  @Input() set toys(t: Array<Product>) {\r\n    this._toys = t.slice(0, this.displayCount);\r\n  }\r\n\r\n  get toys(): Array<Product> {\r\n    return this._toys;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".arrow{\r\n  max-height: 35px;\r\n  height:35px;\r\n  padding-left: 10px;\r\n  object-fit: contain;\r\n}\r\n\r\n.img-height{\r\n  max-height: 200px;\r\n  height:200px\r\n}\r\n\r\n.recommended-toy {\r\n  min-height: 290px;\r\n  flex-wrap: nowrap;\r\n  justify-content:start!important;\r\n}\r\n\r\n.mobile{\r\n  min-width:290px;\r\n  max-width: 350px\r\n}\r\n\r\n.card {\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.15);\r\n  // rgba(196, 196, 196, 0.3)\r\n  border-radius: 2px;\r\n  border: none;\r\n}\r\n\r\n.mobile-right {\r\n  padding-inline: 15px;\r\n  text-align: left;\r\n}\r\n\r\n.justify-content-flex-end{\r\n  justify-content: flex-end;;\r\n}\r\n\r\n.pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.btn {\r\n  font-size: 10px;\r\n}\r\n\r\n.small-grey-font {\r\n  color: #c4c4c4;\r\n  font-size: 10px;\r\n  font-family: AvenirLTStd-Light;\r\n}\r\n\r\n.one-line {\r\n  max-width: -webkit-fill-available;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: clip;\r\n}\r\n\r\n.horizontal-scroll {\r\n  width: auto;\r\n  max-width: auto;\r\n  min-width: auto;\r\n  overflow-y: auto;\r\n  overflow-x: scroll;\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .mobile {\r\n    display: flex;\r\n    min-width:290px;\r\n    margin: 1rem 0rem 1rem 0rem;\r\n  }\r\n\r\n  img {\r\n    width: auto;\r\n  }\r\n\r\n  .mobile-right {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    padding-left: 2rem;\r\n  }\r\n\r\n  .small-grey-font {\r\n    margin-bottom: 0;\r\n    padding-bottom: 0.4rem;\r\n  }\r\n\r\n  .btn {\r\n    width: 145px;\r\n    height: 34px;\r\n    font-size: 12px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./recommended-water-toys.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "toys": {
                    "name": "toys",
                    "setSignature": {
                        "name": "toys",
                        "type": "void",
                        "args": [
                            {
                                "name": "t",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "t",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "toys",
                        "type": "",
                        "returnType": "Array<Product>",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n  <div class=\"row mt-4 align-items-center horizontal-scroll recommended-toy\">\r\n    <div *ngFor=\"let toy of toys\" class=\"text-center row d-flex my-3 mx-3\">\r\n      <div class=\"mobile pointer card\" (click)=\"toyClick.emit(toy)\">\r\n        <div class=\"d-flex img-height\">\r\n          <img class=\"img-fluid\" [src]=\"toy.icon?.url\" />\r\n        </div>\r\n        <div class=\"mobile-right\">\r\n          <div class=\"fs-22 tyros-reg-600 one-line\">{{ toy.name }}</div>\r\n          <p class=\"small-grey-font\">Daily Rental from</p>\r\n          <div class=\"fs-18 tyros-reg\">{{ toy.price }} €</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- <span>\r\n        <div class=\"d-flex justify-content-flex-end pt-2\">\r\n            <p class=\"nav-item\" routerLink=\"/\">DISCOVER MORE</p>\r\n            <img class=\"pointer arrow pb-3\"  src=\"/assets/images/nav-arrow-right-orange.svg\"/>\r\n        </div>\r\n    </span> -->\r\n</div>\r\n"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-6a3e9ef4940b586b61f796ad9a279230",
            "file": "src/app/core/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [
                "./reset-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPassword",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "resetPasswordRequest",
                    "defaultValue": "{\r\n    resetCode: '',\r\n    email: '',\r\n    newPassword: ''\r\n  }",
                    "type": "ResetPasswordRequest",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "dismissToSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgAuthService, ResetPasswordRequest } from '@appstrax/ng-auth';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetPasswordRequest: ResetPasswordRequest = {\r\n    resetCode: '',\r\n    email: '',\r\n    newPassword: ''\r\n  };\r\n\r\n  confirmPassword: string = '';\r\n  password: string = '';\r\n\r\n  loading: boolean = false;\r\n  error: string | null = null;\r\n\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private ngAuthService: NgAuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (this.user) {\r\n      this.router.navigate(['/bookings']);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async resetPassword() {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    try {\r\n      const res = await this.ngAuthService.resetPassword(this.resetPasswordRequest);\r\n      this.router.navigate(['auth/login']);\r\n    } catch (err) {\r\n      this.error = 'Failed to send email, please try again or contact support.';\r\n    }\r\n\r\n    localStorage.removeItem('UserEmail');\r\n    this.loading = false;\r\n  }\r\n\r\n  confirm(): boolean {\r\n    if ((this.confirmPassword && this.password) && (this.confirmPassword === this.password) && (this.resetPasswordRequest.resetCode)) {\r\n      this.resetPasswordRequest.newPassword = this.password;\r\n      this.resetPasswordRequest.email = localStorage.getItem('UserEmail') || '';\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  dismissToSignup() {\r\n    this.router.navigate(['auth/sign-up']);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 28px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh6 {\r\n  /* <Style 6> Tyros Pro Bold 16 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 26px;\r\n  text-align: center;\r\n}\r\n\r\ninput {\r\n  height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn.btn-link {\r\n  color: #fab900;\r\n  padding: 0;\r\n}\r\n\r\n.red {\r\n  color: red;\r\n}\r\n",
                    "styleUrl": "./reset-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mb-5 pb-5\">\r\n    <h4>New Password</h4>\r\n    <h3>Enter the reset code recieved via email, as well as the new password.</h3>\r\n    <div class=\"row justify-content-center\">\r\n        <div class=\"col-sm-12 col-md-12 col-lg-6\">\r\n            <form (submit)=\"resetPassword()\">\r\n                <div class=\"form-group mt-4\">\r\n                    <input [disabled]=\"loading\" [(ngModel)]=\"resetPasswordRequest.resetCode\" name=\"code\" type=\"string\"\r\n                        class=\"form-control\" placeholder=\"Reset Code\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input [disabled]=\"loading\" [(ngModel)]=\"password\" name=\"newPassword\" type=\"password\"\r\n                        class=\"form-control\" placeholder=\"New Password\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input [disabled]=\"loading\" [(ngModel)]=\"confirmPassword\" name=\"newPassword2\" type=\"password\"\r\n                        class=\"form-control\" placeholder=\"Confirm New Password\" />\r\n                </div>\r\n                <button [disabled]=\"!confirm()\" class=\"btn btn-primary btn-lg btn-block py-3\">\r\n                    {{ loading ? \"Loading...\" : \"Log in\" }}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n    <h6 *ngIf=\"error\" class=\"mt-3 red\">\r\n        {{ error }}\r\n    </h6>\r\n\r\n    <h6 class=\"mt-3\">\r\n        Don't have an account? <button (click)=\"dismissToSignup()\" class=\"btn btn-link\">Register</button>\r\n    </h6>\r\n</div>"
        },
        {
            "name": "SelectDatesComponent",
            "id": "component-SelectDatesComponent-011f07758a6dc6753ad8e77ed6b392f2",
            "file": "src/app/product/modals/select-dates/select-dates.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-dates",
            "styleUrls": [
                "./select-dates.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-dates.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availabilityState",
                    "defaultValue": "new AvailabilityState()",
                    "type": "AvailabilityState",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "booking",
                    "type": "Booking | undefined",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "datepicker",
                    "type": "NgbInputDatepicker",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'datepicker'"
                        }
                    ]
                },
                {
                    "name": "datesAvailable",
                    "defaultValue": "[]",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "formatter",
                    "type": "NgbDateParserFormatter",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fromDate",
                    "type": "NgbDate | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "hoveredDate",
                    "defaultValue": "null",
                    "type": "NgbDate | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "i18n",
                    "type": "NgbDatepickerI18n",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadingAvailability",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loadingAvailabilityGraph",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "minDate",
                    "type": "NgbDate",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "product",
                    "type": "Product | undefined",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "toDate",
                    "type": "NgbDate | null",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addToBooking",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139
                },
                {
                    "name": "checkGeneralAvailability",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147
                },
                {
                    "name": "isFirst",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isHovered",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInside",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLast",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRange",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUnavailable",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markDisabled",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "current",
                            "type": "literal type | null"
                        },
                        {
                            "name": "next",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "literal type | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "onDateSelection",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDate"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateInput",
                    "args": [
                        {
                            "name": "currentValue",
                            "type": "NgbDate | null"
                        },
                        {
                            "name": "input",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "NgbDate | null",
                    "typeParameters": [],
                    "line": 132,
                    "jsdoctags": [
                        {
                            "name": "currentValue",
                            "type": "NgbDate | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport {\r\n  NgbActiveModal,\r\n  NgbCalendar,\r\n  NgbDate,\r\n  NgbDateParserFormatter,\r\n  NgbDatepickerI18n,\r\n  NgbInputDatepicker,\r\n} from '@ng-bootstrap/ng-bootstrap';\r\nimport * as moment from 'moment';\r\nimport { BookingPeriod } from 'src/app/booking/models/booking-period.model';\r\nimport { Booking } from 'src/app/booking/models/booking.model';\r\nimport { BookingService } from 'src/app/booking/services/bookings.service';\r\nimport { AvailabilityState } from 'src/app/core/models/availability-state';\r\nimport { Product } from '../../models/product.model';\r\n\r\n@Component({\r\n  selector: 'app-select-dates',\r\n  templateUrl: './select-dates.component.html',\r\n  styleUrls: ['./select-dates.component.scss'],\r\n})\r\nexport class SelectDatesComponent implements OnInit {\r\n  @ViewChild('datepicker') datepicker!: NgbInputDatepicker;\r\n\r\n  hoveredDate: NgbDate | null = null;\r\n  minDate: NgbDate;\r\n  fromDate: NgbDate | null;\r\n  toDate: NgbDate | null;\r\n\r\n  booking: Booking | undefined;\r\n  product: Product | undefined;\r\n\r\n  loadingAvailabilityGraph = false;\r\n  loadingAvailability = false;\r\n  availabilityState: AvailabilityState = new AvailabilityState();\r\n\r\n  datesAvailable: Array<{ date: NgbDate | null; available: boolean }> = [];\r\n\r\n  constructor(\r\n    public modal: NgbActiveModal,\r\n    private calendar: NgbCalendar,\r\n    public formatter: NgbDateParserFormatter,\r\n    private bookingService: BookingService,\r\n    public i18n: NgbDatepickerI18n\r\n  ) {\r\n    this.minDate = calendar.getToday();\r\n    this.fromDate = calendar.getNext(calendar.getToday(), 'd', 1);\r\n    this.toDate = calendar.getNext(calendar.getToday(), 'd', 10);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.booking) {\r\n      this.booking.period.fromDate = this.fromDate!;\r\n      this.booking.period.toDate = this.toDate!;\r\n    }\r\n  }\r\n\r\n  onDateSelection(date: NgbDate) {\r\n    if (!this.fromDate && !this.toDate) {\r\n      this.fromDate = date;\r\n      this.booking!.period.fromDate = this.fromDate;\r\n    } else if (\r\n      this.fromDate &&\r\n      !this.toDate &&\r\n      date &&\r\n      date.after(this.fromDate)\r\n    ) {\r\n      this.toDate = date;\r\n      this.booking!.period.toDate = this.toDate;\r\n      this.checkGeneralAvailability();\r\n    } else {\r\n      this.toDate = null;\r\n      this.fromDate = date;\r\n    }\r\n  }\r\n\r\n  isHovered(date: NgbDate) {\r\n    return (\r\n      this.fromDate &&\r\n      !this.toDate &&\r\n      this.hoveredDate &&\r\n      date.after(this.fromDate) &&\r\n      date.before(this.hoveredDate)\r\n    );\r\n  }\r\n\r\n  isInside(date: NgbDate) {\r\n    return this.toDate && date.after(this.fromDate) && date.before(this.toDate);\r\n  }\r\n\r\n  isRange(date: NgbDate) {\r\n    return (\r\n      date.equals(this.fromDate) ||\r\n      (this.toDate && date.equals(this.toDate)) ||\r\n      this.isInside(date) ||\r\n      this.isHovered(date)\r\n    );\r\n  }\r\n\r\n  isFirst(date: NgbDate) {\r\n    return (\r\n      date.year === this.fromDate?.year &&\r\n      date.month === this.fromDate?.month &&\r\n      date.day === this.fromDate?.day\r\n    );\r\n  }\r\n\r\n  isLast(date: NgbDate) {\r\n    return (\r\n      date.year === this.toDate?.year &&\r\n      date.month === this.toDate?.month &&\r\n      date.day === this.toDate?.day\r\n    );\r\n  }\r\n\r\n  isUnavailable(date: NgbDate) {\r\n    const found = this.datesAvailable.find(\r\n      (d) =>\r\n        d.date?.year === date.year &&\r\n        d.date.month === date.month &&\r\n        d.date.day === date.day\r\n    );\r\n    if (!found) return false;\r\n\r\n    return !found.available;\r\n  }\r\n\r\n  markDisabled(date: NgbDate) {\r\n    console.log(date);\r\n  }\r\n\r\n  validateInput(currentValue: NgbDate | null, input: string): NgbDate | null {\r\n    const parsed = this.formatter.parse(input);\r\n    return parsed && this.calendar.isValid(NgbDate.from(parsed))\r\n      ? NgbDate.from(parsed)\r\n      : currentValue;\r\n  }\r\n\r\n  addToBooking() {\r\n    const response = {\r\n      fromDate: this.fromDate,\r\n      toDate: this.toDate,\r\n    };\r\n    this.modal.close(response);\r\n  }\r\n\r\n  isDisabled(): boolean {\r\n    if (this.loadingAvailability || this.loadingAvailabilityGraph) {\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      this.availabilityState.state !== 'AVAILABLE' &&\r\n      this.availabilityState.state !== 'AVAILABLE_BUT_DELAYED'\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  //TODO: check the general availability and figure out why it is not working in conjunction with the isDisabled function above on mobile\r\n  async checkGeneralAvailability() {\r\n    if (!this.product) return;\r\n    if (!this.booking) return;\r\n    if (!this.booking.period) return;\r\n    if (!this.booking.period.fromDate) return;\r\n    if (!this.booking.period.toDate) return;\r\n    if (!this.booking.location) return;\r\n    if (!this.booking.location.collection) return;\r\n    if (!this.booking.location.delivery) return;\r\n\r\n    const miniBooking = new Booking();\r\n    miniBooking.products = [this.product!];\r\n    miniBooking.period = this.booking.period;\r\n    miniBooking.location = this.booking.location;\r\n\r\n    this.loadingAvailability = true;\r\n    try {\r\n      const availabilityResponse = await this.bookingService.productsAvailability(\r\n        miniBooking\r\n      );\r\n\r\n      if (\r\n        availabilityResponse.products[0] &&\r\n        availabilityResponse.products[0].id === this.product.id\r\n      ) {\r\n        const stockDetermination = (availabilityResponse.products[0] as any)\r\n          .stockDetermination;\r\n        this.availabilityState = {\r\n          state: stockDetermination.availabilityState,\r\n          notes: stockDetermination.note,\r\n        };\r\n      }\r\n    } catch (err) {\r\n      this.availabilityState = {\r\n        state: 'NOT_AVAILABLE',\r\n        notes: '',\r\n      };\r\n    }\r\n    this.loadingAvailability = false;\r\n  }\r\n\r\n  async navigate(\r\n    current: { year: number; month: number } | null,\r\n    next: { year: number; month: number }\r\n  ) {\r\n    if (!this.product) throw new Error('Product is required!');\r\n    if (!this.booking) throw new Error('Booking is required!');\r\n\r\n    this.checkGeneralAvailability();\r\n\r\n    this.loadingAvailabilityGraph = true;\r\n    let start = moment();\r\n    let end = moment(next);\r\n    if (current) start = moment(current);\r\n    const period = new BookingPeriod();\r\n    if (start.isBefore(end)) {\r\n      period.start = start\r\n        .startOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n      period.end = end\r\n        .endOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n    } else {\r\n      period.start = end\r\n        .startOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n      period.end = start\r\n        .endOf('month')\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss.000+0000');\r\n    }\r\n    try {\r\n      const graph = await this.bookingService.availabilityGraph(\r\n        this.product!,\r\n        period,\r\n        this.booking!.location\r\n      );\r\n      this.datesAvailable = graph.availabilityGraph.map((ag) => {\r\n        return {\r\n          date: NgbDate.from(this.formatter.parse(ag.date!)),\r\n          available: ag.available!,\r\n        };\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    this.loadingAvailabilityGraph = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  text-align: center;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: #19303b;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}\r\n\r\n.btn.btn-shadow {\r\n  background: #ffffff;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.15);\r\n  border-radius: 3px;\r\n}\r\n.custom-day {\r\n  //styleName: <Mobile P Style 4> Avenir LT Std 45 Book 12;\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: 18px;\r\n  text-align: center;\r\n  padding: 0.185rem 0.25rem;\r\n  display: inline-block;\r\n  height: 2rem;\r\n  width: 4rem;\r\n}\r\n.custom-day.focused {\r\n  background-color: #e6e6e6;\r\n}\r\n.custom-day.range,\r\n.custom-day:hover {\r\n  background-color: #fab900;\r\n  color: white !important;\r\n}\r\n.custom-day.faded {\r\n  background-color: #fab900;\r\n}\r\n.custom-day.unavailable {\r\n  text-decoration: line-through;\r\n  color: #fab900 !important;\r\n}\r\n.custom-day.disabled {\r\n  text-decoration: line-through;\r\n  color: #c4c4c4 !important;\r\n}\r\n.custom-day.first {\r\n  border-radius: 998px 0px 0px 999px !important;\r\n}\r\n.custom-day.last {\r\n  border-radius: 0px 999px 999px 0px !important;\r\n}\r\n\r\nngb-datepicker {\r\n  border: none !important;\r\n}\r\n\r\n.pb-10 {\r\n  padding-bottom: 5rem;\r\n}\r\n\r\n.modal-footer {\r\n  background: white;\r\n  z-index: 10;\r\n}",
                    "styleUrl": "./select-dates.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "calendar",
                        "type": "NgbCalendar"
                    },
                    {
                        "name": "formatter",
                        "type": "NgbDateParserFormatter"
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService"
                    },
                    {
                        "name": "i18n",
                        "type": "NgbDatepickerI18n"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calendar",
                        "type": "NgbCalendar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formatter",
                        "type": "NgbDateParserFormatter",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18n",
                        "type": "NgbDatepickerI18n",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-2 border-bottom-0 d-flex justify-content-between\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-transparent btn-no-border\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('back')\"\r\n  >\r\n    <img src=\"assets/images/mobile-back.svg\" />\r\n  </button>\r\n\r\n  <button\r\n    type=\"button\"\r\n    class=\"close btn-no-border\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <h4 class=\"text-center\">Select Rental Dates</h4>\r\n\r\n  <div *ngIf=\"loadingAvailability\" class=\"row\">\r\n    <div class=\"col-2\">\r\n      <img src=\"assets/images/alert.svg\" />\r\n    </div>\r\n    <div class=\"col-10 m-0 p-0\">\r\n      <h5 class=\"text-uppercase primary\">Loading...</h5>\r\n      <p class=\"p-style-4\">\r\n        We are checking availability for the chosen location, dates and\r\n        quantity.\r\n      </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!loadingAvailability\">\r\n    <div *ngIf=\"availabilityState.state === 'NOT_AVAILABLE'\" class=\"row\">\r\n      <div class=\"col-2\">\r\n        <img src=\"assets/images/alert.svg\" />\r\n      </div>\r\n      <div class=\"col-10 m-0 p-0\">\r\n        <h5 class=\"text-uppercase primary\">Not Available</h5>\r\n        <p class=\"p-style-4\">\r\n          {{ availabilityState.notes }}\r\n        </p>\r\n        <p class=\"p-style-4\">\r\n          Please adjust location, dates or quantity to add this item to your\r\n          booking!\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div\r\n      *ngIf=\"availabilityState.state === 'AVAILABLE_BUT_DELAYED'\"\r\n      class=\"row\"\r\n    >\r\n      <div class=\"col-2\">\r\n        <img src=\"assets/images/alert.svg\" />\r\n      </div>\r\n      <div class=\"col-10 m-0 p-0\">\r\n        <h5 class=\"text-uppercase primary\">Delayed</h5>\r\n        <p class=\"p-style-4\">\r\n          {{ availabilityState.notes }}\r\n        </p>\r\n        <p class=\"p-style-4\">\r\n          Please adjust location, dates or quantity to add this item to your\r\n          booking!\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"availabilityState.state === 'AVAILABLE'\" class=\"row\">\r\n      <div class=\"col-2\">\r\n        <img src=\"assets/images/available-green.svg\" />\r\n      </div>\r\n      <div class=\"col-10 m-0 p-0\">\r\n        <h5 class=\"text-uppercase black\">Available</h5>\r\n        <p class=\"p-style-4\">\r\n          This item is available for your dates.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row justify-content-center mt-3 pb-10\">\r\n    <ngb-datepicker\r\n      #dp\r\n      (dateSelect)=\"onDateSelection($event)\"\r\n      [displayMonths]=\"2\"\r\n      [dayTemplate]=\"t\"\r\n      [minDate]=\"minDate\"\r\n      outsideDays=\"hidden\"\r\n      navigation=\"arrows\"\r\n      [weekdays]=\"true\"\r\n      (navigate)=\"navigate($event.current, $event.next)\"\r\n    >\r\n      <ng-template ngbDatepickerContent>\r\n        <div class=\"col-12\" *ngFor=\"let month of dp.state.months\">\r\n          <h4>{{ i18n.getMonthFullName(month.month) }} {{ month.year }}</h4>\r\n          <ngb-datepicker-month [month]=\"month\"></ngb-datepicker-month>\r\n        </div>\r\n      </ng-template>\r\n    </ngb-datepicker>\r\n\r\n    <ng-template #t let-date let-focused=\"focused\">\r\n      <span\r\n        class=\"custom-day\"\r\n        [class.focused]=\"focused\"\r\n        [class.range]=\"isRange(date)\"\r\n        [class.faded]=\"isHovered(date) || isInside(date)\"\r\n        [class.unavailable]=\"isUnavailable(date)\"\r\n        [class.first]=\"isFirst(date)\"\r\n        [class.last]=\"isLast(date)\"\r\n        [class.disabled]=\"isUnavailable(date)\"\r\n        (mouseenter)=\"hoveredDate = date\"\r\n        (mouseleave)=\"hoveredDate = null\"\r\n      >\r\n        {{ date.day }}\r\n      </span>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row justify-content-between\">\r\n      <div class=\"col-6\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-transparent btn-lg btn-block py-3\"\r\n          (click)=\"modal.close()\"\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-6\">\r\n        <button\r\n          [disabled]=\"isDisabled()\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary btn-lg btn-block py-3\"\r\n          (click)=\"addToBooking()\"\r\n        >\r\n          ADD TO BOOKING\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SignInPage",
            "id": "component-SignInPage-02fa349d2b0957df27bac36bc4121079",
            "file": "src/app/booking/pages/sign-in/sign-in.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in",
            "styleUrls": [
                "./sign-in.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.page.html',\r\n  styleUrls: ['./sign-in.page.scss']\r\n})\r\nexport class SignInPage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh3 {\r\n  /* <Mobile Style 3> Tyros Pro Regular 14 */\r\n  font-family: \"TyrosPro-Regular\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  line-height: 28px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\n.p-style-2 {\r\n  /* <P Style 2> Avenir LT Std 35 Book 24 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n  text-align: center;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-4 {\r\n  /* <P Style 4> Avenir LT Std 45 Medium 14 */\r\n  font-family: \"AvenirLTStd-Medium\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  align-items: center;\r\n  color: #363636;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.divider {\r\n  min-height: 84px;\r\n  width: 0px;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n",
                    "styleUrl": "./sign-in.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mt-5 pt-5\">\r\n  <h4>Sign In</h4>\r\n  <h2>Complete Booking</h2>\r\n  <p class=\"p-style-2 mt-4 mb-5\">\r\n    Sign into your Ocean Premium account for fast checkout or proceed to check\r\n    out as a guest and create an account later.\r\n  </p>\r\n\r\n  <div class=\"container mt-5 p-5\">\r\n    <div class=\"row\">\r\n      <div class=\"col-5\">\r\n        <h3>Log in with</h3>\r\n        <form>\r\n          <div class=\"form-group mt-4\">\r\n            <input class=\"form-control\" placeholder=\"Email\" />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" placeholder=\"Password\" />\r\n          </div>\r\n          <button class=\"btn btn-primary btn-lg btn-block py-3\">\r\n            Log in\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div class=\"col-2\">\r\n        <div class=\"row\">\r\n          <div class=\"col mx-auto\"><hr class=\"divider\" /></div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col mx-auto\">\r\n            <p class=\"p-style-4 text-center pb-0 mt-3 mb-3\">Or</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col mx-auto\"><hr class=\"divider\" /></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-5 my-auto\">\r\n        <h3>Checkout as a Guest</h3>\r\n          <a routerLink=\"../checkout\" class=\"btn btn-primary btn-lg btn-block py-3\">\r\n            Continue\r\n          </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-9538e3b4a1d7081f179ab60607607699",
            "file": "src/app/core/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "passwordOne",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "registrationRequest",
                    "defaultValue": "{\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n  }",
                    "type": "RegistrationRequest",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "isEmailValid",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "signup",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgAuthService, RegistrationRequest } from '@appstrax/ng-auth';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss']\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  registrationRequest: RegistrationRequest = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n  passwordOne = '';\r\n  loading: boolean = false;\r\n  error: string | null = null;\r\n\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private ngAuthService: NgAuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.ngAuthService.getAuthenticatedUser();\r\n    if (this.user) {\r\n      this.router.navigate(['/bookings']);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async signup() {\r\n    this.error = null;\r\n\r\n    if (!this.isEmailValid(this.registrationRequest.email)) {\r\n      this.error = 'Please enter a valid email address';\r\n      return;\r\n    }\r\n\r\n    if (this.passwordOne !== this.registrationRequest.password) {\r\n      this.error = 'Passwords need to match';\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n\r\n    try {\r\n      this.registrationRequest.firstName = this.registrationRequest.email.split(\r\n        '@'\r\n      )[0];\r\n      const user = await this.ngAuthService.register(this.registrationRequest);\r\n      // this.modal.close(user);\r\n    } catch (err) {\r\n      this.error = `Failed to register, make sure you have entered a valid email address.`;\r\n    }\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  dismissToLogin() {\r\n    // this.modal.dismiss('login');\r\n    this.router.navigate(['auth/login']);\r\n  }\r\n\r\n  private isEmailValid(email: string) {\r\n    if (\r\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\r\n        email\r\n      )\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh6 {\r\n  /* <Style 6> Tyros Pro Bold 16 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 26px;\r\n}\r\n\r\ninput {\r\n  height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn.btn-link {\r\n  color: #fab900;\r\n  padding: 0;\r\n}\r\n\r\n.red {\r\n  color: red;\r\n}\r\n\r\n.divider {\r\n  min-height: 84px;\r\n  width: 0px;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .divider {\r\n    display: none;\r\n  }\r\n}\r\n",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"modal-header m-4 border-bottom-0\">\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss()\">\r\n        <img src=\"assets/images/close.svg\" />\r\n    </button>\r\n</div> -->\r\n<!-- <div class=\"modal-body\"> -->\r\n    <div class=\"container mb-5 pb-5\">\r\n        <h4>Sign Up</h4>\r\n        <h2>Create an Account</h2>\r\n\r\n        <h6 class=\"ml-5\">Sign up with Email</h6>\r\n        <div class=\"row mx-5\">\r\n            <div class=\"col-lg-6\">\r\n                <form (submit)=\"signup()\">\r\n                    <div class=\"form-group mt-3\">\r\n                        <input [disabled]=\"loading\" [(ngModel)]=\"registrationRequest.email\" name=\"email\" type=\"email\"\r\n                            class=\"form-control\" placeholder=\"Email\" />\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <input [disabled]=\"loading\" [(ngModel)]=\"passwordOne\" type=\"password\" name=\"password-one\"\r\n                            class=\"form-control\" placeholder=\"Password\" />\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <input [disabled]=\"loading\" [(ngModel)]=\"registrationRequest.password\" type=\"password\"\r\n                            name=\"password-two\" class=\"form-control\" placeholder=\"Repeat Password\" />\r\n                    </div>\r\n                    <button [disabled]=\"loading\" type=\"submit\" class=\"btn btn-primary btn-lg btn-block py-3\">\r\n                        {{ loading ? \"Loading...\" : \"Sign Up\" }}\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            <div class=\"col-lg-2 d-sm-none d-md-block\">\r\n                <div class=\"row\">\r\n                    <div class=\"col mx-auto\">\r\n                        <hr class=\"divider\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col mx-auto\">\r\n                        <p class=\"p-style-4 text-center pb-0 mt-3 mb-3\">Or</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col mx-auto\">\r\n                        <hr class=\"divider\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-lg-4 my-auto justify-content-center\">\r\n                <h6 class=\"text-center\">Login with</h6>\r\n                <a class=\"py-3 text-center pointer\">\r\n                    <img class=\"img-responsive\" src=\"/assets/images/google-button.svg\" />\r\n                </a>\r\n                <a class=\"py-3 text-center pointer\">\r\n                    <img class=\"img-responsive\" src=\"/assets/images/facebook-button.svg\" />\r\n                </a>\r\n            </div>\r\n        </div>\r\n\r\n        <h6 *ngIf=\"error\" class=\"mt-3 red\">\r\n            {{ error }}\r\n        </h6>\r\n\r\n        <h6 class=\"mt-3 text-center\">\r\n            Already have an account?\r\n            <button (click)=\"dismissToLogin()\" class=\"btn btn-link\">Login</button>\r\n        </h6>\r\n    </div>\r\n<!-- </div> -->"
        },
        {
            "name": "SignUpModalComponent",
            "id": "component-SignUpModalComponent-7bdec1c72d0535cd4d304b70dacb1b0e",
            "file": "src/app/core/modals/sign-up-modal/sign-up-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up-modal",
            "styleUrls": [
                "./sign-up-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "passwordOne",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "registrationRequest",
                    "defaultValue": "{\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n  }",
                    "type": "RegistrationRequest",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "isEmailValid",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "signup",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgAuthService, RegistrationRequest } from '@appstrax/ng-auth';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-sign-up-modal',\r\n  templateUrl: './sign-up-modal.component.html',\r\n  styleUrls: ['./sign-up-modal.component.scss'],\r\n})\r\nexport class SignUpModalComponent implements OnInit {\r\n  registrationRequest: RegistrationRequest = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n  passwordOne = '';\r\n  loading: boolean = false;\r\n  error: string | null = null;\r\n\r\n  constructor(\r\n    public modal: NgbActiveModal,\r\n    private ngAuthService: NgAuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  async signup() {\r\n    this.error = null;\r\n\r\n    if (!this.isEmailValid(this.registrationRequest.email)) {\r\n      this.error = 'Please enter a valid email address';\r\n      return;\r\n    }\r\n\r\n    if (this.passwordOne !== this.registrationRequest.password) {\r\n      this.error = 'Passwords need to match';\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n\r\n    try {\r\n      this.registrationRequest.firstName = this.registrationRequest.email.split(\r\n        '@'\r\n      )[0];\r\n      const user = await this.ngAuthService.register(this.registrationRequest);\r\n      this.modal.close(user);\r\n    } catch (err) {\r\n      this.error = `Failed to register, make sure you have entered a valid email address.`;\r\n    }\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  dismissToLogin() {\r\n    this.modal.dismiss('login');\r\n  }\r\n\r\n  private isEmailValid(email: string) {\r\n    if (\r\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\r\n        email\r\n      )\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh6 {\r\n  /* <Style 6> Tyros Pro Bold 16 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 26px;\r\n}\r\n\r\ninput {\r\n  height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.form-control {\r\n  min-height: 50px;\r\n  border: 1px solid #363636;\r\n  box-sizing: border-box;\r\n  border-radius: 2px;\r\n}\r\n\r\n.btn.btn-link {\r\n  color: #fab900;\r\n  padding: 0;\r\n}\r\n\r\n.red {\r\n  color: red;\r\n}\r\n\r\n.divider {\r\n  min-height: 84px;\r\n  width: 0px;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .divider {\r\n    display: none;\r\n  }\r\n}\r\n",
                    "styleUrl": "./sign-up-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuthService",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-4 border-bottom-0\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <div class=\"container mb-5 pb-5\">\r\n    <h4>Sign Up</h4>\r\n    <h2>Create an Account</h2>\r\n\r\n    <h6 class=\"ml-5\">Sign up with Email</h6>\r\n    <div class=\"row mx-5\">\r\n      <div class=\"col-lg-6\">\r\n        <form (submit)=\"signup()\">\r\n          <div class=\"form-group mt-3\">\r\n            <input\r\n              [disabled]=\"loading\"\r\n              [(ngModel)]=\"registrationRequest.email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              class=\"form-control\"\r\n              placeholder=\"Email\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input\r\n              [disabled]=\"loading\"\r\n              [(ngModel)]=\"passwordOne\"\r\n              type=\"password\"\r\n              name=\"password-one\"\r\n              class=\"form-control\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input\r\n              [disabled]=\"loading\"\r\n              [(ngModel)]=\"registrationRequest.password\"\r\n              type=\"password\"\r\n              name=\"password-two\"\r\n              class=\"form-control\"\r\n              placeholder=\"Repeat Password\"\r\n            />\r\n          </div>\r\n          <button\r\n            [disabled]=\"loading\"\r\n            type=\"submit\"\r\n            class=\"btn btn-primary btn-lg btn-block py-3\"\r\n          >\r\n            {{ loading ? \"Loading...\" : \"Sign Up\" }}\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div class=\"col-lg-2 d-sm-none d-md-block\">\r\n        <div class=\"row\">\r\n          <div class=\"col mx-auto\"><hr class=\"divider\" /></div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col mx-auto\">\r\n            <p class=\"p-style-4 text-center pb-0 mt-3 mb-3\">Or</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col mx-auto\"><hr class=\"divider\" /></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-lg-4 my-auto justify-content-center\">\r\n        <h6 class=\"text-center\">Login with</h6>\r\n        <a class=\"py-3 text-center pointer\">\r\n          <img class=\"img-responsive\" src=\"/assets/images/google-button.svg\" />\r\n        </a>\r\n        <a class=\"py-3 text-center pointer\">\r\n          <img\r\n            class=\"img-responsive\"\r\n            src=\"/assets/images/facebook-button.svg\"\r\n          />\r\n        </a>\r\n      </div>\r\n    </div>\r\n\r\n    <h6 *ngIf=\"error\" class=\"mt-3 red\">\r\n      {{ error }}\r\n    </h6>\r\n\r\n    <h6 class=\"mt-3 text-center\">\r\n      Already have an account?\r\n      <button (click)=\"dismissToLogin()\" class=\"btn btn-link\">Login</button>\r\n    </h6>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SingleProductListItemComponent",
            "id": "component-SingleProductListItemComponent-ecd66baf2e6b1afecfe84fb89c3a30e6",
            "file": "src/app/core/single-product-list-item/single-product-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-single-product-list-item",
            "styleUrls": [
                "./single-product-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./single-product-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-single-product-list-item',\r\n  templateUrl: './single-product-list-item.component.html',\r\n  styleUrls: ['./single-product-list-item.component.scss']\r\n})\r\nexport class SingleProductListItemComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".img {\r\n  object-fit: contain;\r\n  max-height: 80px;\r\n}\r\n\r\n.available{\r\n  object-fit: contain;\r\n  max-height: 24px;\r\n}",
                    "styleUrl": "./single-product-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<hr />\r\n\r\n<div class=\"d-flex justify-content-between\">\r\n  <div class=\"fs-18 avenir-light\">Product</div>\r\n  <div class=\"d-flex w-50\">\r\n    <div class=\"fs-18 w-33 avenir-light center\">QTY</div>\r\n    <div class=\"fs-18 w-33 avenir-light center\">Availability</div>\r\n    <div class=\"fs-18 w-33 avenir-light center\">Price</div>\r\n  </div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<div class=\"d-flex align-items-center justify-content-between py-3\">\r\n  <div class=\"pr-4\">\r\n    <img src=\"assets/images/close.svg\">\r\n  </div>\r\n  <div>\r\n    <img class=\"img\" src=\"assets/images/pic1.png\">\r\n  </div>\r\n  <div class=\"d-flex column\">\r\n    <div class=\"fs-24 tyros-reg\">SeaDoo GTR X 230</div>\r\n    <div class=\"fs-18 avenir-light grey\">255 € / Day</div>\r\n  </div>\r\n  <app-counter></app-counter>\r\n  <div>\r\n    <img class=\"available\" src=\"assets/images/available.jpg\">\r\n  </div>\r\n  <div class=\"fs-24 tyros-reg\">€3,060.00</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<div class=\"d-flex align-items-center justify-content-between py-3\">\r\n  <div class=\"pr-4\">\r\n    <img src=\"assets/images/close.svg\">\r\n  </div>\r\n  <div>\r\n    <img class=\"img\" src=\"assets/images/pic1.png\">\r\n  </div>\r\n  <div class=\"d-flex column\">\r\n    <div class=\"fs-24 tyros-reg\">SeaDoo GTR X 230</div>\r\n    <div class=\"fs-18 avenir-light grey\">255 € / Day</div>\r\n  </div>\r\n  <app-counter></app-counter>\r\n  <div>\r\n    <img class=\"available\" src=\"assets/images/available.jpg\">\r\n  </div>\r\n  <div class=\"fs-24 tyros-reg\">€3,060.00</div>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "TransportCostsComponent",
            "id": "component-TransportCostsComponent-323bd2df4fb605f9c47d2077e52130c4",
            "file": "src/app/admin/pages/transport-costs/transport-costs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-transport-costs",
            "styleUrls": [
                "./transport-costs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./transport-costs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ColumnMode",
                    "defaultValue": "ColumnMode",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "editing",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedLocationId",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedWarehouseId",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedWarehouseTypeId",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "updatedRow",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "warehouses",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "warehouseTypes",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "getLocationById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWarehouseById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWarehouseTypeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "locationChange",
                    "args": [
                        {
                            "name": "location",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "refreshTransportCosts",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "cell",
                            "type": "any"
                        },
                        {
                            "name": "rowIndex",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cell",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowIndex",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warehouseChange",
                    "args": [
                        {
                            "name": "warehouse",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "warehouse",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warehouseTypeChange",
                    "args": [
                        {
                            "name": "warehouseType",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "warehouseType",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport { ColumnMode } from '@swimlane/ngx-datatable';\r\nimport { LocationService } from 'src/app/core/services/location.service';\r\nimport { TransportCostService } from 'src/app/core/services/transport-cost.service';\r\nimport { WarehouseService } from 'src/app/core/services/warehouse.service';\r\n\r\n@Component({\r\n  selector: 'app-transport-costs',\r\n  templateUrl: './transport-costs.component.html',\r\n  styleUrls: ['./transport-costs.component.scss'],\r\n})\r\nexport class TransportCostsComponent implements OnInit {\r\n  warehouseTypes: Array<any> = [];\r\n  warehouses: Array<any> = [];\r\n  locations: Array<any> = [];\r\n  selectedWarehouseTypeId: any = null;\r\n  selectedWarehouseId: any = null;\r\n  selectedLocationId: any = null;\r\n\r\n  editing: any = {};\r\n  rows: any = [];\r\n\r\n  ColumnMode = ColumnMode;\r\n\r\n  updatedRow: any = null;\r\n\r\n  user: any = null;\r\n\r\n  constructor(\r\n    private warehouseService: WarehouseService,\r\n    private locationService: LocationService,\r\n    private transportCostService: TransportCostService,\r\n    private ngAuth: NgAuthService,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  async ngOnInit() {\r\n    this.user = this.ngAuth.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.warehouseTypes = (await this.warehouseService.getWarehouseTypes())\r\n      .map((warehouseType: any) => {\r\n        return {\r\n          id: warehouseType.id,\r\n          name: `${warehouseType.name} (${warehouseType.abbreviation})`,\r\n          abbreviation: warehouseType.abbreviation,\r\n        };\r\n      })\r\n      .sort(function (a, b) {\r\n        return a.name.localeCompare(b.name);\r\n      });\r\n\r\n    this.warehouses = (await this.warehouseService.getWarehouses())\r\n      .map((warehouse: any) => {\r\n        return { id: warehouse.id, name: warehouse.name };\r\n      })\r\n      .sort(function (a, b) {\r\n        return a.name.localeCompare(b.name);\r\n      });\r\n\r\n    this.locations = (await this.locationService.getLocations()).sort(function (\r\n      a: any,\r\n      b: any\r\n    ) {\r\n      return a.name.localeCompare(b.name);\r\n    });\r\n\r\n    this.refreshTransportCosts();\r\n  }\r\n\r\n  async refreshTransportCosts() {\r\n    const transportCosts = await this.transportCostService.getTransportCosts(\r\n      this.selectedWarehouseTypeId,\r\n      this.selectedWarehouseId,\r\n      this.selectedLocationId\r\n    );\r\n    this.rows = [...transportCosts];\r\n  }\r\n\r\n  warehouseTypeChange(warehouseType: any) {\r\n    this.selectedWarehouseTypeId = warehouseType.id;\r\n    this.refreshTransportCosts();\r\n  }\r\n\r\n  warehouseChange(warehouse: any) {\r\n    this.selectedWarehouseId = warehouse.id;\r\n    this.refreshTransportCosts();\r\n  }\r\n\r\n  locationChange(location: any) {\r\n    this.selectedLocationId = location.id;\r\n    this.refreshTransportCosts();\r\n  }\r\n\r\n  getWarehouseTypeById(id: any) {\r\n    return this.warehouseTypes.find(\r\n      (warehouseType: any) => warehouseType.id == id\r\n    );\r\n  }\r\n\r\n  getWarehouseById(id: any) {\r\n    return this.warehouses.find((warehouse: any) => warehouse.id == id);\r\n  }\r\n\r\n  getLocationById(id: any) {\r\n    return this.locations.find((location: any) => location.id == id);\r\n  }\r\n\r\n  async updateValue(event: any, cell: any, rowIndex: any) {\r\n    this.editing[rowIndex + '-' + cell] = false;\r\n    this.rows[rowIndex][cell] = event.target.value;\r\n\r\n    await this.transportCostService.putTransportCosts(this.rows[rowIndex]);\r\n\r\n    this.rows = [...this.rows];\r\n\r\n    this.updatedRow = this.rows[rowIndex];\r\n    setTimeout(() => {\r\n      this.updatedRow = null;\r\n    }, 2000);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./transport-costs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "warehouseService",
                        "type": "WarehouseService"
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService"
                    },
                    {
                        "name": "transportCostService",
                        "type": "TransportCostService"
                    },
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "warehouseService",
                        "type": "WarehouseService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locationService",
                        "type": "LocationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transportCostService",
                        "type": "TransportCostService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-4\">\r\n      <app-location-select\r\n        label=\"Warehouse Type\"\r\n        [locations]=\"warehouseTypes\"\r\n        (locationChange)=\"warehouseTypeChange($event)\"\r\n      ></app-location-select>\r\n    </div>\r\n    <div class=\"col-4\">\r\n      <app-location-select\r\n        label=\"Warehouse\"\r\n        [locations]=\"warehouses\"\r\n        (locationChange)=\"warehouseChange($event)\"\r\n      ></app-location-select>\r\n    </div>\r\n    <div class=\"col-4\">\r\n      <app-location-select\r\n        label=\"Location\"\r\n        [locations]=\"locations\"\r\n        (locationChange)=\"locationChange($event)\"\r\n      ></app-location-select>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"updatedRow\" class=\"alert alert-success\" role=\"alert\">\r\n    Updated {{ getWarehouseById(updatedRow[\"warehouseId\"])?.name }}!\r\n  </div>\r\n\r\n  <ngx-datatable\r\n    #mydatatable\r\n    class=\"bootstrap\"\r\n    [headerHeight]=\"50\"\r\n    [limit]=\"10\"\r\n    [columnMode]=\"ColumnMode.force\"\r\n    [footerHeight]=\"50\"\r\n    rowHeight=\"auto\"\r\n    [rows]=\"rows\"\r\n  >\r\n    <ngx-datatable-column name=\"Warehouse Type\">\r\n      <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n        {{ getWarehouseTypeById(row[\"warehouseTypeId\"])?.abbreviation }}\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n\r\n    <ngx-datatable-column name=\"Warehouse\">\r\n      <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n        {{ getWarehouseById(row[\"warehouseId\"])?.name }}\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n\r\n    <ngx-datatable-column name=\"Location\">\r\n      <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n        {{ getLocationById(row[\"locationId\"])?.name }}\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n\r\n    <ngx-datatable-column name=\"Delay In Hours\">\r\n      <ng-template\r\n        ngx-datatable-cell-template\r\n        let-rowIndex=\"rowIndex\"\r\n        let-value=\"value\"\r\n        let-row=\"row\"\r\n      >\r\n        <span\r\n          title=\"Double click to edit\"\r\n          (dblclick)=\"editing[rowIndex + '-delayInHours'] = true\"\r\n          *ngIf=\"!editing[rowIndex + '-delayInHours']\"\r\n        >\r\n          {{ value }}\r\n        </span>\r\n        <input\r\n          autofocus\r\n          (blur)=\"updateValue($event, 'delayInHours', rowIndex)\"\r\n          *ngIf=\"editing[rowIndex + '-delayInHours']\"\r\n          type=\"number\"\r\n          step=\"1\"\r\n          [value]=\"value\"\r\n        />\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n    <ngx-datatable-column name=\"Delivery On Board\">\r\n      <ng-template\r\n        ngx-datatable-cell-template\r\n        let-rowIndex=\"rowIndex\"\r\n        let-row=\"row\"\r\n        let-value=\"value\"\r\n      >\r\n        <span\r\n          title=\"Double click to edit\"\r\n          (dblclick)=\"editing[rowIndex + '-deliveryOnBoard'] = true\"\r\n          *ngIf=\"!editing[rowIndex + '-deliveryOnBoard']\"\r\n        >\r\n          {{ value }}\r\n        </span>\r\n        <input\r\n          autofocus\r\n          (blur)=\"updateValue($event, 'deliveryOnBoard', rowIndex)\"\r\n          *ngIf=\"editing[rowIndex + '-deliveryOnBoard']\"\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          [value]=\"value\"\r\n        />\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n    <ngx-datatable-column name=\"Handling Costs\">\r\n      <ng-template\r\n        ngx-datatable-cell-template\r\n        let-rowIndex=\"rowIndex\"\r\n        let-value=\"value\"\r\n        let-row=\"row\"\r\n      >\r\n        <span\r\n          title=\"Double click to edit\"\r\n          (dblclick)=\"editing[rowIndex + '-handlingCosts'] = true\"\r\n          *ngIf=\"!editing[rowIndex + '-handlingCosts']\"\r\n        >\r\n          {{ value }}\r\n        </span>\r\n        <input\r\n          autofocus\r\n          (blur)=\"updateValue($event, 'handlingCosts', rowIndex)\"\r\n          *ngIf=\"editing[rowIndex + '-handlingCosts']\"\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          [value]=\"value\"\r\n        />\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n\r\n    <ngx-datatable-column name=\"Relocation Fees\">\r\n      <ng-template\r\n        ngx-datatable-cell-template\r\n        let-rowIndex=\"rowIndex\"\r\n        let-value=\"value\"\r\n        let-row=\"row\"\r\n      >\r\n        <span\r\n          title=\"Double click to edit\"\r\n          (dblclick)=\"editing[rowIndex + '-relocationFees'] = true\"\r\n          *ngIf=\"!editing[rowIndex + '-relocationFees']\"\r\n        >\r\n          {{ value }}\r\n        </span>\r\n        <input\r\n          autofocus\r\n          (blur)=\"updateValue($event, 'relocationFees', rowIndex)\"\r\n          *ngIf=\"editing[rowIndex + '-relocationFees']\"\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          [value]=\"value\"\r\n        />\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n\r\n    <ngx-datatable-column name=\"Shipping Costs\">\r\n      <ng-template\r\n        ngx-datatable-cell-template\r\n        let-rowIndex=\"rowIndex\"\r\n        let-value=\"value\"\r\n        let-row=\"row\"\r\n      >\r\n        <span\r\n          title=\"Double click to edit\"\r\n          (dblclick)=\"editing[rowIndex + '-shippingCosts'] = true\"\r\n          *ngIf=\"!editing[rowIndex + '-shippingCosts']\"\r\n        >\r\n          {{ value }}\r\n        </span>\r\n        <input\r\n          autofocus\r\n          (blur)=\"updateValue($event, 'shippingCosts', rowIndex)\"\r\n          *ngIf=\"editing[rowIndex + '-shippingCosts']\"\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          [value]=\"value\"\r\n        />\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n  </ngx-datatable>\r\n</div>\r\n"
        },
        {
            "name": "UsersComponent",
            "id": "component-UsersComponent-3dbcfcf39dfce07e7accf04b43e09336",
            "file": "src/app/admin/pages/users/users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-users",
            "styleUrls": [
                "./users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ColumnMode",
                    "defaultValue": "ColumnMode",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editing",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "roleMap",
                    "defaultValue": "{\r\n    admin: 'admin',\r\n    employee: 'Employee',\r\n    disabled: 'Disabled',\r\n  }",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "updatedRow",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "refreshUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "cell",
                            "type": "any"
                        },
                        {
                            "name": "rowIndex",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cell",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowIndex",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgAuthService } from '@appstrax/ng-auth';\r\nimport { UserService } from 'src/app/core/services/user.service';\r\nimport { ColumnMode } from '@swimlane/ngx-datatable';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  users: Array<any> = [];\r\n  user: any = null;\r\n\r\n  editing: any = {};\r\n  rows: any = [];\r\n\r\n  ColumnMode = ColumnMode;\r\n\r\n  updatedRow: any = null;\r\n\r\n  roleMap: { [key: string]: string } = {\r\n    admin: 'admin',\r\n    employee: 'Employee',\r\n    disabled: 'Disabled',\r\n  };\r\n\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private ngAuth: NgAuthService,\r\n    private router: Router,\r\n\r\n  ) { }\r\n\r\n  async ngOnInit() {\r\n    this.user = this.ngAuth.getAuthenticatedUser();\r\n    if (!this.user) {\r\n      this.router.navigate(['/auth/login']);\r\n      return;\r\n    }\r\n\r\n    this.users = (await this.userService.getUsers()).sort(function (\r\n      a: any,\r\n      b: any\r\n    ) {\r\n      return a.firstName.localeCompare(b.firstName);\r\n    });\r\n    this.refreshUsers();\r\n  }\r\n\r\n  async refreshUsers() {\r\n    const users = await this.userService.getUsers();\r\n    this.rows = [...users];\r\n  }\r\n\r\n  async updateValue(event: any, cell: any, rowIndex: any) {\r\n    this.editing[rowIndex + '-' + cell] = false;\r\n    this.rows[rowIndex][cell] = event.target.value;\r\n\r\n    await this.userService.putUsers(this.rows[rowIndex]);\r\n\r\n    this.rows = [...this.rows];\r\n\r\n    this.updatedRow = this.rows[rowIndex];\r\n    setTimeout(() => {\r\n      this.updatedRow = null;\r\n    }, 2000);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./users.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    },
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngAuth",
                        "type": "NgAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div *ngIf=\"updatedRow\" class=\"alert alert-success\" role=\"alert\">\r\n        Updated {{ updatedRow[\"firstName\"] }}!\r\n    </div>\r\n\r\n    <ngx-datatable #mydatatable class=\"bootstrap\" [headerHeight]=\"50\" [limit]=\"10\" [columnMode]=\"ColumnMode.force\"\r\n        [footerHeight]=\"50\" rowHeight=\"auto\" [rows]=\"rows\">\r\n        <ngx-datatable-column name=\"First Name\">\r\n            <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\r\n                <span title=\"Click to edit\" *ngIf=\"!editing[rowIndex + '-firstName']\">\r\n                    <i-bs (click)=\"editing[rowIndex + '-firstName'] = true\" name=\"pencil-square\"></i-bs>\r\n                    {{ value }}\r\n                </span>\r\n                <input autofocus (blur)=\"updateValue($event, 'firstName', rowIndex)\"\r\n                    *ngIf=\"editing[rowIndex + '-firstName']\" type=\"text\" [value]=\"value\" />\r\n            </ng-template>\r\n        </ngx-datatable-column>\r\n        <ngx-datatable-column name=\"Last Name\">\r\n            <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-row=\"row\" let-value=\"value\">\r\n                <span title=\"Click to edit\" *ngIf=\"!editing[rowIndex + '-lastName']\">\r\n                    <i-bs (click)=\"editing[rowIndex + '-lastName'] = true\" name=\"pencil-square\"></i-bs>\r\n                    {{ value }}\r\n                </span>\r\n                <input autofocus (blur)=\"updateValue($event, 'lastName', rowIndex)\"\r\n                    *ngIf=\"editing[rowIndex + '-lastName']\" type=\"text\" [value]=\"value\" />\r\n            </ng-template>\r\n        </ngx-datatable-column>\r\n        <ngx-datatable-column name=\"Email\">\r\n            <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\r\n                {{ value }}\r\n            </ng-template>\r\n        </ngx-datatable-column>\r\n\r\n        <ngx-datatable-column name=\"Role\">\r\n            <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\r\n                <span title=\"Click to edit\" *ngIf=\"!editing[rowIndex + '-role']\">\r\n                    <i-bs (click)=\"editing[rowIndex + '-role'] = true\" name=\"pencil-square\"></i-bs>\r\n                    {{ roleMap[value] }}\r\n                </span>\r\n                <select *ngIf=\"editing[rowIndex + '-role']\" (blur)=\"editing[rowIndex + '-role'] = false\"\r\n                    (change)=\"updateValue($event, 'role', rowIndex)\" [value]=\"value\">\r\n                    <option value=\"admin\">Admin</option>\r\n                    <option value=\"employee\">Employee</option>\r\n                    <option value=\"disabled\">Disabled</option>\r\n                </select>\r\n            </ng-template>\r\n        </ngx-datatable-column>\r\n    </ngx-datatable>\r\n</div>"
        },
        {
            "name": "WeSpecializeComponent",
            "id": "component-WeSpecializeComponent-9a82a4644383450e5926e9fa5f5f9f65",
            "file": "src/app/core/we-specialize/we-specialize.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-we-specialize",
            "styleUrls": [
                "./we-specialize.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./we-specialize.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-we-specialize',\r\n  templateUrl: './we-specialize.component.html',\r\n  styleUrls: ['./we-specialize.component.scss']\r\n})\r\nexport class WeSpecializeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".background {\r\n  background-color: #19303B;\r\n  padding: 4rem 4rem;\r\n}\r\n\r\n.fab {\r\n  color: #FAB900;\r\n}\r\n\r\n.white {\r\n  color: white;\r\n}\r\n\r\n@media (max-width: 575px) {\r\n  .background {\r\n    text-align: center;\r\n    padding: 2rem 1rem;\r\n  }\r\n\r\n  .title {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .subtitle {\r\n    font-size: 20px;\r\n  }\r\n}\r\n\r\n@media (max-width: 380px) {\r\n  .fs-14 {\r\n    font-size: 10px;\r\n  }\r\n}",
                    "styleUrl": "./we-specialize.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"text-center my-5\">\r\n  <h2 class=\"tyros-reg fs-36 mt-5\">We Specialise</h2>\r\n  <p class=\"m-0 p-0 fs-26 avenir-light\">Our water toys Rental Service is optimised for</p>\r\n  <p class=\"m-0 p-0 fs-26 avenir-light\">Yacht Captains, Charter Brokers & Yacht Managers</p>\r\n</div>\r\n\r\n<div class=\"background mt-5\">\r\n  <h3 class=\"title fab fs-36 tyros-reg\">Need Help?</h3>\r\n  <p class=\"subtitle white fs-26 avenir-light\">\r\n    Reach out for personalised quotations or special arrangements.\r\n  </p>\r\n\r\n  <div class=\"d-flex align-items-center mb-3\">\r\n    <div>\r\n      <img class=\"pr-3\" src=\"assets/images/email-icon.svg\">\r\n    </div>\r\n    <div>\r\n      <p class=\"d-flex white m-0 p-0 fs-14 tyros-reg\">EMAIL</p>\r\n      <a href=\"mailto:booking@oceanpremium.com\" class=\"fab m-0 p-0 fs-14 tyros-reg\">BOOKING@OCEANPREMIUM.COM</a>\r\n    </div>\r\n  </div>\r\n  \r\n  <div class=\"d-flex align-items-center\">\r\n    <div>\r\n      <img class=\"pr-3\" src=\"assets/images/phone-icon.svg\">\r\n    </div>\r\n    <div class=\"pl-1\"> \r\n      <p class=\"d-flex white m-0 p-0 fs-14 tyros-reg\">PHONE</p>\r\n      <a href=\"tel:+33781151254\" class=\"fab m-0 p-0 fs-14 tyros-reg\">+33 781 15 12 54</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "YachtNameComponent",
            "id": "component-YachtNameComponent-055c62e6649b5777772451a688bbcc75",
            "file": "src/app/product/modals/yacht-name/yacht-name.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-yacht-name",
            "styleUrls": [
                "./yacht-name.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./yacht-name.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "yachtName",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-yacht-name',\r\n  templateUrl: './yacht-name.component.html',\r\n  styleUrls: ['./yacht-name.component.scss'],\r\n})\r\nexport class YachtNameComponent implements OnInit {\r\n  yachtName: string = '';\r\n\r\n  constructor(public modal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  /* <Style 2> Tyros Pro Medium 36 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 42px;\r\n  text-align: center;\r\n  color: #19303b;\r\n}\r\n\r\nh4 {\r\n  /* <Style 4> Tyros Pro SemiBold 24 */\r\n  font-family: \"TyrosPro-SemiBold\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  color: #fab900;\r\n}\r\n\r\nh5 {\r\n  /* <Style 5> Tyros Pro Medium 20 */\r\n  font-family: \"TyrosPro-Medium\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: #19303b;\r\n}\r\n\r\n.p-style-1 {\r\n  /* <P-Style 1> Avenir LT Std 45 Book 26 */\r\n  font-family: \"AvenirLTStd-Book\";\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 26px;\r\n  line-height: 34px;\r\n  letter-spacing: 0.117321px;\r\n  color: #363636;\r\n}\r\n\r\n.p-style-3 {\r\n  /* <P Style 3> Avenir LT Std 45 Light 18 */\r\n  font-family: \"AvenirLTStd-Light\";\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  color: #363636;\r\n}\r\n\r\nul li {\r\n  margin-top: 1rem;\r\n  list-style-type: \"-\";\r\n  padding-inline-start: 1ch;\r\n}\r\n\r\nli::marker {\r\n  color: #fab900;\r\n  font-size: 30px;\r\n}",
                    "styleUrl": "./yacht-name.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header m-4 border-bottom-0 d-flex justify-content-between\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-transparent btn-no-border\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('back')\"\r\n  >\r\n    <img src=\"assets/images/mobile-back.svg\" />\r\n  </button>\r\n\r\n  <button\r\n    type=\"button\"\r\n    class=\"close  btn-no-border\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss()\"\r\n  >\r\n    <img src=\"assets/images/close.svg\" />\r\n  </button>\r\n</div>\r\n<div class=\"modal-body px-5\">\r\n  <div class=\"form-group\">\r\n    <div class=\"form-group\">\r\n      <app-floating-input\r\n        label=\"Yacht Name\"\r\n        placeholder=\"Optional\"\r\n        [(value)]=\"yachtName\"\r\n      ></app-floating-input>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row justify-content-between\">\r\n      <div class=\"col-6\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-transparent btn-lg btn-block py-3\"\r\n          (click)=\"modal.close()\"\r\n        >\r\n          Skip\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-6\">\r\n        <button\r\n          [disabled]=\"yachtName.length === 0\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary btn-lg btn-block py-3\"\r\n          (click)=\"modal.close(yachtName)\"\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminHeaderComponent"
                        },
                        {
                            "name": "LayoutComponent"
                        },
                        {
                            "name": "TransportCostsComponent"
                        },
                        {
                            "name": "UsersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ClearComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddBookingComponent"
                        },
                        {
                            "name": "AddedToBookingsComponent"
                        },
                        {
                            "name": "BookingOverviewComponent"
                        },
                        {
                            "name": "CardGridComponent"
                        },
                        {
                            "name": "CheckoutPage"
                        },
                        {
                            "name": "MyBookingsComponent"
                        },
                        {
                            "name": "SignInPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BookingRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "BookingOverviewComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookingRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "HttpService"
                        },
                        {
                            "name": "MetadataService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicLayoutComponent"
                        },
                        {
                            "name": "BookingFormComponent"
                        },
                        {
                            "name": "BookingListItemComponent"
                        },
                        {
                            "name": "BookingSelectComponent"
                        },
                        {
                            "name": "BreadcrumbsComponent"
                        },
                        {
                            "name": "BtnLoveComponent"
                        },
                        {
                            "name": "CounterComponent"
                        },
                        {
                            "name": "CountriesSelectComponent"
                        },
                        {
                            "name": "FaqsComponent"
                        },
                        {
                            "name": "FloatingInputComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "ForgotPasswordComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LocationSelectComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginModalComponent"
                        },
                        {
                            "name": "MyBookingsListItemComponent"
                        },
                        {
                            "name": "NewQuestionComponent"
                        },
                        {
                            "name": "OrderFaqComponent"
                        },
                        {
                            "name": "ProductPreviewImages"
                        },
                        {
                            "name": "RecommendedProductCarousel"
                        },
                        {
                            "name": "RecommendedWaterToysComponent"
                        },
                        {
                            "name": "ResetPasswordComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        },
                        {
                            "name": "SignUpModalComponent"
                        },
                        {
                            "name": "SingleProductListItemComponent"
                        },
                        {
                            "name": "WeSpecializeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BookingFormComponent"
                        },
                        {
                            "name": "BookingListItemComponent"
                        },
                        {
                            "name": "BookingSelectComponent"
                        },
                        {
                            "name": "BreadcrumbsComponent"
                        },
                        {
                            "name": "BtnLoveComponent"
                        },
                        {
                            "name": "CounterComponent"
                        },
                        {
                            "name": "CountriesSelectComponent"
                        },
                        {
                            "name": "FaqsComponent"
                        },
                        {
                            "name": "FloatingInputComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LocationSelectComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginModalComponent"
                        },
                        {
                            "name": "MyBookingsListItemComponent"
                        },
                        {
                            "name": "NewQuestionComponent"
                        },
                        {
                            "name": "OrderFaqComponent"
                        },
                        {
                            "name": "ProductPreviewImages"
                        },
                        {
                            "name": "RecommendedProductCarousel"
                        },
                        {
                            "name": "RecommendedWaterToysComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        },
                        {
                            "name": "SignUpModalComponent"
                        },
                        {
                            "name": "SingleProductListItemComponent"
                        },
                        {
                            "name": "WeSpecializeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaymentModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CompleteOrderComponent"
                        },
                        {
                            "name": "OrderSummaryComponent"
                        },
                        {
                            "name": "PaymentLandingComponent"
                        },
                        {
                            "name": "PaymentOptionsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "PaymentRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaymentRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddComponent"
                        },
                        {
                            "name": "AddToBookingComponent"
                        },
                        {
                            "name": "DropOffLocationComponent"
                        },
                        {
                            "name": "PickUpLocationComponent"
                        },
                        {
                            "name": "ProductFeaturesComponent"
                        },
                        {
                            "name": "ProductPage"
                        },
                        {
                            "name": "RecommendedAccessoriesComponent"
                        },
                        {
                            "name": "SelectDatesComponent"
                        },
                        {
                            "name": "YachtNameComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "ProductRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__non_webpack_require__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "type": "NodeRequire"
            },
            {
                "name": "asobdbfusbadfd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: FaqsComponent,\r\n    props: {\r\n        FAQ: 'test',\r\n        faqs: faqs,\r\n        faq: faqExample,\r\n        faqExample2,\r\n\r\n    }\r\n\r\n})"
            },
            {
                "name": "booking1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "",
                "defaultValue": "new Booking()"
            },
            {
                "name": "booking1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "",
                "defaultValue": "new Booking()"
            },
            {
                "name": "booking2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "",
                "defaultValue": "new Booking()"
            },
            {
                "name": "booking2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "",
                "defaultValue": "new Booking()"
            },
            {
                "name": "bookings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "Array<Booking>",
                "defaultValue": "[booking1, booking2]"
            },
            {
                "name": "bookingSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BookingSelectComponent,\r\n  props: {\r\n    bookings: testBookings,\r\n  },\r\n})"
            },
            {
                "name": "bulkAvailability",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/availability/availability.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  // TODO: Validate request body\r\n  const availabilityRequest = req.body;\r\n\r\n  let deliveryLocation: Location | null;\r\n  let collectionLocation: Location | null;\r\n\r\n  try {\r\n    if (!availabilityRequest.location)\r\n      throw new Error('Location required in request body');\r\n    if (!availabilityRequest.location.delivery)\r\n      throw new Error('Delivery Location required in request body');\r\n    if (!availabilityRequest.location.delivery.id)\r\n      throw new Error('Delivery Location id required in request body');\r\n\r\n    deliveryLocation = await Location.findByPk(\r\n      availabilityRequest.location.delivery.id\r\n    );\r\n    if (!deliveryLocation) {\r\n      throw new Error('Not found');\r\n    }\r\n  } catch (err) {\r\n    return res.json({\r\n      success: false,\r\n      message: `Invalid Delivery Location: ${err.message}`,\r\n    });\r\n  }\r\n\r\n  try {\r\n    if (!availabilityRequest.location)\r\n      throw new Error('Location required in request body');\r\n    if (!availabilityRequest.location.collection)\r\n      throw new Error('Collection Location required in request body');\r\n    if (!availabilityRequest.location.collection.id)\r\n      throw new Error('Collection Location id required in request body');\r\n\r\n    collectionLocation = await Location.findByPk(\r\n      availabilityRequest.location.collection.id\r\n    );\r\n    if (!collectionLocation) {\r\n      throw new Error('Not found');\r\n    }\r\n  } catch (err) {\r\n    return res.json({\r\n      success: false,\r\n      message: `Invalid Collection Location: ${err.message}`,\r\n    });\r\n  }\r\n\r\n  const locationWarehouses = await LocationWarehouse.findAll({\r\n    where: {\r\n      locationId: {\r\n        [Op.in]: [deliveryLocation!.id!, collectionLocation!.id!],\r\n      },\r\n    },\r\n  });\r\n\r\n  const warehouseIds = locationWarehouses.map((lw) => lw.warehouseId!);\r\n  const warehouses = await Warehouse.findAll({\r\n    where: {\r\n      id: {\r\n        [Op.in]: warehouseIds,\r\n      },\r\n    },\r\n  });\r\n\r\n  const warehouseTypes = await WarehouseType.findAll();\r\n  const nativeWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'N'\r\n  );\r\n  if (!nativeWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Native warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  const alternativeWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'A'\r\n  );\r\n  if (!alternativeWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Alternative warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  const grayWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'G'\r\n  );\r\n  if (!grayWarehouseType) {\r\n    return res.json({ success: false, message: 'Gray warehouse type invalid' });\r\n  }\r\n\r\n  const checkWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'C'\r\n  );\r\n  if (!checkWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Check warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  const ignoreWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'X'\r\n  );\r\n  if (!ignoreWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Ignore warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  if (!availabilityRequest.products) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Products array is required in the request body',\r\n    });\r\n  }\r\n\r\n  let allStoreIds: Array<number> = [];\r\n  const allNatives = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === nativeWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allNatives.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  const allAlternatives = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === alternativeWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allAlternatives.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  const allGrays = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === grayWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allGrays.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  const allChecks = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === checkWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allChecks.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  let queryParams = `?starts_at=${availabilityRequest.period.start}&ends_at=${availabilityRequest.period.start}`;\r\n  allStoreIds.forEach((storeId: number) => {\r\n    queryParams = `${queryParams}&store_id[]=${storeId}`;\r\n  });\r\n  queryParams = `${queryParams}&per_page=100`;\r\n  queryParams = `${queryParams}&q[m]=or`;\r\n\r\n  let urls: Array<string> = [];\r\n  let newParams = '' + queryParams;\r\n  let index = 0;\r\n  availabilityRequest.products.forEach((p: any) => {\r\n    const product = ProductSlugIdMapCache.get(p.id) as any;\r\n    if (!product) {\r\n      console.warn('Product not in cache ' + p.id);\r\n      return;\r\n    }\r\n\r\n    newParams = `${newParams}&q[g][${index}][name_eq]=${product.name}`;\r\n    index++;\r\n\r\n    p.accessories = (product.accessories || []).filter(\r\n      (a: any) => a.type === 'DEFAULT'\r\n    );\r\n\r\n    p.accessories.forEach((a: any) => {\r\n      newParams = `${newParams}&q[g][${index}][name_eq]=${a.name}`;\r\n      index++;\r\n    });\r\n\r\n    if (newParams.length > 2000) {\r\n      urls.push(\r\n        `https://api.current-rms.com/api/v1/product_inventories${newParams}`\r\n      );\r\n      index = 0;\r\n      newParams = '' + queryParams;\r\n    }\r\n  });\r\n\r\n  if (index > 0) {\r\n    urls.push(\r\n      `https://api.current-rms.com/api/v1/product_inventories${newParams}`\r\n    );\r\n    index = 0;\r\n    newParams = '' + queryParams;\r\n  }\r\n\r\n  try {\r\n    const productResponse = [...availabilityRequest.products];\r\n\r\n    let inventory: Array<any> = [];\r\n    for (let k = 0; k < urls.length; k++) {\r\n      const url = urls[k];\r\n      const result = await axios({\r\n        url,\r\n        headers: {\r\n          'X-SUBDOMAIN': 'oceanpremium',\r\n          'X-AUTH-TOKEN': 'THSBXexbhY8RUGMAwoWi',\r\n        },\r\n      });\r\n      result.data.product_inventories.forEach((i: any) => {\r\n        inventory.push(i);\r\n      });\r\n    }\r\n\r\n    const now = moment().utc();\r\n    const deliveryMoment = moment(availabilityRequest.period.start).utc();\r\n\r\n    const durationToDelivery = moment.duration(deliveryMoment.diff(now));\r\n    const hoursToDeliveryFromNow = durationToDelivery.asHours();\r\n\r\n    productResponse.forEach((p: any) => {\r\n      p.availabilityState = 'NOT_AVAILABLE';\r\n      p.note = null;\r\n      p.store = null;\r\n\r\n      const inventoryItem = inventory.find((i: any) => i.id == p.id);\r\n      if (!inventoryItem) return;\r\n\r\n      p.price = inventoryItem.rental_price;\r\n      p.stores = (inventoryItem.store_quantities || []).map((s: any) => {\r\n        return {\r\n          id: s.store_id,\r\n          rentalQuantityAvailable: Number(s.rental_quantity_available || 0),\r\n        };\r\n      });\r\n\r\n      if (kitIds.includes(Number(p.id))) {\r\n        p.accessories.forEach((a: any) => {\r\n          const invItem = inventory.find((i: any) => i.id === a.id);\r\n          if (!invItem) return;\r\n\r\n          (invItem.store_quantities || []).forEach((sq: any) => {\r\n            const existingStore = p.stores.find(\r\n              (ps: any) => ps.id === sq.store_id\r\n            );\r\n            if (existingStore) {\r\n              existingStore.rentalQuantityAvailable =\r\n                existingStore.rentalQuantityAvailable +\r\n                Number(sq.rental_quantity_available || 0);\r\n\r\n              if (existingStore.accessories) {\r\n                existingStore.accessories[a.id] =\r\n                  existingStore.rentalQuantityAvailable > 0 ? true : false;\r\n              } else {\r\n                existingStore.accessories = {};\r\n                existingStore.accessories[a.id] =\r\n                  existingStore.rentalQuantityAvailable > 0 ? true : false;\r\n              }\r\n            } else {\r\n              const store: any = {\r\n                id: sq.store_id,\r\n                rentalQuantityAvailable: Number(\r\n                  sq.rental_quantity_available || 0\r\n                ),\r\n              };\r\n              store.accessories = {};\r\n              store.accessories[a.id] =\r\n                store.rentalQuantityAvailable > 0 ? true : false;\r\n\r\n              p.stores.push(store);\r\n            }\r\n          });\r\n        });\r\n\r\n        p.stores = p.stores.filter((ps: any) => {\r\n          let isValid = true;\r\n          if (!ps.accessories) {\r\n            return false;\r\n          }\r\n\r\n          Object.keys(ps.accessories).forEach((pId: any) => {\r\n            if (ps.accessories[pId] === false) {\r\n              isValid = false;\r\n            }\r\n          });\r\n\r\n          return isValid;\r\n        });\r\n      }\r\n\r\n      if (p.stores.length === 0) {\r\n        return;\r\n      }\r\n\r\n      p.stores.forEach((s: any) => {\r\n        const wh = warehouses.find((w) => w.currentRmsStoreId === s.id);\r\n        if (!wh) {\r\n          console.warn('Warehouse not found by CRMSID: ' + s.id);\r\n          return;\r\n        }\r\n\r\n        // Lower score == better\r\n        s.score = null;\r\n        s.locationWarehouse = null;\r\n        s.warehouse = null;\r\n        s.type = null;\r\n\r\n        const natives = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === nativeWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n\r\n        if (natives.length > 0) {\r\n          s.score = 0;\r\n          s.locationWarehouse = natives[0];\r\n          s.warehouse = wh;\r\n          s.type = 'NATIVE';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n          return;\r\n        }\r\n\r\n        const alternatives = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === alternativeWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n\r\n        if (alternatives.length > 0) {\r\n          s.score = 1;\r\n          s.locationWarehouse = alternatives[0];\r\n          s.warehouse = wh;\r\n          s.type = 'ALTERNATIVE';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n          return;\r\n        }\r\n\r\n        const grays = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === grayWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n        if (grays.length > 0) {\r\n          s.score = 2;\r\n          s.locationWarehouse = grays[0];\r\n          s.warehouse = wh;\r\n          s.type = 'GRAY';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n          return;\r\n        }\r\n\r\n        const checks = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === checkWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n        if (checks.length > 0) {\r\n          s.score = 3;\r\n          s.locationWarehouse = checks[0];\r\n          s.warehouse = wh;\r\n          s.type = 'CHECK';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n        }\r\n      });\r\n\r\n      let sortedStores = p.stores.sort((a: any, b: any) => {\r\n        return a.score - b.score;\r\n      });\r\n      // .sort((a: any, b: any) => {\r\n      //   return b.rentalQuantityAvailable - a.rentalQuantityAvailable;\r\n      // });\r\n\r\n      p.store = sortedStores[0];\r\n\r\n      const note4 =\r\n        \"Unfortunately this item is not available. Don't worry! Similar items will give you as much pleasure.\";\r\n\r\n      if (!p.store.warehouse || !p.store.locationWarehouse) {\r\n        p.availabilityState = 'NOT_AVAILABLE';\r\n        p.note = note4;\r\n        return;\r\n      }\r\n\r\n      if (p.store.rentalQuantityAvailable > 0) {\r\n        p.availabilityState = 'AVAILABLE';\r\n      }\r\n\r\n      const deliverBy = now.add(\r\n        p.store.locationWarehouse.delayInHours,\r\n        'hours'\r\n      );\r\n      // console.log(\r\n      //   'Delivery By: ',\r\n      //   deliverBy.tz(deliveryLocation!.timezoneString!).format('DD MMM HH:mm a')\r\n      // );\r\n      // console.log(deliveryMoment);\r\n      // console.log(hoursToDeliveryFromNow);\r\n      // console.log(p.store.locationWarehouse.delayInHours);\r\n\r\n      const note1 = `It can be delivered by ${deliverBy\r\n        .tz(deliveryLocation!.timezoneString!)\r\n        .format('DD MMM HH:mm a')}.`;\r\n      const note2 =\r\n        \"You're lucky! we found Items in nearest Ocean Premium office. There might be additional delivery fee.\";\r\n      const note3 =\r\n        'Upps, Item is available from different regional office. We can make it happen! Please call the office for Delivery fee & coordination.';\r\n\r\n      if (hoursToDeliveryFromNow < p.store.locationWarehouse.delayInHours) {\r\n        p.availabilityState = 'AVAILABLE_BUT_DELAYED';\r\n\r\n        if (p.store.type === 'NATIVE') {\r\n          p.note = note1;\r\n        }\r\n\r\n        if (p.store.type === 'ALTERNATIVE') {\r\n          p.note = `${note1} ${note2}`;\r\n        }\r\n\r\n        if (p.store.type === 'GRAY' || p.store.type === 'CHECK') {\r\n          if (p.store.rentalQuantityAvailable > 0) {\r\n            p.note = note3;\r\n          } else {\r\n            p.availabilityState = 'NOT_AVAILABLE';\r\n            p.note = note4;\r\n          }\r\n        }\r\n      } else {\r\n        if (p.store.type === 'NATIVE') {\r\n          p.note = '';\r\n        }\r\n\r\n        if (p.store.type === 'ALTERNATIVE') {\r\n          p.note = note2;\r\n        }\r\n\r\n        if (p.store.type === 'CHECK') {\r\n          if (p.store.rentalQuantityAvailable > 0) {\r\n            p.note = note3;\r\n          }\r\n        }\r\n      }\r\n\r\n      let watWarehouse = p.store.warehouse;\r\n      const defaultNativeWarehouses = locationWarehouses\r\n        .filter(\r\n          (lw) =>\r\n            lw.locationId === deliveryLocation!.id &&\r\n            lw.warehouseTypeId === nativeWarehouseType.id\r\n        )\r\n        .sort(sortByDelayInHours)\r\n        .sort(sortByPrice);\r\n      if (defaultNativeWarehouses.length > 0) {\r\n        const defaultNativeWarehouse = defaultNativeWarehouses[0];\r\n        const nativeWarehouse = warehouses.find(\r\n          (w: any) => w.id === defaultNativeWarehouse.warehouseId\r\n        );\r\n        if (nativeWarehouse) {\r\n          watWarehouse = nativeWarehouse;\r\n        }\r\n      }\r\n\r\n      if (\r\n        now.isBefore(`${now.year()}-${watWarehouse?.activationTimeFrom}`) &&\r\n        deliveryMoment.isAfter(\r\n          `${now.year()}-${watWarehouse?.activationTimeFrom}`\r\n        )\r\n      ) {\r\n        p.availabilityState = 'AVAILABLE';\r\n        p.note = '';\r\n\r\n        const found = sortedStores.filter(\r\n          (s: any) =>\r\n            s.locationWarehouse.warehouseTypeId !== ignoreWarehouseType.id &&\r\n            s.rentalQuantityAvailable > 0\r\n        );\r\n        // console.log('WAT EXTRA: ', found);\r\n        if (found.length === 0) {\r\n          p.availabilityState = 'NOT_AVAILABLE';\r\n        }\r\n      }\r\n\r\n      if (\r\n        now.isBefore(`${now.year()}-${watWarehouse?.activationTimeFrom}`) &&\r\n        deliveryMoment.isBefore(\r\n          `${now.year()}-${watWarehouse?.activationTimeFrom}`\r\n        )\r\n      ) {\r\n        if (p.store.type === 'GRAY') {\r\n          p.availabilityState = 'AVAILABLE_BUT_DELAYED';\r\n          p.note = note3;\r\n        }\r\n      }\r\n\r\n      delete p.accessories;\r\n    });\r\n\r\n    return res.json({ success: true, data: productResponse });\r\n  } catch (err) {\r\n    console.log(err);\r\n    return res.json({\r\n      success: false,\r\n      message: 'Failed to fetch availability',\r\n    });\r\n  }\r\n}"
            },
            {
                "name": "checkoutBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BreadcrumbsComponent,\r\n  props: {\r\n    breadcrumbs: [\r\n      { path: '/', label: 'My Booking', active: false, disabled: false },\r\n      { path: '/', label: 'Checkout', active: true, disabled: false },\r\n      { path: '/', label: 'Payment', active: false, disabled: true },\r\n    ],\r\n  },\r\n})"
            },
            {
                "name": "compression",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "type": "",
                "defaultValue": "require('compression')"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/config.ts",
                "type": "object",
                "defaultValue": "{\r\n  databaseUrl:\r\n    process.env.DATABASE_URL ||\r\n    'mysql://root:rgb2@localhost:3306/ocean_premium',\r\n  jwtSecret: 'eac28d46-34f7-4a82-875d-64ba7efa4b32',\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/metadata.service.ts",
                "type": "PageMetadata",
                "defaultValue": "{\r\n  title: 'Ocean Premium',\r\n  description: 'Ocean Premium',\r\n  author: 'Ocean Premium',\r\n  keywords: ['Water Toys'],\r\n  type: 'website',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  authApiKey: 'iZAPhrbEjacpjT5pjNHYhf3Ep1dZBDSdJLDkF80l',\r\n  apiBaseUrl: 'https://oceanpremium.com/rental/api',\r\n  home: 'https://oceanpremium.com',\r\n  stripeApiKey: 'pk_live_bv3Fqo7TGV4RBMlYFkC0TAWI00lOF40922',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  authApiKey: 'iZAPhrbEjacpjT5pjNHYhf3Ep1dZBDSdJLDkF80l',\r\n  apiBaseUrl: 'http://localhost:4200/api',\r\n  home: 'https://dev01.oceanpremium.com',\r\n  stripeApiKey: 'pk_test_SPrjeYdGu3H0tTOVIIb8ZXAz00DaImy6UI'\r\n}"
            },
            {
                "name": "existingBookingg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BookingFormComponent,\r\n  props: {\r\n    booking: booking1,\r\n    bookings,\r\n    locations,\r\n    product,\r\n  },\r\n})"
            },
            {
                "name": "faqExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "",
                "defaultValue": "new FAQ()"
            },
            {
                "name": "faqExample2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "",
                "defaultValue": "new FAQ()"
            },
            {
                "name": "faqs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "Array<FAQ>",
                "defaultValue": "[]"
            },
            {
                "name": "findProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/products/products.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  const search = req.query.search || '';\r\n  const deliveryLocationId = req.query.delivery_location_id;\r\n  const collectionLocationId = req.query.collection_location_id;\r\n  const startsAt = req.query.starts_at;\r\n  const endsAt = req.query.ends_at;\r\n  const productGroupId = req.query.product_group_ids;\r\n\r\n  let inventory: Array<any> = [];\r\n  let params = `?q[product_tags_name_cont]=${search}`;\r\n  if (deliveryLocationId) {\r\n    params = `${params}&delivery_location_id=${deliveryLocationId}`;\r\n  }\r\n\r\n  if (collectionLocationId) {\r\n    params = `${params}&collection_location_id=${collectionLocationId}`;\r\n  }\r\n\r\n  if (startsAt) {\r\n    params = `${params}&starts_at=${startsAt}`;\r\n  }\r\n\r\n  if (endsAt) {\r\n    params = `${params}&ends_at=${endsAt}`;\r\n  }\r\n\r\n  if (productGroupId) { // We pass in from our frontend ..&product_group_ids=4,3,5,25\r\n    const productGroups = productGroupId.split(\",\"); // This will turn it into an array\r\n    productGroups.forEach((pg: any) => {\r\n      params = `${params}&q[product_group_id_in][]=${pg}`;\r\n    });\r\n  }\r\n\r\n  try {\r\n    const res = await axios({\r\n      method: 'GET',\r\n      url: `https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products/inventory${params}`,\r\n    });\r\n    if (res.status === 200) {\r\n      inventory = res.data.data;\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .json({\r\n        success: false,\r\n        message: 'Failed to fetch inventory.',\r\n        data: [],\r\n      })\r\n      .status(200);\r\n  }\r\n\r\n  try {\r\n    const products = ProductSlugIdMapCache.keys().map((key) =>\r\n      ProductSlugIdMapCache.get(key)\r\n    );\r\n    const fuse = new Fuse(products, {\r\n      keys: ['name', 'seoFriendlyName', 'seoMetaDescription'],\r\n    });\r\n    const data = req.query.search\r\n      ? fuse.search(req.query.search)\r\n      : products.map((p) => {\r\n        return {\r\n          item: p,\r\n        };\r\n      });\r\n\r\n    const kitIds = [\r\n      87,\r\n      98,\r\n      122,\r\n      125,\r\n      126,\r\n      127,\r\n      131,\r\n      132,\r\n      133,\r\n      134,\r\n      135,\r\n      137,\r\n      208,\r\n      209,\r\n      270,\r\n      314,\r\n      315,\r\n      316,\r\n      317,\r\n      324,\r\n      325,\r\n      326,\r\n      327,\r\n    ];\r\n\r\n    let availableProducts: Array<any> = [];\r\n    data.forEach((fuzzyP: any) => {\r\n      if (kitIds.includes(fuzzyP.item.id)) {\r\n        availableProducts.push(fuzzyP.item);\r\n        return;\r\n      }\r\n\r\n      const available = inventory.find((i) => i.id === fuzzyP.item.id);\r\n      if (available) {\r\n        availableProducts.push(fuzzyP.item);\r\n      }\r\n    });\r\n\r\n    return res.json({ success: true, message: null, data: availableProducts });\r\n  } catch (err) {\r\n    return res\r\n      .json({ success: false, message: 'Failed to search products.', data: [] })\r\n      .status(500);\r\n  }\r\n}"
            },
            {
                "name": "footer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/footer/footer.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: FooterComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "getAllCountries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/country-state-city/country-state-city.ts",
                "type": "",
                "defaultValue": "(req: any, res: any) => {\r\n    try {\r\n        const countries = csc.getAllCountries();\r\n        return res.json({ success: true, code: 200, data: countries });\r\n    } catch (err) {\r\n        return res.json({\r\n            success: false,\r\n            code: 500,\r\n            message: 'Failed to get countries',\r\n        });\r\n    }\r\n}"
            },
            {
                "name": "getCitiesOfCountry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/country-state-city/country-state-city.ts",
                "type": "",
                "defaultValue": "(req: any, res: any) => {\r\n    try {\r\n        const cities = csc.getCitiesOfCountry(`${req.params.country_code}`);\r\n        return res.json({ success: true, code: 200, data: cities });\r\n    } catch (err) {\r\n        return res.json({\r\n            success: false,\r\n            code: 500,\r\n            message: 'Failed to get cities',\r\n        });\r\n    }\r\n}"
            },
            {
                "name": "getLocations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/locations/locations.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    const locations = await Location.findAll();\r\n    return res.json({ success: true, code: 200, data: locations });\r\n  } catch (err) {\r\n    return res.json({\r\n      success: false,\r\n      code: 500,\r\n      message: 'Failed to find locations',\r\n    });\r\n  }\r\n}"
            },
            {
                "name": "getProductBySlug",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/products/products.ts",
                "type": "",
                "defaultValue": "(req: any, res: any) => {\r\n  const cacheKey = `${req.params.product_group_slug}/${req.params.product_slug}`;\r\n\r\n  const product = ProductSlugIdMapCache.get(cacheKey);\r\n  if (!product) return res.status(404).end();\r\n\r\n  return res.json(product);\r\n}"
            },
            {
                "name": "getRecommendedProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/products/products.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  const search = req.query.search || '';\r\n  const productGroupId = req.query.product_group_ids;\r\n\r\n  let params = `?q[product_tags_name_cont]=${search}`;\r\n\r\n  if (productGroupId) { // We pass in from our frontend ..&product_group_ids=4,3,5,25\r\n    const productGroups = productGroupId.split(\",\"); // This will turn it into an array\r\n    productGroups.forEach((pg: any) => {\r\n      params = `${params}&q[product_group_id_in][]=${pg}`;\r\n    });\r\n  }\r\n\r\n  let products: Array<string> = [];\r\n\r\n  if (params.length > 0) {\r\n    let url = `https://api.current-rms.com/api/v1/products${params}`;\r\n    const result = await axios({\r\n      url,\r\n      headers: {\r\n        'X-SUBDOMAIN': 'oceanpremium',\r\n        'X-AUTH-TOKEN': 'THSBXexbhY8RUGMAwoWi',\r\n      },\r\n    });\r\n    // console.log('Res on products call: ', result.data);\r\n    result.data.products.forEach((i: any) => {\r\n      products.push(i);\r\n    });\r\n  }\r\n\r\n  return res.json({ success: true, data: products });\r\n}"
            },
            {
                "name": "getTransportCosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/transport-costs/transport-costs.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    let where: any = {};\r\n    if (req.query.warehouse_type_id) {\r\n      where['warehouseTypeId'] = req.query.warehouse_type_id;\r\n    }\r\n\r\n    if (req.query.warehouse_id) {\r\n      where['warehouseId'] = req.query.warehouse_id;\r\n    }\r\n\r\n    if (req.query.location_id) {\r\n      where['locationId'] = req.query.location_id;\r\n    }\r\n    const locationWarehouses = await LocationWarehouse.findAll({\r\n      where,\r\n    });\r\n    res.json({ success: true, data: locationWarehouses });\r\n  } catch (err) {\r\n    res.json({ success: false, message: 'Failed to fetch transport costs' });\r\n  }\r\n}"
            },
            {
                "name": "getUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/user/user.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n    try {\r\n        let where: any = {};\r\n        if (req.query.id) {\r\n            where['id'] = req.query.id;\r\n        }\r\n\r\n        const user = await User.findAll({\r\n            where,\r\n        });\r\n        res.json({ success: true, data: user });\r\n    } catch (err) {\r\n        res.json({ success: false, message: 'Failed to fetch users' });\r\n    }\r\n}"
            },
            {
                "name": "getUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/user/user.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n    try {\r\n        const users = await User.findAll();\r\n        return res.json({ success: true, code: 200, data: users });\r\n    } catch (err) {\r\n        return res.json({\r\n            success: false,\r\n            code: 500,\r\n            message: 'Failed to find Users',\r\n        });\r\n    }\r\n}"
            },
            {
                "name": "getWarehouses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/warehouses/warehouses.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    // TODO: Filter by types\r\n    // const warehouseTypeId = req.query.warehouse_type;\r\n\r\n    let warehouses = await Warehouse.findAll();\r\n    res.json({ success: true, data: warehouses });\r\n  } catch (err) {\r\n    res\r\n      .json({ success: false, message: 'Failed to fetch warehouse types' })\r\n      .status(500);\r\n  }\r\n}"
            },
            {
                "name": "getWarehouseTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/warehouses/warehouses.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    const warehouseTypes = await WarehouseType.findAll();\r\n    res.json({ success: true, data: warehouseTypes });\r\n  } catch (err) {\r\n    res\r\n      .json({ success: false, message: 'Failed to fetch warehouse types' })\r\n      .status(500);\r\n  }\r\n}"
            },
            {
                "name": "header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/header/header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "ignoreMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "crons/sync-products.ts",
                "type": "literal type",
                "defaultValue": "{}"
            },
            {
                "name": "IsAdmin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/utils/authentication-middleware.ts",
                "type": "",
                "defaultValue": "async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n) => {\r\n    if (res.locals.user?.role === 'admin') {\r\n        return next();\r\n    }\r\n    return res.status(401).send('Unauthorized');\r\n}"
            },
            {
                "name": "kitIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/kits.ts",
                "type": "[]",
                "defaultValue": "[\r\n  325,\r\n  327,\r\n  133,\r\n  135,\r\n  134,\r\n  324,\r\n  326,\r\n  122,\r\n  125,\r\n  270,\r\n  126,\r\n  127,\r\n  131,\r\n  328,\r\n  137,\r\n  98,\r\n  336,\r\n  132,\r\n  208,\r\n  381,\r\n  382,\r\n  384,\r\n  315,\r\n  314,\r\n  316,\r\n  317,\r\n  385,\r\n]"
            },
            {
                "name": "location",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "",
                "defaultValue": "new Location()"
            },
            {
                "name": "location1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "",
                "defaultValue": "new Location()"
            },
            {
                "name": "location2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "",
                "defaultValue": "new Location()"
            },
            {
                "name": "location3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "",
                "defaultValue": "new Location()"
            },
            {
                "name": "location4",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "",
                "defaultValue": "new Location()"
            },
            {
                "name": "locations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "[]",
                "defaultValue": "[location]"
            },
            {
                "name": "locations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "Array<Location>",
                "defaultValue": "[]"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/login/login.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: LoginComponent,\r\n    props: {},\r\n})"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/modals/login-modal/login-modal.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: LoginModalComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "loved",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/btn-love/btn-love.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BtnLoveComponent,\r\n  props: {\r\n    loved: true,\r\n  },\r\n})"
            },
            {
                "name": "mainModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "type": "",
                "defaultValue": "__non_webpack_require__.main"
            },
            {
                "name": "moduleFilename",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "type": "",
                "defaultValue": "(mainModule && mainModule.filename) || ''"
            },
            {
                "name": "noBookings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BookingFormComponent,\r\n  props: {\r\n    bookings: [],\r\n    locations,\r\n    product,\r\n  },\r\n})"
            },
            {
                "name": "noneSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: LocationSelectComponent,\r\n  props: {\r\n    label: 'pick',\r\n    locations: locations,\r\n  },\r\n})"
            },
            {
                "name": "paymentBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BreadcrumbsComponent,\r\n  props: {\r\n    breadcrumbs: [\r\n      { path: '/', label: 'My Booking', active: false, disabled: false },\r\n      { path: '/', label: 'Checkout', active: false, disabled: false },\r\n      { path: '/', label: 'Payment', active: true, disabled: false },\r\n    ],\r\n  },\r\n})"
            },
            {
                "name": "product",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "",
                "defaultValue": "new Product()"
            },
            {
                "name": "productBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BreadcrumbsComponent,\r\n  props: {\r\n    breadcrumbs: [\r\n      { path: '/', label: 'Rentals', active: false, disabled: false },\r\n      { path: '/', label: 'Jetski', active: false, disabled: false },\r\n      { path: '/', label: 'SeaDoo GTR x 230', active: true, disabled: false },\r\n    ],\r\n  },\r\n})"
            },
            {
                "name": "productFeatures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/modals/product-features/product-features.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: ProductFeaturesComponent,\r\n  props: {\r\n    title: 'Test'\r\n  },\r\n})"
            },
            {
                "name": "productFeatures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/modals/recommended-accessories/recommended-accessories.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: RecommendedAccessoriesComponent,\r\n  props: {\r\n    title: 'Test',\r\n  },\r\n})"
            },
            {
                "name": "ProductSlugIdMapCache",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/cache.ts",
                "type": "",
                "defaultValue": "new cache.Cache()"
            },
            {
                "name": "putTransportCosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/transport-costs/transport-costs.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    const locationWarehouse = req.body;\r\n\r\n    let where: any = {};\r\n    where['warehouseTypeId'] = locationWarehouse.warehouseTypeId;\r\n    where['warehouseId'] = locationWarehouse.warehouseId;\r\n    where['locationId'] = locationWarehouse.locationId;\r\n\r\n    const locationWarehouses = await LocationWarehouse.findAll({\r\n      where,\r\n    });\r\n    if (locationWarehouses.length === 0) {\r\n      return res\r\n        .json({ success: false, message: 'Invalid location warehouse' })\r\n        .status(500);\r\n    }\r\n\r\n    await LocationWarehouse.update(locationWarehouse, {\r\n      where,\r\n    });\r\n    res.json({ success: true, data: locationWarehouse });\r\n  } catch (err) {\r\n    res.json({ success: false, message: 'Failed to fetch transport costs' });\r\n  }\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "resetPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/reset-password/reset-password.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: ResetPasswordComponent,\r\n    props: {},\r\n})"
            },
            {
                "name": "router",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/routes.ts",
                "type": "",
                "defaultValue": "express.Router()"
            },
            {
                "name": "selected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: LocationSelectComponent,\r\n  props: {\r\n    label: 'drop',\r\n    locations: locations,\r\n    location: location1,\r\n    location2,\r\n    location3,\r\n    location4,\r\n  },\r\n})"
            },
            {
                "name": "sendRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/forgot-password/forgot-password.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: ForgotPasswordComponent,\r\n    props: {},\r\n})"
            },
            {
                "name": "signup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/sign-up/sign-up.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: SignUpComponent,\r\n    props: {},\r\n})"
            },
            {
                "name": "signup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/modals/sign-up-modal/sign-up-modal.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: SignUpModalComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "sleep",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "crons/sync-products.ts",
                "type": "",
                "defaultValue": "(ms: number) => new Promise((resolve) => setTimeout(resolve, ms))"
            },
            {
                "name": "sortByDelayInHours",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/availability/availability.ts",
                "type": "",
                "defaultValue": "(a: any, b: any) =>\r\n  parseFloat(a.delayInHours) - parseFloat(b.delayInHours)"
            },
            {
                "name": "sortByPrice",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/availability/availability.ts",
                "type": "",
                "defaultValue": "(a: any, b: any) => {\r\n  const aPrice =\r\n    parseFloat(a.deliveryOnBoard) +\r\n    parseFloat(a.handlingCosts) +\r\n    parseFloat(a.relocationFees) +\r\n    parseFloat(a.shippingCosts);\r\n\r\n  const bPrice =\r\n    parseFloat(b.deliveryOnBoard) +\r\n    parseFloat(b.handlingCosts) +\r\n    parseFloat(b.relocationFees) +\r\n    parseFloat(b.shippingCosts);\r\n\r\n  return aPrice - bPrice;\r\n}"
            },
            {
                "name": "testBookings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "Array<Booking>",
                "defaultValue": "[booking1, booking2]"
            },
            {
                "name": "TestData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: RecommendedWaterToysComponent,\r\n    props: {\r\n        toys: [toyExample, toyExample2]\r\n    }\r\n})"
            },
            {
                "name": "toyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                "type": "",
                "defaultValue": "new Product()"
            },
            {
                "name": "toyExample2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                "type": "",
                "defaultValue": "new Product()"
            },
            {
                "name": "two",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/counter/counter.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: CounterComponent,\r\n  props: {\r\n    count: 2,\r\n  },\r\n})"
            },
            {
                "name": "unloved",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/btn-love/btn-love.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BtnLoveComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "updateUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/modules/user/user.ts",
                "type": "",
                "defaultValue": "async (req: any, res: any) => {\r\n    try {\r\n        const updateUser = req.body;\r\n        let where: any = {};\r\n        where['id'] = updateUser.id;\r\n\r\n        const user = await User.findAll({\r\n            where,\r\n        });\r\n\r\n        if (user.length === 0) {\r\n            return res\r\n                .json({ success: false, message: 'Invalid user' })\r\n                .status(500);\r\n        }\r\n\r\n        await User.update(updateUser, { where });\r\n        res.json({ success: true, data: updateUser });\r\n    } catch (err) {\r\n        res.json({ success: false, message: 'Failed to update users' });\r\n    }\r\n}"
            },
            {
                "name": "userAuth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "api/utils/authentication-middleware.ts",
                "type": "",
                "defaultValue": "async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n) => {\r\n    const path: string = req.baseUrl;\r\n    if (!path.includes('api')) {\r\n        next();\r\n        return;\r\n    }\r\n\r\n    const authHeader = req.header('Authorization');\r\n    if (!authHeader) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res\r\n            .status(401)\r\n            .send('This request is missing Authorization header.');\r\n    }\r\n\r\n    const bearerToken = authHeader.replace('Bearer ', '');\r\n    if (!bearerToken) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res.status(401).send('unauthorized');\r\n    }\r\n\r\n    const jwtSecret = config.jwtSecret;\r\n    let jwt: any;\r\n    try {\r\n        jwt = jwtVerify(bearerToken, jwtSecret);\r\n        if (!jwt) {\r\n            if (res.locals.isAdmin) return next();\r\n\r\n            return res.status(401).send('This request is not authorized.');\r\n        }\r\n    } catch (err) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res.status(401).send('This request is not authorized.');\r\n    }\r\n\r\n    const id = jwt.id;\r\n    const email = jwt.email;\r\n    const firstName = jwt.firstName;\r\n    const lastName = jwt.lastName;\r\n    const role = jwt.role;\r\n\r\n    try {\r\n        const user = await User.findOne({ where: { id } });\r\n        res.locals.user = user;\r\n\r\n        if (!user) {\r\n            const newUser = await new User({\r\n                id,\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                role,\r\n            }).save();\r\n            res.locals.user = newUser;\r\n        }\r\n    } catch (err) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res\r\n            .status(500)\r\n            .send('Failed to authorize user, please contact support.');\r\n    }\r\n\r\n    return next();\r\n}"
            },
            {
                "name": "yachtNameEmpty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/floating-input/floating-input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: FloatingInputComponent,\r\n  props: {\r\n    label: 'Yacht name',\r\n    placeholder: 'Optional'\r\n  },\r\n})"
            },
            {
                "name": "yachtNameFilled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/floating-input/floating-input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: FloatingInputComponent,\r\n  props: {\r\n    label: 'Yacht name',\r\n    placeholder: 'Optional',\r\n    ngModel: 'The Mik'\r\n  },\r\n})"
            },
            {
                "name": "zero",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/counter/counter.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: CounterComponent,\r\n  props: {},\r\n})"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "express.Express"
            },
            {
                "name": "run",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "void"
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "BillingType",
                "childs": [
                    {
                        "name": "creditCard",
                        "value": "credit-card"
                    },
                    {
                        "name": "wireTransfer",
                        "value": "wire-transfer"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/booking/models/booking.model.ts"
            }
        ],
        "groupedVariables": {
            "server.ts": [
                {
                    "name": "__non_webpack_require__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "type": "NodeRequire"
                },
                {
                    "name": "compression",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "type": "",
                    "defaultValue": "require('compression')"
                },
                {
                    "name": "mainModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "type": "",
                    "defaultValue": "__non_webpack_require__.main"
                },
                {
                    "name": "moduleFilename",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "type": "",
                    "defaultValue": "(mainModule && mainModule.filename) || ''"
                }
            ],
            "src/app/core/faqs/stories/faqs.stories.ts": [
                {
                    "name": "asobdbfusbadfd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/faqs/stories/faqs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: FaqsComponent,\r\n    props: {\r\n        FAQ: 'test',\r\n        faqs: faqs,\r\n        faq: faqExample,\r\n        faqExample2,\r\n\r\n    }\r\n\r\n})"
                },
                {
                    "name": "faqExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/faqs/stories/faqs.stories.ts",
                    "type": "",
                    "defaultValue": "new FAQ()"
                },
                {
                    "name": "faqExample2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/faqs/stories/faqs.stories.ts",
                    "type": "",
                    "defaultValue": "new FAQ()"
                },
                {
                    "name": "faqs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/faqs/stories/faqs.stories.ts",
                    "type": "Array<FAQ>",
                    "defaultValue": "[]"
                }
            ],
            "src/app/core/booking-form/booking-form.stories.ts": [
                {
                    "name": "booking1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "",
                    "defaultValue": "new Booking()"
                },
                {
                    "name": "booking2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "",
                    "defaultValue": "new Booking()"
                },
                {
                    "name": "bookings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "Array<Booking>",
                    "defaultValue": "[booking1, booking2]"
                },
                {
                    "name": "existingBookingg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BookingFormComponent,\r\n  props: {\r\n    booking: booking1,\r\n    bookings,\r\n    locations,\r\n    product,\r\n  },\r\n})"
                },
                {
                    "name": "location",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "",
                    "defaultValue": "new Location()"
                },
                {
                    "name": "locations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "[]",
                    "defaultValue": "[location]"
                },
                {
                    "name": "noBookings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BookingFormComponent,\r\n  props: {\r\n    bookings: [],\r\n    locations,\r\n    product,\r\n  },\r\n})"
                },
                {
                    "name": "product",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-form/booking-form.stories.ts",
                    "type": "",
                    "defaultValue": "new Product()"
                }
            ],
            "src/app/core/booking-select/booking-select.stories.ts": [
                {
                    "name": "booking1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-select/booking-select.stories.ts",
                    "type": "",
                    "defaultValue": "new Booking()"
                },
                {
                    "name": "booking2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-select/booking-select.stories.ts",
                    "type": "",
                    "defaultValue": "new Booking()"
                },
                {
                    "name": "bookingSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-select/booking-select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BookingSelectComponent,\r\n  props: {\r\n    bookings: testBookings,\r\n  },\r\n})"
                },
                {
                    "name": "testBookings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/booking-select/booking-select.stories.ts",
                    "type": "Array<Booking>",
                    "defaultValue": "[booking1, booking2]"
                }
            ],
            "api/modules/availability/availability.ts": [
                {
                    "name": "bulkAvailability",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/availability/availability.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  // TODO: Validate request body\r\n  const availabilityRequest = req.body;\r\n\r\n  let deliveryLocation: Location | null;\r\n  let collectionLocation: Location | null;\r\n\r\n  try {\r\n    if (!availabilityRequest.location)\r\n      throw new Error('Location required in request body');\r\n    if (!availabilityRequest.location.delivery)\r\n      throw new Error('Delivery Location required in request body');\r\n    if (!availabilityRequest.location.delivery.id)\r\n      throw new Error('Delivery Location id required in request body');\r\n\r\n    deliveryLocation = await Location.findByPk(\r\n      availabilityRequest.location.delivery.id\r\n    );\r\n    if (!deliveryLocation) {\r\n      throw new Error('Not found');\r\n    }\r\n  } catch (err) {\r\n    return res.json({\r\n      success: false,\r\n      message: `Invalid Delivery Location: ${err.message}`,\r\n    });\r\n  }\r\n\r\n  try {\r\n    if (!availabilityRequest.location)\r\n      throw new Error('Location required in request body');\r\n    if (!availabilityRequest.location.collection)\r\n      throw new Error('Collection Location required in request body');\r\n    if (!availabilityRequest.location.collection.id)\r\n      throw new Error('Collection Location id required in request body');\r\n\r\n    collectionLocation = await Location.findByPk(\r\n      availabilityRequest.location.collection.id\r\n    );\r\n    if (!collectionLocation) {\r\n      throw new Error('Not found');\r\n    }\r\n  } catch (err) {\r\n    return res.json({\r\n      success: false,\r\n      message: `Invalid Collection Location: ${err.message}`,\r\n    });\r\n  }\r\n\r\n  const locationWarehouses = await LocationWarehouse.findAll({\r\n    where: {\r\n      locationId: {\r\n        [Op.in]: [deliveryLocation!.id!, collectionLocation!.id!],\r\n      },\r\n    },\r\n  });\r\n\r\n  const warehouseIds = locationWarehouses.map((lw) => lw.warehouseId!);\r\n  const warehouses = await Warehouse.findAll({\r\n    where: {\r\n      id: {\r\n        [Op.in]: warehouseIds,\r\n      },\r\n    },\r\n  });\r\n\r\n  const warehouseTypes = await WarehouseType.findAll();\r\n  const nativeWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'N'\r\n  );\r\n  if (!nativeWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Native warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  const alternativeWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'A'\r\n  );\r\n  if (!alternativeWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Alternative warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  const grayWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'G'\r\n  );\r\n  if (!grayWarehouseType) {\r\n    return res.json({ success: false, message: 'Gray warehouse type invalid' });\r\n  }\r\n\r\n  const checkWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'C'\r\n  );\r\n  if (!checkWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Check warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  const ignoreWarehouseType = warehouseTypes.find(\r\n    (wt) => wt.abbreviation === 'X'\r\n  );\r\n  if (!ignoreWarehouseType) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Ignore warehouse type invalid',\r\n    });\r\n  }\r\n\r\n  if (!availabilityRequest.products) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Products array is required in the request body',\r\n    });\r\n  }\r\n\r\n  let allStoreIds: Array<number> = [];\r\n  const allNatives = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === nativeWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allNatives.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  const allAlternatives = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === alternativeWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allAlternatives.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  const allGrays = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === grayWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allGrays.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  const allChecks = locationWarehouses\r\n    .filter(\r\n      (lw) =>\r\n        lw.locationId === deliveryLocation!.id &&\r\n        lw.warehouseTypeId === checkWarehouseType.id\r\n    )\r\n    .sort(sortByDelayInHours)\r\n    .sort(sortByPrice);\r\n  allChecks.forEach((n: LocationWarehouse) => {\r\n    const wh = warehouses.find((wh: Warehouse) => wh.id === n.warehouseId);\r\n    if (wh) {\r\n      allStoreIds.push(wh.currentRmsStoreId!);\r\n    }\r\n  });\r\n\r\n  let queryParams = `?starts_at=${availabilityRequest.period.start}&ends_at=${availabilityRequest.period.start}`;\r\n  allStoreIds.forEach((storeId: number) => {\r\n    queryParams = `${queryParams}&store_id[]=${storeId}`;\r\n  });\r\n  queryParams = `${queryParams}&per_page=100`;\r\n  queryParams = `${queryParams}&q[m]=or`;\r\n\r\n  let urls: Array<string> = [];\r\n  let newParams = '' + queryParams;\r\n  let index = 0;\r\n  availabilityRequest.products.forEach((p: any) => {\r\n    const product = ProductSlugIdMapCache.get(p.id) as any;\r\n    if (!product) {\r\n      console.warn('Product not in cache ' + p.id);\r\n      return;\r\n    }\r\n\r\n    newParams = `${newParams}&q[g][${index}][name_eq]=${product.name}`;\r\n    index++;\r\n\r\n    p.accessories = (product.accessories || []).filter(\r\n      (a: any) => a.type === 'DEFAULT'\r\n    );\r\n\r\n    p.accessories.forEach((a: any) => {\r\n      newParams = `${newParams}&q[g][${index}][name_eq]=${a.name}`;\r\n      index++;\r\n    });\r\n\r\n    if (newParams.length > 2000) {\r\n      urls.push(\r\n        `https://api.current-rms.com/api/v1/product_inventories${newParams}`\r\n      );\r\n      index = 0;\r\n      newParams = '' + queryParams;\r\n    }\r\n  });\r\n\r\n  if (index > 0) {\r\n    urls.push(\r\n      `https://api.current-rms.com/api/v1/product_inventories${newParams}`\r\n    );\r\n    index = 0;\r\n    newParams = '' + queryParams;\r\n  }\r\n\r\n  try {\r\n    const productResponse = [...availabilityRequest.products];\r\n\r\n    let inventory: Array<any> = [];\r\n    for (let k = 0; k < urls.length; k++) {\r\n      const url = urls[k];\r\n      const result = await axios({\r\n        url,\r\n        headers: {\r\n          'X-SUBDOMAIN': 'oceanpremium',\r\n          'X-AUTH-TOKEN': 'THSBXexbhY8RUGMAwoWi',\r\n        },\r\n      });\r\n      result.data.product_inventories.forEach((i: any) => {\r\n        inventory.push(i);\r\n      });\r\n    }\r\n\r\n    const now = moment().utc();\r\n    const deliveryMoment = moment(availabilityRequest.period.start).utc();\r\n\r\n    const durationToDelivery = moment.duration(deliveryMoment.diff(now));\r\n    const hoursToDeliveryFromNow = durationToDelivery.asHours();\r\n\r\n    productResponse.forEach((p: any) => {\r\n      p.availabilityState = 'NOT_AVAILABLE';\r\n      p.note = null;\r\n      p.store = null;\r\n\r\n      const inventoryItem = inventory.find((i: any) => i.id == p.id);\r\n      if (!inventoryItem) return;\r\n\r\n      p.price = inventoryItem.rental_price;\r\n      p.stores = (inventoryItem.store_quantities || []).map((s: any) => {\r\n        return {\r\n          id: s.store_id,\r\n          rentalQuantityAvailable: Number(s.rental_quantity_available || 0),\r\n        };\r\n      });\r\n\r\n      if (kitIds.includes(Number(p.id))) {\r\n        p.accessories.forEach((a: any) => {\r\n          const invItem = inventory.find((i: any) => i.id === a.id);\r\n          if (!invItem) return;\r\n\r\n          (invItem.store_quantities || []).forEach((sq: any) => {\r\n            const existingStore = p.stores.find(\r\n              (ps: any) => ps.id === sq.store_id\r\n            );\r\n            if (existingStore) {\r\n              existingStore.rentalQuantityAvailable =\r\n                existingStore.rentalQuantityAvailable +\r\n                Number(sq.rental_quantity_available || 0);\r\n\r\n              if (existingStore.accessories) {\r\n                existingStore.accessories[a.id] =\r\n                  existingStore.rentalQuantityAvailable > 0 ? true : false;\r\n              } else {\r\n                existingStore.accessories = {};\r\n                existingStore.accessories[a.id] =\r\n                  existingStore.rentalQuantityAvailable > 0 ? true : false;\r\n              }\r\n            } else {\r\n              const store: any = {\r\n                id: sq.store_id,\r\n                rentalQuantityAvailable: Number(\r\n                  sq.rental_quantity_available || 0\r\n                ),\r\n              };\r\n              store.accessories = {};\r\n              store.accessories[a.id] =\r\n                store.rentalQuantityAvailable > 0 ? true : false;\r\n\r\n              p.stores.push(store);\r\n            }\r\n          });\r\n        });\r\n\r\n        p.stores = p.stores.filter((ps: any) => {\r\n          let isValid = true;\r\n          if (!ps.accessories) {\r\n            return false;\r\n          }\r\n\r\n          Object.keys(ps.accessories).forEach((pId: any) => {\r\n            if (ps.accessories[pId] === false) {\r\n              isValid = false;\r\n            }\r\n          });\r\n\r\n          return isValid;\r\n        });\r\n      }\r\n\r\n      if (p.stores.length === 0) {\r\n        return;\r\n      }\r\n\r\n      p.stores.forEach((s: any) => {\r\n        const wh = warehouses.find((w) => w.currentRmsStoreId === s.id);\r\n        if (!wh) {\r\n          console.warn('Warehouse not found by CRMSID: ' + s.id);\r\n          return;\r\n        }\r\n\r\n        // Lower score == better\r\n        s.score = null;\r\n        s.locationWarehouse = null;\r\n        s.warehouse = null;\r\n        s.type = null;\r\n\r\n        const natives = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === nativeWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n\r\n        if (natives.length > 0) {\r\n          s.score = 0;\r\n          s.locationWarehouse = natives[0];\r\n          s.warehouse = wh;\r\n          s.type = 'NATIVE';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n          return;\r\n        }\r\n\r\n        const alternatives = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === alternativeWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n\r\n        if (alternatives.length > 0) {\r\n          s.score = 1;\r\n          s.locationWarehouse = alternatives[0];\r\n          s.warehouse = wh;\r\n          s.type = 'ALTERNATIVE';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n          return;\r\n        }\r\n\r\n        const grays = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === grayWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n        if (grays.length > 0) {\r\n          s.score = 2;\r\n          s.locationWarehouse = grays[0];\r\n          s.warehouse = wh;\r\n          s.type = 'GRAY';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n          return;\r\n        }\r\n\r\n        const checks = locationWarehouses\r\n          .filter(\r\n            (lw) =>\r\n              lw.warehouseId === wh.id &&\r\n              lw.locationId === deliveryLocation!.id &&\r\n              lw.warehouseTypeId === checkWarehouseType.id\r\n          )\r\n          .sort(sortByDelayInHours)\r\n          .sort(sortByPrice);\r\n        if (checks.length > 0) {\r\n          s.score = 3;\r\n          s.locationWarehouse = checks[0];\r\n          s.warehouse = wh;\r\n          s.type = 'CHECK';\r\n\r\n          if (s.rentalQuantityAvailable === 0) {\r\n            s.score = s.score + 2;\r\n          }\r\n        }\r\n      });\r\n\r\n      let sortedStores = p.stores.sort((a: any, b: any) => {\r\n        return a.score - b.score;\r\n      });\r\n      // .sort((a: any, b: any) => {\r\n      //   return b.rentalQuantityAvailable - a.rentalQuantityAvailable;\r\n      // });\r\n\r\n      p.store = sortedStores[0];\r\n\r\n      const note4 =\r\n        \"Unfortunately this item is not available. Don't worry! Similar items will give you as much pleasure.\";\r\n\r\n      if (!p.store.warehouse || !p.store.locationWarehouse) {\r\n        p.availabilityState = 'NOT_AVAILABLE';\r\n        p.note = note4;\r\n        return;\r\n      }\r\n\r\n      if (p.store.rentalQuantityAvailable > 0) {\r\n        p.availabilityState = 'AVAILABLE';\r\n      }\r\n\r\n      const deliverBy = now.add(\r\n        p.store.locationWarehouse.delayInHours,\r\n        'hours'\r\n      );\r\n      // console.log(\r\n      //   'Delivery By: ',\r\n      //   deliverBy.tz(deliveryLocation!.timezoneString!).format('DD MMM HH:mm a')\r\n      // );\r\n      // console.log(deliveryMoment);\r\n      // console.log(hoursToDeliveryFromNow);\r\n      // console.log(p.store.locationWarehouse.delayInHours);\r\n\r\n      const note1 = `It can be delivered by ${deliverBy\r\n        .tz(deliveryLocation!.timezoneString!)\r\n        .format('DD MMM HH:mm a')}.`;\r\n      const note2 =\r\n        \"You're lucky! we found Items in nearest Ocean Premium office. There might be additional delivery fee.\";\r\n      const note3 =\r\n        'Upps, Item is available from different regional office. We can make it happen! Please call the office for Delivery fee & coordination.';\r\n\r\n      if (hoursToDeliveryFromNow < p.store.locationWarehouse.delayInHours) {\r\n        p.availabilityState = 'AVAILABLE_BUT_DELAYED';\r\n\r\n        if (p.store.type === 'NATIVE') {\r\n          p.note = note1;\r\n        }\r\n\r\n        if (p.store.type === 'ALTERNATIVE') {\r\n          p.note = `${note1} ${note2}`;\r\n        }\r\n\r\n        if (p.store.type === 'GRAY' || p.store.type === 'CHECK') {\r\n          if (p.store.rentalQuantityAvailable > 0) {\r\n            p.note = note3;\r\n          } else {\r\n            p.availabilityState = 'NOT_AVAILABLE';\r\n            p.note = note4;\r\n          }\r\n        }\r\n      } else {\r\n        if (p.store.type === 'NATIVE') {\r\n          p.note = '';\r\n        }\r\n\r\n        if (p.store.type === 'ALTERNATIVE') {\r\n          p.note = note2;\r\n        }\r\n\r\n        if (p.store.type === 'CHECK') {\r\n          if (p.store.rentalQuantityAvailable > 0) {\r\n            p.note = note3;\r\n          }\r\n        }\r\n      }\r\n\r\n      let watWarehouse = p.store.warehouse;\r\n      const defaultNativeWarehouses = locationWarehouses\r\n        .filter(\r\n          (lw) =>\r\n            lw.locationId === deliveryLocation!.id &&\r\n            lw.warehouseTypeId === nativeWarehouseType.id\r\n        )\r\n        .sort(sortByDelayInHours)\r\n        .sort(sortByPrice);\r\n      if (defaultNativeWarehouses.length > 0) {\r\n        const defaultNativeWarehouse = defaultNativeWarehouses[0];\r\n        const nativeWarehouse = warehouses.find(\r\n          (w: any) => w.id === defaultNativeWarehouse.warehouseId\r\n        );\r\n        if (nativeWarehouse) {\r\n          watWarehouse = nativeWarehouse;\r\n        }\r\n      }\r\n\r\n      if (\r\n        now.isBefore(`${now.year()}-${watWarehouse?.activationTimeFrom}`) &&\r\n        deliveryMoment.isAfter(\r\n          `${now.year()}-${watWarehouse?.activationTimeFrom}`\r\n        )\r\n      ) {\r\n        p.availabilityState = 'AVAILABLE';\r\n        p.note = '';\r\n\r\n        const found = sortedStores.filter(\r\n          (s: any) =>\r\n            s.locationWarehouse.warehouseTypeId !== ignoreWarehouseType.id &&\r\n            s.rentalQuantityAvailable > 0\r\n        );\r\n        // console.log('WAT EXTRA: ', found);\r\n        if (found.length === 0) {\r\n          p.availabilityState = 'NOT_AVAILABLE';\r\n        }\r\n      }\r\n\r\n      if (\r\n        now.isBefore(`${now.year()}-${watWarehouse?.activationTimeFrom}`) &&\r\n        deliveryMoment.isBefore(\r\n          `${now.year()}-${watWarehouse?.activationTimeFrom}`\r\n        )\r\n      ) {\r\n        if (p.store.type === 'GRAY') {\r\n          p.availabilityState = 'AVAILABLE_BUT_DELAYED';\r\n          p.note = note3;\r\n        }\r\n      }\r\n\r\n      delete p.accessories;\r\n    });\r\n\r\n    return res.json({ success: true, data: productResponse });\r\n  } catch (err) {\r\n    console.log(err);\r\n    return res.json({\r\n      success: false,\r\n      message: 'Failed to fetch availability',\r\n    });\r\n  }\r\n}"
                },
                {
                    "name": "sortByDelayInHours",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/availability/availability.ts",
                    "type": "",
                    "defaultValue": "(a: any, b: any) =>\r\n  parseFloat(a.delayInHours) - parseFloat(b.delayInHours)"
                },
                {
                    "name": "sortByPrice",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/availability/availability.ts",
                    "type": "",
                    "defaultValue": "(a: any, b: any) => {\r\n  const aPrice =\r\n    parseFloat(a.deliveryOnBoard) +\r\n    parseFloat(a.handlingCosts) +\r\n    parseFloat(a.relocationFees) +\r\n    parseFloat(a.shippingCosts);\r\n\r\n  const bPrice =\r\n    parseFloat(b.deliveryOnBoard) +\r\n    parseFloat(b.handlingCosts) +\r\n    parseFloat(b.relocationFees) +\r\n    parseFloat(b.shippingCosts);\r\n\r\n  return aPrice - bPrice;\r\n}"
                }
            ],
            "src/app/core/breadcrumbs/breadcrumbs.stories.ts": [
                {
                    "name": "checkoutBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BreadcrumbsComponent,\r\n  props: {\r\n    breadcrumbs: [\r\n      { path: '/', label: 'My Booking', active: false, disabled: false },\r\n      { path: '/', label: 'Checkout', active: true, disabled: false },\r\n      { path: '/', label: 'Payment', active: false, disabled: true },\r\n    ],\r\n  },\r\n})"
                },
                {
                    "name": "paymentBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BreadcrumbsComponent,\r\n  props: {\r\n    breadcrumbs: [\r\n      { path: '/', label: 'My Booking', active: false, disabled: false },\r\n      { path: '/', label: 'Checkout', active: false, disabled: false },\r\n      { path: '/', label: 'Payment', active: true, disabled: false },\r\n    ],\r\n  },\r\n})"
                },
                {
                    "name": "productBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BreadcrumbsComponent,\r\n  props: {\r\n    breadcrumbs: [\r\n      { path: '/', label: 'Rentals', active: false, disabled: false },\r\n      { path: '/', label: 'Jetski', active: false, disabled: false },\r\n      { path: '/', label: 'SeaDoo GTR x 230', active: true, disabled: false },\r\n    ],\r\n  },\r\n})"
                }
            ],
            "api/config.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/config.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  databaseUrl:\r\n    process.env.DATABASE_URL ||\r\n    'mysql://root:rgb2@localhost:3306/ocean_premium',\r\n  jwtSecret: 'eac28d46-34f7-4a82-875d-64ba7efa4b32',\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/core/services/metadata.service.ts": [
                {
                    "name": "defaultMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/metadata.service.ts",
                    "type": "PageMetadata",
                    "defaultValue": "{\r\n  title: 'Ocean Premium',\r\n  description: 'Ocean Premium',\r\n  author: 'Ocean Premium',\r\n  keywords: ['Water Toys'],\r\n  type: 'website',\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  authApiKey: 'iZAPhrbEjacpjT5pjNHYhf3Ep1dZBDSdJLDkF80l',\r\n  apiBaseUrl: 'https://oceanpremium.com/rental/api',\r\n  home: 'https://oceanpremium.com',\r\n  stripeApiKey: 'pk_live_bv3Fqo7TGV4RBMlYFkC0TAWI00lOF40922',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  authApiKey: 'iZAPhrbEjacpjT5pjNHYhf3Ep1dZBDSdJLDkF80l',\r\n  apiBaseUrl: 'http://localhost:4200/api',\r\n  home: 'https://dev01.oceanpremium.com',\r\n  stripeApiKey: 'pk_test_SPrjeYdGu3H0tTOVIIb8ZXAz00DaImy6UI'\r\n}"
                }
            ],
            "api/modules/products/products.ts": [
                {
                    "name": "findProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/products/products.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  const search = req.query.search || '';\r\n  const deliveryLocationId = req.query.delivery_location_id;\r\n  const collectionLocationId = req.query.collection_location_id;\r\n  const startsAt = req.query.starts_at;\r\n  const endsAt = req.query.ends_at;\r\n  const productGroupId = req.query.product_group_ids;\r\n\r\n  let inventory: Array<any> = [];\r\n  let params = `?q[product_tags_name_cont]=${search}`;\r\n  if (deliveryLocationId) {\r\n    params = `${params}&delivery_location_id=${deliveryLocationId}`;\r\n  }\r\n\r\n  if (collectionLocationId) {\r\n    params = `${params}&collection_location_id=${collectionLocationId}`;\r\n  }\r\n\r\n  if (startsAt) {\r\n    params = `${params}&starts_at=${startsAt}`;\r\n  }\r\n\r\n  if (endsAt) {\r\n    params = `${params}&ends_at=${endsAt}`;\r\n  }\r\n\r\n  if (productGroupId) { // We pass in from our frontend ..&product_group_ids=4,3,5,25\r\n    const productGroups = productGroupId.split(\",\"); // This will turn it into an array\r\n    productGroups.forEach((pg: any) => {\r\n      params = `${params}&q[product_group_id_in][]=${pg}`;\r\n    });\r\n  }\r\n\r\n  try {\r\n    const res = await axios({\r\n      method: 'GET',\r\n      url: `https://zu6wjlgc49.execute-api.eu-west-1.amazonaws.com/staging/api/v1/products/inventory${params}`,\r\n    });\r\n    if (res.status === 200) {\r\n      inventory = res.data.data;\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .json({\r\n        success: false,\r\n        message: 'Failed to fetch inventory.',\r\n        data: [],\r\n      })\r\n      .status(200);\r\n  }\r\n\r\n  try {\r\n    const products = ProductSlugIdMapCache.keys().map((key) =>\r\n      ProductSlugIdMapCache.get(key)\r\n    );\r\n    const fuse = new Fuse(products, {\r\n      keys: ['name', 'seoFriendlyName', 'seoMetaDescription'],\r\n    });\r\n    const data = req.query.search\r\n      ? fuse.search(req.query.search)\r\n      : products.map((p) => {\r\n        return {\r\n          item: p,\r\n        };\r\n      });\r\n\r\n    const kitIds = [\r\n      87,\r\n      98,\r\n      122,\r\n      125,\r\n      126,\r\n      127,\r\n      131,\r\n      132,\r\n      133,\r\n      134,\r\n      135,\r\n      137,\r\n      208,\r\n      209,\r\n      270,\r\n      314,\r\n      315,\r\n      316,\r\n      317,\r\n      324,\r\n      325,\r\n      326,\r\n      327,\r\n    ];\r\n\r\n    let availableProducts: Array<any> = [];\r\n    data.forEach((fuzzyP: any) => {\r\n      if (kitIds.includes(fuzzyP.item.id)) {\r\n        availableProducts.push(fuzzyP.item);\r\n        return;\r\n      }\r\n\r\n      const available = inventory.find((i) => i.id === fuzzyP.item.id);\r\n      if (available) {\r\n        availableProducts.push(fuzzyP.item);\r\n      }\r\n    });\r\n\r\n    return res.json({ success: true, message: null, data: availableProducts });\r\n  } catch (err) {\r\n    return res\r\n      .json({ success: false, message: 'Failed to search products.', data: [] })\r\n      .status(500);\r\n  }\r\n}"
                },
                {
                    "name": "getProductBySlug",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/products/products.ts",
                    "type": "",
                    "defaultValue": "(req: any, res: any) => {\r\n  const cacheKey = `${req.params.product_group_slug}/${req.params.product_slug}`;\r\n\r\n  const product = ProductSlugIdMapCache.get(cacheKey);\r\n  if (!product) return res.status(404).end();\r\n\r\n  return res.json(product);\r\n}"
                },
                {
                    "name": "getRecommendedProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/products/products.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  const search = req.query.search || '';\r\n  const productGroupId = req.query.product_group_ids;\r\n\r\n  let params = `?q[product_tags_name_cont]=${search}`;\r\n\r\n  if (productGroupId) { // We pass in from our frontend ..&product_group_ids=4,3,5,25\r\n    const productGroups = productGroupId.split(\",\"); // This will turn it into an array\r\n    productGroups.forEach((pg: any) => {\r\n      params = `${params}&q[product_group_id_in][]=${pg}`;\r\n    });\r\n  }\r\n\r\n  let products: Array<string> = [];\r\n\r\n  if (params.length > 0) {\r\n    let url = `https://api.current-rms.com/api/v1/products${params}`;\r\n    const result = await axios({\r\n      url,\r\n      headers: {\r\n        'X-SUBDOMAIN': 'oceanpremium',\r\n        'X-AUTH-TOKEN': 'THSBXexbhY8RUGMAwoWi',\r\n      },\r\n    });\r\n    // console.log('Res on products call: ', result.data);\r\n    result.data.products.forEach((i: any) => {\r\n      products.push(i);\r\n    });\r\n  }\r\n\r\n  return res.json({ success: true, data: products });\r\n}"
                }
            ],
            "src/app/core/footer/footer.stories.ts": [
                {
                    "name": "footer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/footer/footer.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: FooterComponent,\r\n  props: {},\r\n})"
                }
            ],
            "api/modules/country-state-city/country-state-city.ts": [
                {
                    "name": "getAllCountries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/country-state-city/country-state-city.ts",
                    "type": "",
                    "defaultValue": "(req: any, res: any) => {\r\n    try {\r\n        const countries = csc.getAllCountries();\r\n        return res.json({ success: true, code: 200, data: countries });\r\n    } catch (err) {\r\n        return res.json({\r\n            success: false,\r\n            code: 500,\r\n            message: 'Failed to get countries',\r\n        });\r\n    }\r\n}"
                },
                {
                    "name": "getCitiesOfCountry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/country-state-city/country-state-city.ts",
                    "type": "",
                    "defaultValue": "(req: any, res: any) => {\r\n    try {\r\n        const cities = csc.getCitiesOfCountry(`${req.params.country_code}`);\r\n        return res.json({ success: true, code: 200, data: cities });\r\n    } catch (err) {\r\n        return res.json({\r\n            success: false,\r\n            code: 500,\r\n            message: 'Failed to get cities',\r\n        });\r\n    }\r\n}"
                }
            ],
            "api/modules/locations/locations.ts": [
                {
                    "name": "getLocations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/locations/locations.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    const locations = await Location.findAll();\r\n    return res.json({ success: true, code: 200, data: locations });\r\n  } catch (err) {\r\n    return res.json({\r\n      success: false,\r\n      code: 500,\r\n      message: 'Failed to find locations',\r\n    });\r\n  }\r\n}"
                }
            ],
            "api/modules/transport-costs/transport-costs.ts": [
                {
                    "name": "getTransportCosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/transport-costs/transport-costs.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    let where: any = {};\r\n    if (req.query.warehouse_type_id) {\r\n      where['warehouseTypeId'] = req.query.warehouse_type_id;\r\n    }\r\n\r\n    if (req.query.warehouse_id) {\r\n      where['warehouseId'] = req.query.warehouse_id;\r\n    }\r\n\r\n    if (req.query.location_id) {\r\n      where['locationId'] = req.query.location_id;\r\n    }\r\n    const locationWarehouses = await LocationWarehouse.findAll({\r\n      where,\r\n    });\r\n    res.json({ success: true, data: locationWarehouses });\r\n  } catch (err) {\r\n    res.json({ success: false, message: 'Failed to fetch transport costs' });\r\n  }\r\n}"
                },
                {
                    "name": "putTransportCosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/transport-costs/transport-costs.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    const locationWarehouse = req.body;\r\n\r\n    let where: any = {};\r\n    where['warehouseTypeId'] = locationWarehouse.warehouseTypeId;\r\n    where['warehouseId'] = locationWarehouse.warehouseId;\r\n    where['locationId'] = locationWarehouse.locationId;\r\n\r\n    const locationWarehouses = await LocationWarehouse.findAll({\r\n      where,\r\n    });\r\n    if (locationWarehouses.length === 0) {\r\n      return res\r\n        .json({ success: false, message: 'Invalid location warehouse' })\r\n        .status(500);\r\n    }\r\n\r\n    await LocationWarehouse.update(locationWarehouse, {\r\n      where,\r\n    });\r\n    res.json({ success: true, data: locationWarehouse });\r\n  } catch (err) {\r\n    res.json({ success: false, message: 'Failed to fetch transport costs' });\r\n  }\r\n}"
                }
            ],
            "api/modules/user/user.ts": [
                {
                    "name": "getUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/user/user.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n    try {\r\n        let where: any = {};\r\n        if (req.query.id) {\r\n            where['id'] = req.query.id;\r\n        }\r\n\r\n        const user = await User.findAll({\r\n            where,\r\n        });\r\n        res.json({ success: true, data: user });\r\n    } catch (err) {\r\n        res.json({ success: false, message: 'Failed to fetch users' });\r\n    }\r\n}"
                },
                {
                    "name": "getUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/user/user.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n    try {\r\n        const users = await User.findAll();\r\n        return res.json({ success: true, code: 200, data: users });\r\n    } catch (err) {\r\n        return res.json({\r\n            success: false,\r\n            code: 500,\r\n            message: 'Failed to find Users',\r\n        });\r\n    }\r\n}"
                },
                {
                    "name": "updateUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/user/user.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n    try {\r\n        const updateUser = req.body;\r\n        let where: any = {};\r\n        where['id'] = updateUser.id;\r\n\r\n        const user = await User.findAll({\r\n            where,\r\n        });\r\n\r\n        if (user.length === 0) {\r\n            return res\r\n                .json({ success: false, message: 'Invalid user' })\r\n                .status(500);\r\n        }\r\n\r\n        await User.update(updateUser, { where });\r\n        res.json({ success: true, data: updateUser });\r\n    } catch (err) {\r\n        res.json({ success: false, message: 'Failed to update users' });\r\n    }\r\n}"
                }
            ],
            "api/modules/warehouses/warehouses.ts": [
                {
                    "name": "getWarehouses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/warehouses/warehouses.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    // TODO: Filter by types\r\n    // const warehouseTypeId = req.query.warehouse_type;\r\n\r\n    let warehouses = await Warehouse.findAll();\r\n    res.json({ success: true, data: warehouses });\r\n  } catch (err) {\r\n    res\r\n      .json({ success: false, message: 'Failed to fetch warehouse types' })\r\n      .status(500);\r\n  }\r\n}"
                },
                {
                    "name": "getWarehouseTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/modules/warehouses/warehouses.ts",
                    "type": "",
                    "defaultValue": "async (req: any, res: any) => {\r\n  try {\r\n    const warehouseTypes = await WarehouseType.findAll();\r\n    res.json({ success: true, data: warehouseTypes });\r\n  } catch (err) {\r\n    res\r\n      .json({ success: false, message: 'Failed to fetch warehouse types' })\r\n      .status(500);\r\n  }\r\n}"
                }
            ],
            "src/app/core/header/header.stories.ts": [
                {
                    "name": "header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  props: {},\r\n})"
                }
            ],
            "crons/sync-products.ts": [
                {
                    "name": "ignoreMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "crons/sync-products.ts",
                    "type": "literal type",
                    "defaultValue": "{}"
                },
                {
                    "name": "sleep",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "crons/sync-products.ts",
                    "type": "",
                    "defaultValue": "(ms: number) => new Promise((resolve) => setTimeout(resolve, ms))"
                }
            ],
            "api/utils/authentication-middleware.ts": [
                {
                    "name": "IsAdmin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/utils/authentication-middleware.ts",
                    "type": "",
                    "defaultValue": "async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n) => {\r\n    if (res.locals.user?.role === 'admin') {\r\n        return next();\r\n    }\r\n    return res.status(401).send('Unauthorized');\r\n}"
                },
                {
                    "name": "userAuth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/utils/authentication-middleware.ts",
                    "type": "",
                    "defaultValue": "async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n) => {\r\n    const path: string = req.baseUrl;\r\n    if (!path.includes('api')) {\r\n        next();\r\n        return;\r\n    }\r\n\r\n    const authHeader = req.header('Authorization');\r\n    if (!authHeader) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res\r\n            .status(401)\r\n            .send('This request is missing Authorization header.');\r\n    }\r\n\r\n    const bearerToken = authHeader.replace('Bearer ', '');\r\n    if (!bearerToken) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res.status(401).send('unauthorized');\r\n    }\r\n\r\n    const jwtSecret = config.jwtSecret;\r\n    let jwt: any;\r\n    try {\r\n        jwt = jwtVerify(bearerToken, jwtSecret);\r\n        if (!jwt) {\r\n            if (res.locals.isAdmin) return next();\r\n\r\n            return res.status(401).send('This request is not authorized.');\r\n        }\r\n    } catch (err) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res.status(401).send('This request is not authorized.');\r\n    }\r\n\r\n    const id = jwt.id;\r\n    const email = jwt.email;\r\n    const firstName = jwt.firstName;\r\n    const lastName = jwt.lastName;\r\n    const role = jwt.role;\r\n\r\n    try {\r\n        const user = await User.findOne({ where: { id } });\r\n        res.locals.user = user;\r\n\r\n        if (!user) {\r\n            const newUser = await new User({\r\n                id,\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                role,\r\n            }).save();\r\n            res.locals.user = newUser;\r\n        }\r\n    } catch (err) {\r\n        if (res.locals.isAdmin) return next();\r\n\r\n        return res\r\n            .status(500)\r\n            .send('Failed to authorize user, please contact support.');\r\n    }\r\n\r\n    return next();\r\n}"
                }
            ],
            "api/kits.ts": [
                {
                    "name": "kitIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/kits.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  325,\r\n  327,\r\n  133,\r\n  135,\r\n  134,\r\n  324,\r\n  326,\r\n  122,\r\n  125,\r\n  270,\r\n  126,\r\n  127,\r\n  131,\r\n  328,\r\n  137,\r\n  98,\r\n  336,\r\n  132,\r\n  208,\r\n  381,\r\n  382,\r\n  384,\r\n  315,\r\n  314,\r\n  316,\r\n  317,\r\n  385,\r\n]"
                }
            ],
            "src/app/core/location-select/stories/location-select.stories.ts": [
                {
                    "name": "location1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/location-select/stories/location-select.stories.ts",
                    "type": "",
                    "defaultValue": "new Location()"
                },
                {
                    "name": "location2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/location-select/stories/location-select.stories.ts",
                    "type": "",
                    "defaultValue": "new Location()"
                },
                {
                    "name": "location3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/location-select/stories/location-select.stories.ts",
                    "type": "",
                    "defaultValue": "new Location()"
                },
                {
                    "name": "location4",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/location-select/stories/location-select.stories.ts",
                    "type": "",
                    "defaultValue": "new Location()"
                },
                {
                    "name": "locations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/location-select/stories/location-select.stories.ts",
                    "type": "Array<Location>",
                    "defaultValue": "[]"
                },
                {
                    "name": "noneSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/location-select/stories/location-select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: LocationSelectComponent,\r\n  props: {\r\n    label: 'pick',\r\n    locations: locations,\r\n  },\r\n})"
                },
                {
                    "name": "selected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/location-select/stories/location-select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: LocationSelectComponent,\r\n  props: {\r\n    label: 'drop',\r\n    locations: locations,\r\n    location: location1,\r\n    location2,\r\n    location3,\r\n    location4,\r\n  },\r\n})"
                }
            ],
            "src/app/core/login/login.stories.ts": [
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/login/login.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: LoginComponent,\r\n    props: {},\r\n})"
                }
            ],
            "src/app/core/modals/login-modal/login-modal.stories.ts": [
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/modals/login-modal/login-modal.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: LoginModalComponent,\r\n  props: {},\r\n})"
                }
            ],
            "src/app/core/btn-love/btn-love.stories.ts": [
                {
                    "name": "loved",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/btn-love/btn-love.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BtnLoveComponent,\r\n  props: {\r\n    loved: true,\r\n  },\r\n})"
                },
                {
                    "name": "unloved",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/btn-love/btn-love.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BtnLoveComponent,\r\n  props: {},\r\n})"
                }
            ],
            "src/app/product/modals/product-features/product-features.stories.ts": [
                {
                    "name": "productFeatures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/modals/product-features/product-features.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: ProductFeaturesComponent,\r\n  props: {\r\n    title: 'Test'\r\n  },\r\n})"
                }
            ],
            "src/app/product/modals/recommended-accessories/recommended-accessories.stories.ts": [
                {
                    "name": "productFeatures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/modals/recommended-accessories/recommended-accessories.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: RecommendedAccessoriesComponent,\r\n  props: {\r\n    title: 'Test',\r\n  },\r\n})"
                }
            ],
            "api/cache.ts": [
                {
                    "name": "ProductSlugIdMapCache",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/cache.ts",
                    "type": "",
                    "defaultValue": "new cache.Cache()"
                }
            ],
            "src/app/core/reset-password/reset-password.stories.ts": [
                {
                    "name": "resetPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/reset-password/reset-password.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: ResetPasswordComponent,\r\n    props: {},\r\n})"
                }
            ],
            "api/routes.ts": [
                {
                    "name": "router",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "api/routes.ts",
                    "type": "",
                    "defaultValue": "express.Router()"
                }
            ],
            "src/app/core/forgot-password/forgot-password.stories.ts": [
                {
                    "name": "sendRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/forgot-password/forgot-password.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: ForgotPasswordComponent,\r\n    props: {},\r\n})"
                }
            ],
            "src/app/core/sign-up/sign-up.stories.ts": [
                {
                    "name": "signup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/sign-up/sign-up.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: SignUpComponent,\r\n    props: {},\r\n})"
                }
            ],
            "src/app/core/modals/sign-up-modal/sign-up-modal.stories.ts": [
                {
                    "name": "signup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/modals/sign-up-modal/sign-up-modal.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: SignUpModalComponent,\r\n  props: {},\r\n})"
                }
            ],
            "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts": [
                {
                    "name": "TestData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: RecommendedWaterToysComponent,\r\n    props: {\r\n        toys: [toyExample, toyExample2]\r\n    }\r\n})"
                },
                {
                    "name": "toyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                    "type": "",
                    "defaultValue": "new Product()"
                },
                {
                    "name": "toyExample2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                    "type": "",
                    "defaultValue": "new Product()"
                }
            ],
            "src/app/core/counter/counter.stories.ts": [
                {
                    "name": "two",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/counter/counter.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: CounterComponent,\r\n  props: {\r\n    count: 2,\r\n  },\r\n})"
                },
                {
                    "name": "zero",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/counter/counter.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: CounterComponent,\r\n  props: {},\r\n})"
                }
            ],
            "src/app/core/floating-input/floating-input.stories.ts": [
                {
                    "name": "yachtNameEmpty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/floating-input/floating-input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: FloatingInputComponent,\r\n  props: {\r\n    label: 'Yacht name',\r\n    placeholder: 'Optional'\r\n  },\r\n})"
                },
                {
                    "name": "yachtNameFilled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/floating-input/floating-input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: FloatingInputComponent,\r\n  props: {\r\n    label: 'Yacht name',\r\n    placeholder: 'Optional',\r\n    ngModel: 'The Mik'\r\n  },\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "server.ts": [
                {
                    "name": "app",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "express.Express"
                },
                {
                    "name": "run",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/booking/models/booking.model.ts": [
                {
                    "name": "BillingType",
                    "childs": [
                        {
                            "name": "creditCard",
                            "value": "credit-card"
                        },
                        {
                            "name": "wireTransfer",
                            "value": "wire-transfer"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/booking/models/booking.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "api/cache.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductSlugIdMapCache",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/database/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Database",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "api/database/location-warehouse.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LocationWarehouse",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "api/database/location.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Location",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "api/database/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "api/database/warehouse-type.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WarehouseType",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "api/database/warehouse.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Warehouse",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "api/kits.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "kitIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/availability/availability.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bulkAvailability",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/availability/availability.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortByDelayInHours",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/availability/availability.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortByPrice",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/country-state-city/country-state-city.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAllCountries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/country-state-city/country-state-city.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCitiesOfCountry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/locations/locations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLocations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/products/products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/products/products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProductBySlug",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/products/products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRecommendedProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/transport-costs/transport-costs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTransportCosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/transport-costs/transport-costs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "putTransportCosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/user/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/user/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/user/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/warehouses/warehouses.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getWarehouses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/modules/warehouses/warehouses.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getWarehouseTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "router",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/utils/authentication-middleware.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IsAdmin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "api/utils/authentication-middleware.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "crons/sync-products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ignoreMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "crons/sync-products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sleep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__non_webpack_require__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compression",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleFilename",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/components/header/admin-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/components/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/pages/transport-costs/transport-costs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TransportCostsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/pages/users/users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/modals/add-booking/add-booking.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddBookingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/availability-graph.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AvailabilityGraph",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/availability-graph.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateAvailable",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/availability.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Availability",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/booking-location.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BookingLocation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/booking-period.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BookingPeriod",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/booking.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Booking",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/countries.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "City",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/countries.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Country",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/countries.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Timezone",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/pages/added-to-bookings/added-to-bookings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddedToBookingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/pages/booking-overview/booking-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/pages/checkout/checkout.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckoutPage",
                "coveragePercent": 0,
                "coverageCount": "0/45",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/pages/my-bookings/my-bookings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyBookingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/pages/sign-in/sign-in.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/services/bookings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BookingService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/services/countries.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CountryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/basic-layout/basic-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "booking1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "booking2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "existingBookingg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "location",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "locations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noBookings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-form/booking-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "product",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-list-item/booking-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-select/booking-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "booking1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "booking2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookingSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/booking-select/booking-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testBookings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/breadcrumbs/breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkoutBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paymentBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/btn-love/btn-love.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BtnLoveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/btn-love/btn-love.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loved",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/btn-love/btn-love.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unloved",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/card-grid/card-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/counter/counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/counter/counter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "two",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/counter/counter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "zero",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/countries-select/countries-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CountriesSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/faqs/faqs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FaqsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "asobdbfusbadfd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "faqExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "faqExample2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/faqs/stories/faqs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "faqs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/floating-input/floating-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FloatingInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/floating-input/floating-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "yachtNameEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/floating-input/floating-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "yachtNameFilled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/footer/footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "footer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/forgot-password/forgot-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/forgot-password/forgot-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sendRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/location-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocationSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "location1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "location2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "location3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "location4",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "locations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noneSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/location-select/stories/location-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/modals/login-modal/login-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/modals/login-modal/login-modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/modals/sign-up-modal/sign-up-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/modals/sign-up-modal/sign-up-modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/attachment.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Attachment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/availability-state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AvailabilityState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/breadcrumb.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Breadcrumb",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/faqs.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FAQ",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/image.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Image",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/location.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Location",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/toy.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Toy",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/my-bookings-list-item/my-bookings-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyBookingsListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/new-question/new-question.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewQuestionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/order-faq/order-faq.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderFaqComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/product-preview-images/product-preview-images.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductPreviewImages",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/recommended-product-carousel/recommended-product-carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecommendedProductCarousel",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/recommended-water-toys/recommended-water-toys.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecommendedWaterToysComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TestData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/recommended-water-toys/recommended-water-toys.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toyExample2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/reset-password/reset-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/location.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/metadata.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetadataService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/metadata.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/transport-cost.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TransportCostService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/warehouse.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WarehouseService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/single-product-list-item/single-product-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SingleProductListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/we-specialize/we-specialize.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WeSpecializeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/clear/clear.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClearComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/payment/models/order-request.ts",
                "type": "class",
                "linktype": "classe",
                "name": "OrderRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/payment/pages/complete-order/complete-order.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CompleteOrderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/payment/pages/order-summary/order-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/payment/pages/payment-landing/payment-landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaymentLandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/payment/pages/payment-landing/payment-options/payment-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaymentOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/payment/services/payment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaymentService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/add-to-booking/add-to-booking.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddToBookingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/drop-off-location/drop-off-location.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropOffLocationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/pick-up-location/pick-up-location.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PickUpLocationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/product-features/product-features.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductFeaturesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/product-features/product-features.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productFeatures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/recommended-accessories/recommended-accessories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecommendedAccessoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/recommended-accessories/recommended-accessories.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productFeatures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/select-dates/select-dates.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectDatesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/product/modals/yacht-name/yacht-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YachtNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/product/models/highlight.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Highlight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/models/product-description.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProductDescription",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/product/models/product-group.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProductGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/product/models/product-section.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProductSection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/product/models/product.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/product/pages/add/add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/product/pages/product/product.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductPage",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/product/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/un-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UnAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}